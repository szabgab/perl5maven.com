=title Automatic string to number conversion or casting in Perl
=timestamp 2013-01-10T10:45:56
=indexes is_number, looks_like_number, Scalar::Util, casting, type conversion
=status show
=books beginner_book
=author szabgab
=index 1
=archive 1
=feed 1
=comments 1
=social 1

=abstract start

נניח שאתה מכין רשימת קניות וכותב 

<code>
"2 כיכרות לחם"
</code>

ומוסר את הרשימה לבן/בת זוגך ואתה מקבל מייד כתגובה הודעת שגיאה על המרת טיפוס לא חוקית
אחרי הכל, "2" במקרה זה הוא חלק ממחרוזת, לא מספר.

אירוע כזה ודאי מאוד יתסכל אותך.

=abstract end

<h2>המרת טיפוסי משתנים ב פרל</h2>

ברוב שפות התכנות סוג, או טיפוס, האופרנד - המשתנה או הערך שעליו מבצעים את הפעולה - מגדיר את התנהגות הפעולה.
כלומר, <i>חיבור </i> שני מספרים היא פעולה חיבור מספרית, בעוד ש <i>חיבור </i> שתי מחחרוזות  משרשר אותן למחרוזת אחת.
תכונה זו נקראת העמס אופרטורים.

פרל לרוב עובדת בשיטה ההפוכה.

הפרל, האופרטור (הפעולה) קובע איך ישתמשו באופרנדים.

כלומר אם אתה משתמש בפעולה מספרית (למשל חיבור) אז שני הערכים יומרו אוטומטית למספרים אם אתה משתמש בפעולה על מחרוזות (למשל, שירשור מחרוזות) אז שני הערכים יומרו אוטומטית למחרוזות.

מתכנתי C ודאי יקראו להמרות כאלו  <b>casting</b> אך זו מילה שלא משתמשים בה בעולם הפרל. ככל הנראה כיוון שכל ההמרות הן אוטומטית.

לפרל לא משנה אם אתה כותב משהו כמספר או כמחרוזת.
פרל ממירה ביניהן אוטומטית לפי ההקשר.

ההמרה  <hl>מספר  => מחרוזת</hl> היא המרה קלה.
פשוט צריך לדמיין שהסימן "" נוסף מסביב למספר.

ההמרה  <hl>מחרוזת => מספר </hl> היא המרה שמעוררת קצת תהיות.
אם המחרוזת נראית כמו מספר, אז זה קל.
הערך המספרי הוא פשוט אותו דבר רק בלי הגרשיים

אם יש תו כלשהו שמונע מפרל להמיר את המחרוזת למספר, אז פרל תשתמש בכמה שיותר תווים מצד שמאל של המחרוזת בתור הערך המספרי ותתעלם מהיתר.

נראה מספר דוגמאות:

<code>
מקור   כמחרוזת   כמספר

  42         "42"        42
  0.3        "0.3"       0.3
 "42"        "42"        42
 "0.3"       "0.3"       0.3

 "4z"        "4z"        4        (*)
 "4z3"       "4z3"       4        (*)
 "0.3y9"     "0.3y9"     0.3      (*)
 "xyz"       "xyz"       0        (*)
 ""          ""          0        (*)
 "23\n"      "23\n"      23
</code>

בכל המקרים שבהם ההמרה  ממחרוזת למספר אינה מושלמת, פרט למקרה האחרון, פרל תוציא אזהרה. כמובן, בהנחה שהפעלתם את 
<hl>use warnings</hl> כפי שמומלץ לעשות.

<h2>דוגמה</h2>

אחרי שראינו את הטבלה, נראה איך זה נראה בקוד:

<code lang="perl">
use strict;
use warnings;

my $x = "4T";
my $y = 3;

</code>

השירשור ממיר את שני הערכים למחרוזות

<code lang="perl">
print $x . $y;    # 4T3
</code>

פעולת החיבור המספרית ממירה את שני הערכים למספרים

<code lang="perl">
print $x + $y;  # 7
                # Argument "4T" isn't numeric in addition (+) at ...
</code>

<h2>Argument isn't numeric (הארגומנט אינו מספרי)</h2>

זו האזהרה שמקבלים כשפרל מנסה להמיר מחרוזת למספר וההמרה אינה מושלמת.

לפרל יש עוד מספר אזהרות והודעות שגיאה נפוצות.
למשל <a href="/global-symbol-requires-explicit-package-name">Global symbol requires explicit package name</a>
and <a href="/use-of-uninitialized-value">Use of uninitialized value</a>.

<h2>איך להמנע מהאזהרות?</h2>

טוב שפרל מזהירה (אם מבקשים ממנה) כשההמרת לא הייתה מושלמת, אבל האם אין איזו פונקצי כמו
  <b>is_number</b> שיכולה לבדוק אם המחרוזת היא אכן מספר?

כן ולא.

לפרל אין פונקציית <b>is_number</b> כיוון שקיומה של הפונקציה מהווה מעין התחייבות שמפתחי פרל יודעים מהו מספר.
 למרבה הצער בשאר העולם אין ממש הסכמה בסוגיה זו. בחלק מהשיטות ".2" מקובל כמספר, בחלקן הוא לא נחשב למספר.
אפילו "2." לא מקובל בכל הקשר, ובכל שיטה כמספר.

יש הקשרים שבהם אפילו 0xAB נחשב למספר מספר הקסדצימלי, בסיס 16.

לכן הפונקציה <b>is_number</b> אבל יש פונקציה קצת פחות מתחייבת שנקראת <b>looks_like_number</b>. נראה כמו מספר

וזה בדיוק כמו שזה נראה הפונקציה אם מחרוזת נתונה נראית לפרל כמו מספר.

הפונקציה היא חלק המודול <a href="http://perldoc.perl.org/Scalar/Util.html">Scalar::Util</a> 
וניתן להשתמש בה כך:

<code lang="perl">
use strict;
use warnings;

use Scalar::Util qw(looks_like_number);

print "How many loaves of bread shall I buy? ";
my $loaves = <STDIN>;
chomp $loaves;

if (looks_like_number($loaves)) {
    print "I am on it...\n";
} else {
    print "Sorry, I don't get it\n";
}
</code>


ואל תשכח גם את החלב!


