=title Filtering values using Perl grep
=timestamp 2012-09-02T18:45:56
=indexes grep, filter, any, List::MoreUtils, <>, glob
=status show
=author szabgab
=archive 1
=comments 1
=social 1

=abstract start

הפונקציה <b>grep</b> , שהיא פונקציה מובנית של פרל (Perl) היא פונקציית <b>סינון</b>. מעבירים לפונקציה רשימת ערכים ותנאי, והיא מחזירה תת-רשימה של הערכרים שמקיימים את התנאי.
זו היא למעשה הכללה של הפקודות grep ו-egrep שמוכרות לנו מ-Unix  ומלינוקס, אך אין צורך להכיר את הפקודות כדי להבין את ה פונקציית ה-grep של פרל.

=abstract end

הפונקציה <hl>grep</hl> מקבלת שני ארגומנטים. בלוק ורשימת ערכים.

עבור כל ערך ברשימה הרך מוצב ב- <hl>$_</hl>, the
<a href="/the-default-variable-of-perl">משתנה ברירת המחדל הסקלרי של פרל</a>,
ואז הקוד בבלוק מבוצע. Iאם בלוק הקוד מחזיר <hl>false</hl>, הערך הנבדק מושמט. אם בלוק הקוד מחזיר <hl>true</hl> אז הערך הנבדק מהרשימה נשמר כאחדהערכים המוחזרים.

שימ לב, אין פסיק בין בלוק הקוד לבין הפרמטר השני!

נראה מספר דוגמאות לשימוש ב- grep:

<h2>סינון מספרים קטנים</h2>

<code lang="perl">
my @numbers = qw(8 2 5 3 1 7);
my @big_numbers = grep { $_ > 4 } @numbers;
print "@big_numbers\n";      # (8, 5, 7)
</code>

הפונקצייה grep מעבירה את כל הערכים שגדולים מ-4, ומסננת את כל הערכים שאינם גדולים מ-4.


<h2>סינון קבצים חדשים</h2>

<code lang="perl">
my @files = glob "*.log";
my @old_files = grep { -M $_ > 365 } @files;
print join "\n", @old_files;
</code>

<hl>glob "*.log"</hl> מחזירה את כל הקבצים בתיקיה הנוכחית שהסיומת שלהם היא .log.

<hl>-M $path_to_file</hl>מחזירה את מספר הימים שעברו מאז שהקובץ שונה לאחרונה.

דוגמה זו מסננת את הקבצים ששונו במשך השנה האחרונה, ומעבירה רק קבצים ששונו לאחרונה לפני יותר משנה.

<h2>האם אלמנט מסוים קיים במערך?</h2>

שימוש מעניין נוסף ב-<הוא בדיקה אם אלמנט מסוים נמצא במערך.
למשל אם יש לכם רשימת שמות ואתם רוצים לבדוק אם שם נתון נמצא ברשימה?

<code lang="perl">
use strict;
use warnings;

my @names = qw(Foo Bar Baz);
my $visitor = <STDIN>;
chomp $visitor;
if (grep { $visitor eq $_ } @names) {
   print "Visitor $visitor is in the guest list\n";
} else {
   print "Visitor $visitor is NOT in the guest list\n";
}
</code>

במקרה זה השתמשנו בפונצייה grep  
<a href="/scalar-and-list-context-in-perl">בהקשר סקלרי</a>.
בהקשר סקלרי<hl>grep</hl> מחזירה את מספר הערכים שעברו את הסינון.
כיוון שאנחנו בודקים אם  <hl>$visitor</hl> שוונה לאלמנט הנוכחי, קריאה זו  grep
תחזיר את מספר הפעמים שמקרה זה מתקיים.

אם המספר הוא 0, הביטוי כולו מקבל את הערך  אם מספר הפעמים הוא מספר חיובי כלשהו, אז ערך הביטוי הוא true.

הפתרון עובד, אך כיוון שהוא מסתמך על הקשר ייתכן שהוא לא יהיה ברור לכולם.
הנה פתרון נוסף שמשתמש בפונקציה <hl>any</hl> של המודול
<a href="https://metacpan.org/module/List::MoreUtils">List::MoreUtils</a> .

<h2>האם קיים אלמנט כלשהו שמתאים?</h2>

בדומה ל-<hl>grep</hl> גם <hl>any</hl> מקבלת בלוק של קוד ורשימת ערכים, אך היא מחזירה רק true  או  false. True, אם הבלוק מחזיר ערך true עבור ערך כלשהו מרשימת הערכים. False אם אף אחד מהערכים אינו מתאים.
בנוסף לכך היא גם עושה בדיקה מקוצרת, מה שיכול להיות הרבה יותר מהיר כרשימות גדולות.

<code lang="perl">
use List::MoreUtils qw(any);
if (any { $visitor eq $_ } @names) {
   print "Visitor $visitor is in the guest list\n";
} else {
   print "Visitor $visitor is NOT in the guest list\n";
}
</code>


<h2>grep  ביוניקס ו-  grep בלינוקס?</h2>

להשלמת ההסבר:

ציינתי קודם שהפונקציה המובנית <hl>grep</hl> בפרל היא הכללה של של פקודת הgrep  ביוניקס.

פקודת ה- <b> grep ביוניקס</b> מסננת את השורות על סמך ביטוי רגולרי.

<b>grep בפרל</b> יכולה לסנן לפי כל תנאי.

הקוד הבא בפרל מיישם את הגירסה הבסיסת של grep  ביוניקס:

<code lang="perl">
my $regex = shift;
print grep { $_ =~ /$regex/ } <>;
</code>

השורה הראשונה מקבל את הארגומנט משורת הפקודה, והארגומנט צריך להיות ביטוי רגולרי. שאר הארגומטים בשורת הפקודה צריכים להיות שמות קבצים.

אופרטור היהלום (diamond) <hl>&lt;&gt</hl> קורא את השורת מכל הקבצים על שורת הפקודה.
הפונקצימסננת אותם לפי הביטוי הרגולרי. השורות שעוברות את הסינון מודפסות.

<h2>grep ב-Windows</h2>

ב-Windows אין פקודת grep מובנית, אבל ניתן להתקין grep או להשתמש בקוד פרל כמו הקוד הנ"ל.


