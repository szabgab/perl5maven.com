=title מחרוזות בפרל: בגרשיים, באינטרפולציה, ועם escape
=timestamp 2013-07-14T23:00:00
=indexes strings, ', ", \, escape character, interpolation, quote, embedded characters, q, qq
=status show
=original quoted-interpolated-and-escaped-strings-in-perl
=books beginner_book
=author szabgab
=translator bruck
=archive 1
=comments 1
=social 1

=abstract start

בכל שפת תיכנות חשוב להבין את השימוש במחרוזות, אך בפרל הן חלק ממהותה של השפה. בייחוד אם תיקחו בחשבון שאחד מהפירושים הרטרואקטיביים לשם Perl הוא
 <b>Practical Extraction and Reporting Language - (שפת חילוץ נתונים ויצירת דוחות)</b> ואילו פעולות שדורשות הרבה מחרוזות.

=abstract end

ניתן לכתוב מחרוזות בין גרשיים בודדים <hl>'</hl> או בין גרשיים כפולים <hl>"</hl> ותהיה להן התנהגות קצת שונה בשני המקרים.

<h2>מחרוזות בגרשיים בודדים</h2>

אם כותבים מחרוזות בין גרשיים בודדים <hl>'</hl>, אז כמעט כל התווים,
פרט לגרש עצמו <hl>'</hl>,
מתפרשים כפי שהם כתובים בקוד.

<code lang="perl">
my $name = 'Foo';
print 'Hello $name, how are you?\n';
</code>

הפלט יהיה:

<code>
Hello $name, how are you?\n
</code>

<h2>מחרוזות בגרשיים כפולים</h2>

מחרוזות שנכתבות בגרשיים כפולים <hl>"</hl> מאפשרות אינטרפולציה
(משתנים אחרים שמשולבים כחלק מהמחרוזת יוחלפו על ידי התוכן שלהם),
כמו כן תווי בקרה מיוחדים מוחלפים לדוגמה, <hl>\n</hl> מוחלף על ידי שורה חדשה
ו- <hl>\t</hl> על ידי טאב.

<code lang="perl">
my $name = 'Foo';
my $time  = "today";
print "Hello $name,\nhow are you $time?\n";
</code>

הפלט יהיה:

<code>
Hello Foo,
how are you today?

</code>

יש לשים לב שיש <hl>\n</hl> מיד אחרי הפסיק, ועוד אחד בסוף המחרוזת.

כשמדובר במחרוזות פשוטות כמו  'Foo' and "today" שאין בהן תווים כמו<hl>$</hl>, <hl>@</hl>, ו- <hl>\</hl> 
זה לא משנה באילו גרשיים משתמשים.

שתי השורות הבאות יוצרות תוצאות זהות:

<code lang="perl">
$name = 'Foo';
$name = "Foo";
</code>


<h2> כתובות דואר אלקטרוני (דוא"ל) </h2>

כיוון שהסימן <hl>@</hl> הוא אחד הסימנים שעובר אינטרפולציה במחרוזות בגרשיים כפולים, כתיבת כתובות דוא"ל דורשת קצת יותר תשומת לב.

בגרשיים בודדים <hl>@</hl> לא עובר אינטרפולציה.

בגרשיים כפולים הקוד יגרום  לשגיאה:
<a href="http://perlmaven.com/global-symbol-requires-explicit-package-name">Global symbol "@bar" requires explicit package name at ... line ...</a>
ולאזהרה:
<b>Possible unintended interpolation of @bar in string at ... line ...</b>

האזהרה נותנת לנו רמז טוב יותר לבעיה האמיתית.

<code lang="perl">
use strict;
use warnings;
my $broken_email  = "foo@bar.com";
</code>

הקוד הבא, לעומת זאת, יעבוד נכון, כיוון שכתובת הדוא"ל מופיעה בגרשיים בודדים.

<code lang="perl">
use strict;
use warnings;
my $good_email  = 'foo@bar.com';
</code>

מה עושים אם רוצים אינטרפולציה של משתנים סקלריים אבל גם רוצים להשתמש בסימן השטרודל <hl>@</hl> במחרוזת?

<code lang="perl">
use strict;
use warnings;
my $name = 'foo';
my $good_email  = "$name\@bar.com";

print $good_email; # foo@bar.com
</code>

תמיד אפשר לסמן את התווים המיוחדים, במקרה זה סימן השטרודל, באמצעות תו הנקרא  <hl>@</hl>  <b>תו escape </b>
שהוא הקו הנטוי שמאלה (back-slash) <hl>\</hl>.

<h2>שילוב סימן הדולר $ במחרוזות בגרשיים כפולים.</h2>

בדומה לכך אם רוצים לשלב את סימן הדולר <hl>$</hl> במחרוזות בגרשיים כפולים, ניתן לעשות זאת בעזרת תו escape:

<code lang="perl">
use strict;
use warnings;
my $name = 'foo';
print "\$name = $name\n";
</code>

יודפס:

<code>
$name = foo
</code>

<h2>לעשות escape ל-escape</h2>

במקרים נדירים ייתכן שתרצה לשלב גם את הקו הנטוי השמאלי במחרוזת.
אם תכתוב אותו  <hl>\</hl> כחלק ממחרוזת, (בין אם היא בגרשיים בודדים או כפולים),
פרל תחשוב שאתה רוצה לעשות escape לתו שבא אחריו, ותפעל בהתאם.

אבל אין מה לדאוג. אפשר להגיד לפרל לא לעשות את זה על ידי שימוש בתו על עצמו:

פשוט שמים עוד קו נטוי שמאלי לפניו:

<code lang="perl">
use strict;
use warnings;
my $name = 'foo';
print "\\$name\n";:w
</code>

<code>
\foo
</code>

אני יודע שה-escape הכפול הזה נראה קצת מוזר, אך כך זה עובד גם בכל שפת תיכנות אחרת.


אם אתה רוצה להבין את כל הסיפור הזה עם ה-escape, נסה משהו כזה:

<code lang="perl">
print "\\\\n\n\\n\n";
</code>

תסתכל מה מודפס:

<code>
\\n
\n
</code>

aונסה להסביר את זה לעצמך.

<h2>לעשות escape לגרשיים כפולים</h2>

ראינו שאפשר לשים משתנים סקליים במחרוזות בגרשיים כפולים אבל אפשר גם לעשות escape על סימן הדולר <hl>$</hl> .

ראינו איך משתמשים בסימן ה-escape<hl>\</hl> ואפילו איך אפשר להשתמש בו על עצמו.

אבל מה אם רוצים להדפיס גרשיים כפולים במחרוזת בגרשיים כפולים?


This code has a syntax error:

<code lang="perl">
use strict;
use warnings;
my $name = 'foo';
print "The "name" is "$name"\n";
</code>

כשפרל רואה את הגרש הכפול לפני המילה  "name" היא חושבת שזה סוף המחרוזת 
ומתלוננת על כך ש-<b>name</b> היא <a href="http://perlmaven.com/barewords-in-perl"> מילה חשופה (bareword)</a>.

כפי שודאי כבר ניחשת, צריך לעשות escapeg לתו <hl>"</hl> :

<code lang="perl">
use strict;
use warnings;
my $name = 'foo';
print "The \"name\" is \"$name\"\n";
</code>

וזה מה שיודפס:

<code>
The "name" is "foo"
</code>

זה עובד, אבל זה לא ממש קריא.


<h2>האופרטור qq</h2>

זה המקום שבו אפשר להשתמש באופרטור <hl>qq</hl> או האופטור double-q (q כפול):

<code lang="perl">
use strict;
use warnings;
my $name = 'foo';
print qq(The "name" is "$name"\n);
</code>

לעין לא מיומנת ,  qq() עשוי להיראות כמו קריאה לפונקציה, אבל זו אינה קריאה לפונקציה. <hl>qq</hl> הוא אופרטור
ומייד נראה מה עוד הוא יודע לעשות, אבל קודם כל אסביר מה קורה.

אנחנו מחליפים את הגרשיים הכפולים <hl>"</hl> שקודם הקיפו את המחרוזת בסוגריים של האופרטור <hl>qq</hl>. המשמעות של זה היא שלגרשיים כפולים אין משמעות מיוחדת במחרוזת, לכן אין צורך לעשות להן escape.
כתוצאה מכך הקוד הרבה יותר קריא.
הייתי אפילו אומר שהוא יפה, אם לא הייתי חושש מזעמם של מתכנתי פייתון.

אבל מה אם רוצים לשלב סוגריים במחרוזת?

<code lang="perl">
use strict;
use warnings;
my $name = 'foo';
print qq(The (name) is "$name"\n);
</code>

אין בעיה. כל זמן שהסוגריים מאוזנים,
(כלומר לכל פתיחת סוגריים <hl>(</hl>, יש סגירת סוגריים מתאימה<hl>)</hl> ,
ופתיחת הסוגריים היא תמיד לפני סגירת הסוגריים) פרל תבין את המחרוזת.

אני יודע עכשיו בטח תרצה לשבור את זה, על ידי כתיבת סגור-סוגריים ללפני פתח-סוגריים:

<code lang="perl">
use strict;
use warnings;
my $name = 'foo';
print qq(The )name( is "$name"\n);
</code>

ואכן פרל תתריע על שגיאה ש- "name" היא  <a href="http://perlmaven.com/barewords-in-perl">) bareword מילה חשופה (</a>.
אפילו פרל לא יכולה להבין הכל.

כמובן שאפשר לעשות escape  לסוגריים<hl>\)</hl> and <hl>\(</hl>, אבל שם כבר היינו.
לא תודה!

חייבת להיות שיטה טובה יותר!

כזכור, כתבתי ש- <hl>qq</hl> הוא אופרטור ולא פונקציה? אז אפשר לעשות איתו כל מיני טריקים, נכון?

מה יקרה אם נחליף את הסוגריים הרגילים בסוגריים מסולסלים? <hl>{}</hl>:

<code lang="perl">
use strict;
use warnings;
my $name = 'foo';
print qq{The )name( is "$name"\n};
</code>

זה עובד ומדפיס בדיוק את המחרוזת שרצינו:

<code>
The )name( is "foo"
</code>

(לא שאני יודע למה מישהו ירצה להדפיס משהו כזה...)

אז <a href="http://perl.plover.com/yak/presentation/samples/slide027.html">מישהו מהשורה השניה</a> מרים את ידו,
ושואל מה אם רוצים גם סוגריים וגם סוגריים מסולסלים במחרוזת, <b>וגם</b> רוצים שהם לא יהיו מאוזנים?

משהו כזה, נכון?

<code lang="perl">
use strict;
use warnings;
my $name = 'foo';
print qq[The )name} is "$name"\n];
</code>

ומה שמודפס זה:

<code>
The )name} is "foo"
</code>


ודאי יש שימוש כלשהו גם לסוגריים המרובעים.


<h2>האופרטור q, q-בודד</h2>

בדומה ל- <hl>qq</hl> קיים אופרטור נוסף שנקרא <hl>q</hl>.
גם הוא מאפשר לבחור את התווים הסוגרים של המחרוזת שלך אך הוא מתפקד כגרש בודד
 <hl>'</hl> : כלומר הוא <b>לא</b> עושה אינטרפולציה על משתנים.

<code lang="perl">
use strict;
use warnings;
print q[The )name} is "$name"\n];
</code>

מדפיס:

<code>
The )name} is "$name"\n
</code>


