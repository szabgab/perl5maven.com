=title מערך @ARGV בפרל
=timestamp 2014-02-07T16:20:00
=indexes @ARGV, $ARGV[], $0, shift, argc
=status show
=original argv-in-perl
=books beginner_book
=author szabgab
=translator bruck
=archive 1
=comments 1
=social 1

=abstract start

אם כתבתם תוכנית בפרל, למשל<b>programming.pl</b>,
המשתמשים שלכם יכולים להריץ את התוכנית משורת הפקודה כך:<b>perl programming.pl</b>.

כמו כן הם יכולים גם להעביר  לתוכנית ארגומנטים בשורת הפקודה כך: <b>perl programming.pl -a --machine remote /etc</b>.
אי אפשר למנוע זאת מהמשתמשים, והתוכנית תתעלם מהארגומנטים הנוספים.
השאלה היא איך אתה, המתכנת, יכול לדעת אילו ערכים הועברו, ואם בכלל הועברו?

=abstract end

<h2>שורת הפקודה</h2>

פרל מספקת לנו אוטומטית מערך בשם <hl>@ARGV</hl>, שמחזיק את כל הערכים משורת הפקודה.
אין צורך להצהיר על המשתנה, אפילו אם משתמשים ב-: <hl>use strict</hl>.

המשתנה הזה תמיד קיים, והערכים משורת הפקודה מוצבים בו אוטומטית.

אם אין פרמטרים, המערך יהיה ריק. אם יש פרמטר אחד, אז ערכו יהיה האלמנט היחיד ב- <hl>@ARGV</hl>. בדוגמה שראינו קודם, המערך  <hl>@ARGV</hl> יכיל את האלמנטים הבאים:
-a, --machine, remote, /etc

נראה זאת בפעולה:

שמור את שורות הקוד הבאות כ -  <b>programming.pl</b>:

<code lang="perl">
use strict;
use warnings;
use Data::Dumper qw(Dumper);

print Dumper \@ARGV;
</code>

הרץ את התוכנית כך: <hl>perl programming.pl -a --machine remote /etc</hl> וזה מה שיודפס

<code>
$VAR1 = [
          '-a',
          '--machine',
          'remote',
          '/etc'
        ];
</code>

כפי שניתן לראות השתמשנו בפונקציית ה- <hl>Dumper</hl> של המודול <hl>Data::Dumper</hl> להדפסת התוכן של  <hl>@ARGV</hl>

מי שבא משפת תיכנות אחרת, ודאי שואל את עצמו
<b>איפה שמה של תוכנית הפרל?</b>

<h2>שמה של התוכנית הוא במשתנה $0</h2>

שמה של התוכנית שכרגע רצה, במקרה זה  <b>programming.pl</b>, תמיד נמצא במשתנה<hl>$0</hl>
. (שימו לב, המשתנה הזה אינו קשור ל-, <hl>$1</hl>, <hl>$2</hl>, וכו'!)

<h2>מתכנתי  C</h2>

אם אתם מכירים את <b>שפת התיכנות C</b>, אז זה דומה ל- <b>argv</b>, פרט לכך שהמערך
<hl>@ARGV</hl> בפרל <b>אינו</b> כולל את שם התוכנית.
ניתן למצוא אותו במשתנה <hl>$0</hl>. בנוסף לך, משתנה כמו  <b>argc</b>אינו נחוץ,
ניתן לקבל בקלות את  <a href="/scalar-and-list-context-in-perl">מספר האלמנטים במערך  @ARGV </a>
באמצעות הפונקציה  <hl>scalar</hl> או על ידי השמת המערך 
<a href="/scalar-and-list-context-in-perl">בהקשר סקלרי</a>.

<h2>  תיכנות במעטפת יוניקס/לינוקס Unix/Linux Shell</h2>

אם אתם מגיעים מעולם  <b>תיכנות ב-Unix/Linux Shell </b> ודאי תזהו שהמשתנה  <hl>$0</hl>
משמש גם שם כשמו של הסקריפט. ב-shell המשתנים <hl>$1</hl>, <hl>$2</hl>, etc.
מכילים את שאר הפרמטרים משורת הפקודה. בפרל משתנים אילו משמשים את הביטויים הרגולריים. הפרמטרים משורת הפקודה נמצאים במערך <hl>@ARGV</hl>. בדומה למשתנה <hl>$*</hl>
ב-Unix/Linux shell.

<h2>כיצד לחלץ את ערכי הפרמטרים משורת הפקודה מהמערך @ARGV</h2>

<hl>@ARGV</hl>הוא פשוט <a href="/perl-arrays">מערך הפרל</a>.
ההבדל היחי בינו לבין מערכים שאתם יוצרים הוא שאין צורך להצהיר עליו ופרל מציבה בו ערכים עם תחילת הרצת התוכנית שלכם.

פרט להבדלים אילו, אתם יכולים להתייחס אליו כאל  <a href="/perl-arrays">מערך רגיל</a>.
אתם יכולים לעבור על כל האלמנטים באמצעות <hl>foreach</hl>, או לגשת אליהם אחד אחד באמצעות אינדקס: <hl>$ARGV[0]</hl>.

אתם יכולים להפעיל את הפונקציות  <a href="/manipulating-perl-arrays">shift, unshift, pop or push</a> על המערך.

אפשר לא רק לקרוא את תוכנו של  <hl>@ARGV</hl>, אפשר גם לשנות אותו.

אם אתם מצפים לקבל ערך יחיד על שורת הפקודה ואתם רוצים לבדוק מהו, או אם הוא בכלל הועבר, אתם יכולים להסתכל על  <hl>$ARGV[0]</hl>. אם אתם מצפים לשני ערכים  אז תבדקו גם את <hl>$ARGV[1]</hl>.

לדוגמה, ניצור ספר טלפונים. אם מספקים לתוכנית שם אחד, היא תדפיס את מספר הטלפון המתאים. אם נותנים לה שם ומספר, היא תשמור את הערכים ב"מסד הנתונים" שלה.
(לא נטפל כאן בחלק של "מסד הנתונים" רק נעשה כאילו יש לנו משהו.)

אנחנו יודעים שהפרמטרים יתקבלו ב -  <hl>$ARGV[0]</hl> ואולי גם ב- <hl>$ARGV[1]</hl>, אבל אין להם שום משמעות מעבר לכך שהם שני האלמנטים הראשונים של מערך.
לרוב רצוי להשתמש במשתנים משלכם, עם שמות, במקום ב- $ARGV[0] וכדומה.
הדבר הראשון שנעדה הוא להעתיק את הערכים למשתנים עם שמות מייצגים.

משהו כזה יכול לעבוד:

<code lang="perl">
my $name   = $ARGV[0];
my $number = $ARGV[1];
</code>

אבל זה נראה יותר יפה:

<code lang="perl">
my ($name, $number) = @ARGV;
</code>

נראה עכשיו את הדוגמה במלואה (פרט לחלק של מסד הנתונים)
שימרו את הקוד הבא ב-<b>programming.pl</b>.

<code lang="perl">
use strict;
use warnings;

my ($name, $number) = @ARGV;

if (not defined $name) {
  die "Need name\n";
}

if (defined $number) {
  print "Save '$name' and '$number'\n";
  # save name/number in database
  exit;
}

print "Fetch '$name'\n";
# look up the name in the database and print it out
</code>

לאחר העתקת הערכים מ- <אנחנו בודקים אם ניתן שם.
אם לא, אנחנו קוראים ל- <hl>die</hl> שתדפיס הודעת שגיאה ותפסיק את ההרצה.

אם היה שם, אנחנו בודקים אם היה גם מספר. אם היה גם מספרף אנחנו שומרים אותו במסד הנתונים (היישום שלו אינו חלק מהקוד הנ"ל) ומסיימים את ההרצה.

אם לא היה מספר אנחנו מאחזרים אותו ממסד הנתונים. (שוב, לא מייושם כאן.)

נראה איך זה עובד: (סימן ה- $ רק מסמן את המקום לכתוב את הפקודות, אנחנו לא מקלידים אותו.)

<code>
$ perl programming.pl Foo 123
Save 'Foo' and '123'

$ perl programming.pl Bar 456
Save 'Bar' and '456'

$ perl programming.pl John Doe 789
Save 'John' and 'Doe'
</code>

שתי הקריאות הראשונות היו בסדר, אבל השלישית לא נראית כל כך טוב.
רצינו לשמור את מספר הטלפון של John Doe כ-789, אבל במקום זה התוכנית שלנו שמרה את מספר הטלפון של John כאילו הוא "Doe".

הסיבה לכך היא פשוטה ואין לכך שום קשר לפרל. זה יעבוד באותה צורה בכל שפה.
ה-shell שורת הפקודה, שממנה מריצים את התוכנית מפרקת את השורה ונותנת לפרל את הערכים, והיא בתורה מציבה אותם ב-
 <hl>@ARGV</hl>. גם ה-shell של לינוקס וגם שורת הפקודה של Windows מפצלות את שורת הפקודה בכל רווח. לכן כשהקלדנו <hl>perl programming.pl John Doe 789</hl>, למעשה הועברו שלושה פרמטרים לתוכנית שלנו. כדי לגרום לתוכנית לעבוד נבון, המשתמש צריך להכניס את הערכים שכוללים רווחים בתוך גרשיים.

<code>
$ perl a.pl "John Doe" 789
Save 'John Doe' and '789'
</code>

כמתכנתים, אין לכם הרבה מה לעשות נגד זה.

<h2>בדיקת הפרמטרים.</h2>

אולי תוכלו לבדוק אם מספר האלמנטים אינו עולה על המספר שאתם מצפים לו.
הבדיקה תמנע מהמשתמש לעשות את הטעות שראינו. אבל אם המשתמש רוצה לאחזר את מספר הטלפון של John Doe ושוכח את הגרשיים.

<code>
perl a.pl John Doe
Save 'John' and 'Doe'
</code>

במקרה זה יש שני פרמטרים, וזהו מספר הפרמטרים הנכון.

גם כאן תוכלו לעשות שיפור קל ולבדוק אם התוכן של המשתנה<hl>$number</hl> הוא בפורמט שאתם מוכן לקבל כמספר טלפון. כך ניתן לצמצם את הסיכוי לשגיאות במקרה זה.
גם אז התוכנית עדיין לא תהיהי מושלמת וודאי שהיא לא תהווה פתרון אוניברסלי: ביישומים אחרים ייתכן שיהיה מספר פרמטרים עם אותם אילוצים.

לצערנו, אין הרבה מה לעשות כאנחנו מפענחים את מערך  <hl>@ARGV</hl> "ידנית".
במאמר אחר באתר זה אכתוב על <hl>Getopt::Long</hl> ועל ספריות נוספות
שמקלות על החיים, אך כעת נסתכל על מקרה פשוט נוסף.


<h2>שימוש ב-shift לקריאת פרמטר יחיד</h2>

אחד המקרים הנפוצים הוא כשמצפים מהמשתמש לספק שם קובץ יחיד על שורת הפקודה.
במקרה זה אפשר לכתוב את הקוד הבא:

<code lang="perl">
my $filename = shift or die "Usage: $0 FILENAME\n";
</code>

נפצל את השורה לשני חלקים כדי להקל על ההסבר:
<hl>my $filename = shift</hl>

בדרך כלל, פונקציית <a href="/manipulating-perl-arrays">shift</a> מקבלת מערך כפרמטר, אך השתמשנו בא בלי פרמטר. במקרה כזה ברירת המחדל של shift  היא לפעול על 
 <hl>@ARGV</hl>. שורת הקוד מעבירה את הערך הראשון של <hl>@ARGV</hl>  למשתנה<hl>$filename</hl> . (לפחות כשהקוד הוא לא חלק מפונקציה)

כך שלפנינו הקוד הבא:
<hl>$filename or die "Usage: $0 FILENAME\n"</hl>

זהו ביטוי בוליאני <a href="/boolean-values-in-perl">boolean</a> .
אם המשתנה  <hl>$filename</hl> מכיל את שם הקובץ
אז ערכו הבוליאני יהיה <a href="/boolean-values-in-perl"> True</a> והתוכנית תמשיך לרוץ בלי לבצע את החלק <hl>or die ...</hl> part.
אם <hl>@ARGV</hl> ריק אז המשתנה<hl>$filename</hl>מקבל את הערך <hl>undef</hl>,
ערכו הבוליאני של הביטוי יהיה <a href="/boolean-values-in-perl"> False</a>
ופרל תבצע את חלקה הימני של שורת ה- <hl>or</hl>,
היא תדפיס הודעה ותפסיקאת הרצת התוכנית. 

מכאן שהקוד שראינו בודק אם ניתן ערך על שורת הפקודה. הערך מועתק אל<hl>$filename</hl>. אם אין ערך, התכנית מסיימת עם  <hl>die</hl>.

<h2>באג קטן</h2>

יש באג אחד קטן בקוד. אם המשתמש מספק 0 כשם הקובץ  ערכו הבוליאני גם הוא False וזה ייראה כאילו לא הועבר ערך והתוכנית תסרב לגעת בקובץ עם שם זה. השאלה היא: האם זה משנה?
האם נסתדר עם העבודה שהתוכנית שלנו לא יכולה לטפל בקובץ שנקרא <b>0</b>... ?

<h2>מקרים מורכבים</h2>

קיימים מקרים רבים נוספים הרבה יותר מורכבים מהמקרים שראינו עד כה
בשביל מקרים כאלו ודאי תירצו להשתמש בכלי כמו <hl>Getopt::Long</hl> שיודע לנתח את התוכן של  <hl>@ARGV</hl> על פי הצהרה כלשהי של סוג הפרמטרים שאתם מוכנים לקבל. 


