=title פונקציות לטיפול במחרוזות: length, lc, uc, index, substr
=timestamp 2013-08-06T23:00:00
=indexes length, lc, uc, index, substr, scalar
=status show
=books beginner_book
=author szabgab
=original string-functions-length-lc-uc-index-substr
=translator bruck
=archive 1
=comments 1
=social 1

=abstract start

בחלק זה של <a href="/perl-tutorial">המדריך לפרל </a> נלמד על חלק מהפונקציות של פרל לטיפול במחרוזות.

=abstract end

<h2>lc, uc, length</h2>

קיימות מספר פונקציות פשוטות כמו <b>lc</b> ו- <b>uc</b>
שמחזירות את המחרוזות באותיות גדולות או קטנות.
קיימת הפונקצייה <b>length</b> שמחזירה את מספר התווים במחרוזת נתונה.

למשל בדוגמה הבאה:

<code lang="perl">
use strict;
use warnings;
use 5.010;

my $str = 'HeLlo';

say lc $str;      # hello
say uc $str;      # HELLO
say length $str;  # 5
</code>


<h2>index</h2>

פונקצייה נוספת היא הפונקצייה <b>index</b> . פונקצייה זו מקבלת שתי מחרוזות ומחזירה את מיקומה של המחרוזת השנייה במחרזות הראשונה.

<code lang="perl">
use strict;
use warnings;
use 5.010;

my $str = "The black cat jumped from the green tree";

say index $str, 'cat';             # 10
say index $str, 'dog';             # -1
say index $str, "The";             # 0
say index $str, "the";             # 26
</code>

הקריאה הראשונה ל- <hl>index</hl> החזירה 10 כיוון שהמחרוזת "cat" מתחילה בתו העשירי.
הקריאה השנייה החזירה  <hl>index</hl>  -1 לציון העובדה ש- "dog" לא מופיעה במשפט.

הקריאה השלישית מראה לנו ש- <hl>index</hl> מחזירה 0
כשהמחרוזת השנייה מופיעה בתחילת המחרוזת הראשונה.

הדוגמה הרביעית מראה ש- <hl>index</hl> מחפשת התאמה מדוייקת ואי לכך יש הבחנה בין אותיות גדולות וקטנות.
לכן "the" אינה זהה ל- "The" .

<hl>index()</hl> מחפשת מחרוזות ולא רק מילים, לכן ניתן לחפש אפילו את המחרוזת "e ":

<code lang="perl">
say index $str, "e ";              # 2
</code>

ניתן להעביר ל-<hl>index()</hl> גם פרמטר שלישי שמציין את המיקום שבו יש להתחיל לחפש.
 אז כשמצאנו "e " בתו השני של המחרוזת הראשונה, אנו יכולים להתחיל לחפש עכשיו מהתו השלישי כדי לראות אם יש עוד מופע של 
 "e ":

<code lang="perl">
say index $str, "e ";              # 2
say index $str, "e ", 3;           # 28
say index $str, "e", 3;            # 18
</code>

חיפוש  "e" ללא רווח ייתן לנו תוצאה שונה.

ובנוסף לכך קיימת פונקציה הנקראה <b>rindex</b> (אינדקס ימני)
שמתחילה לחפש מהצד הימני של המחרוזת:

<code lang="perl">
say rindex $str, "e";              # 39
say rindex $str, "e", 38;          # 38
say rindex $str, "e", 37;          # 33
</code>

<h2>substr</h2>

נראה לי שהפונקציה המעניינת ביותר במאמר זה היא <hl>substr</hl>.
היא בעצם ההיפך מ- index(). בעוד ש- index() אומרת לכם 
<b>היכן נמצאת מחרוזת נתונה</b>, substr נותנת לכם את  <b>תת המחרוזת במישומים נתונים</b>.
בדרך כלל <hl>substr</hl> מקבלת 3 פרמטרים. הראשון הוא המחרזות. השני הוא המיקום ההתחלתי, שנקרא גם <b>offset (מקום)</b>, והשלישי הוא <b>האורך</b> 
של תת המחרוזת שאנחנו רוצים לקבל.

<code lang="perl">
use strict;
use warnings;
use 5.010;

my $str = "The black cat climbed the green tree";

say substr $str, 4, 5;                      # black
</code>

הפונקציה substr עובדת על בסיס 0 ולכן התו במקום הרביעי הוא האות b.

<code lang="perl">
say substr $str, 4, -11;                    # black cat climbed the
</code>

הפרמטר השלישי(האורך) יכול להיות גם מספר שלילי. במקרה זה הוא אומר לנו את מספר התווים מהציד הימני של המחרוזת המקורית שלא צריכות להיות חלק מתת המחרוזת. מה שכתוב למעלה אומר: ספור 4 משמאל, 11 מימין, החזר מה שביניהם.

<code lang="perl">
say substr $str, 14;                        # climbed the green tree
</code>

אפשר להשמיט את הפרמטר השלישי  (אורך) והמשמעות של זה היא להחזיר את כל התווים מהמקום הרביעי עד סוף המחרוזת.

<code lang="perl">
say substr $str, -4;                        # tree
say substr $str, -4, 2;                     # tr
</code>

אנחנו יכולים במספרים שליליים גם ב-offset( מקום), והמשמעות של זה היא:
ספור 4 מצד ימין והתחל משם. זה אותו דבר כמו לכתוב
<hl>length($str)-4</hl> ב-offset.

<h2>החלפת חלק ממחרוזת</h2>

הדוגמה האחרונה היא קצת מוזרה.
עד כה בכל המקרים <hl>substr</hl> החזיר תת-מחרוזת
ולא שינה את המחרוזת המקורית. בדוגמה זאת הערך המוחזר על ידי substr ייתנהג אותו דבר, אבל substr גם תשנה את תוכנה של המחרוזת המקורית!

הערך המוחזר על ידי <hl>substr()</hl> תמיד נקבע על ידי שלושת הפרמטרים הראשונים, אבל במקרה זה  substr מקבל גם פרמטר רביעי. זוהי מחרוזת שתחליף את תת-המחרוזת במחרוזת המקורית.

<code lang="perl">
my $z = substr $str, 14, 7, "jumped from";
say $z;                                                     # climbed
say $str;                  # The black cat jumped from the green tree
</code>

אז מה שקורה זה כך: <hl>substr $str, 14, 7, "jumped from"</hl> מחזירה את המילה <b>climbed</b>,
אבל בגלל הפרמטר הרביעי, המחרוזת המקורית שונתה.

