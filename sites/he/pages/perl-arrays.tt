=title מערכים בפרל 
=timestamp 2013-10-15T20:45:02
=indexes @, array, arrays, length, size, foreach, Data::Dumper, scalar, push, pop, shift
=status show
=books beginner_book
=author szabgab
=translator bruck
=original perl-arrays
=archive 1
=comments 1
=social 1

=abstract start

בחלק זה של <a href="/perl-tutorial">המדריך לפרל</a> נלמד על <b>מערכים בפרל</b>.
נתחיל בסקירה כללית על מערכים ואיך הם עובדים בפרל. בהמשך נראה הסברים מפורטים יותר.

שמות משתנים של מערכים בפרל תמיד מתחילים בסימן: <hl>@</hl>.

כיוון שאנחנו מתעקשים להשתמש ב <hl>strict</hl> יש להכריז על המשתנים באמצעות מלת המפתחhl>my</hl> 
לפני השימוש הראשון בהם.

=abstract end

זיכרו שכל הדוגמאות מניחות שהקובץ שלכם מתחיל כך:

<code lang="perl">
use strict;
use warnings;
use 5.010;
</code>

הכרזה על מערך:

<code lang="perl">
my @names;
</code>

הכרזה על מערך חהצבת ערכים במערך:

<code lang="perl">
my @names = ("Foo", "Bar", "Baz");
</code>


<h2>בדיקת ערכים במערך</h2>

<code lang="perl">
use Data::Dumper qw(Dumper);

my @names = ("Foo", "Bar", "Baz");
say Dumper \@names;
</code>

הפלט הוא:

<code>
$VAR1 = [
        'Foo',
        'Bar',
        'Baz'
      ];
</code>

<h2>לולאות foreach ומערכים בפרל </h2>

<code lang="perl">
my @names = ("Foo", "Bar", "Baz");
foreach my $n (@names) {
  say $n;
}
</code>

התואצה היא הדפסת:

<code>
Foo
Bar
Baz
</code>

<h2>גישה לאלמנט במערך</h2>

<code lang="perl">
my @names = ("Foo", "Bar", "Baz");
say $names[0];
</code>

שימו לב שכאשר ניגשים לאלמנט בודד במערך הסיגיל ההתחלתי משתנה מ- <hl>@</hl> ל- <hl>$</hl>.
במבט ראשון זה עלול לבלבל, אבל אם חושבים על זה, אז הסיבה ברורה.

<hl>@</hl> מסמן רבים ו-  <hl>$</hl> מסמן יחיד. כשניגשים לאלמנט בודד במערך הוא מתנהג בדיוק כמו משתנה סקלרי.

<h2>אינדקסים במערך</h2>

אינדקסים של מערך מתחילים מ-0 האינדקס הגדול ביותר במערך תמיד יימצא במשתנה שנקרא 
<hl>$#name_of_the_array</hl>. ולכן

<code lang="perl">
my @names = ("Foo", "Bar", "Baz");
say $#names;
</code>

ידפיס 2 כיוון שהאינדקסים הם 0,1 ו-2

<h2>האורך, או הגודל של מערך</h2>

בפרל אין פונקציה שמיועדת להחזיר את גודלו של מערך, אבל יש מספר דרכים להשיג את הנתון. גודלו של המערך הוא תמיד אחד יותר מהאינדקס הגדול ביותר. במקרה שראינו <hl>$#names+1</hl> הוא <b>הגודל</b> או
<b>האורך</b> של המערך.

אפשרות נוספת היא להשתמש בפונקציה <hl>scalar</hl> כדי לקבל את גודלו של המערך:

<code lang="perl">
my @names = ("Foo", "Bar", "Baz");
say scalar @names;
</code>

ידפיס 3.

הפונקציה scalar היא מעין פונציית המרה, שבין היתר, ממירה מערך לערך סקלרי. עקב החלטה שרירותית, אך נבונה, ההמרה מחזירה את גודלו של המערך.

<h2>שימוש בלולאה כדי לעבור על האינדקסים של המערך</h2>

קיימים מקרים שבהם מעבר על ערכי המערך אינו מספיק.
ייתכן שנצטרך גם את הערך וגם את האינדקס של הערך.
במקרה כזה נצטרך לרוץ בלולאה על האינדקסים, ולקבל את הערכים באמצעות האינדקסים:

<code lang="perl">
my @names = ("Foo", "Bar", "Baz");
foreach my $i (0 .. $#names) {
  say "$i - $names[$i]";
}
</code>

מדפיס:

<code>
0 - Foo
1 - Bar
2 - Baz
</code>

<h2>Push למערך פרל</h2>

<hl>push</hl> מוסיף ערך חדש בסוף המערך, ובכך מגדיל את המערך:

<code lang="perl">
my @names = ("Foo", "Bar", "Baz");
push @names, 'Moo';

say Dumper \@names;
</code>

התוצאה היא:

<code>
$VAR1 = [
        'Foo',
        'Bar',
        'Baz',
        'Moo'
      ];
</code>


<h2>Pop ממערך פרל</h2>

<hl>pop</hl> לוקח את האלמנט האחרון של מערך:

<code lang="perl">
my @names = ("Foo", "Bar", "Baz");
my $last_value = pop @names;
say "Last: $last_value";
say Dumper \@names;
</code>

התוצאה היא:

<code>
Last: Baz
$VAR1 = [
        'Foo',
        'Bar',
      ];
</code>

<h2>shift על מערך פרל</h2>

<hl>shift</hl> מחזיר את הערך השמאלי ביותר של המערך ומזיז את כל שאר האלמנטים מקום אחד שמאלה.

<code lang="perl">
my @names = ("Foo", "Bar", "Baz");

my $first_value = shift @names;
say "First: $first_value";
say Dumper \@names;
</code>

התוצאה היא:

<code>
First: Foo
$VAR1 = [
        'Bar',
        'Baz',
      ];
</code>

