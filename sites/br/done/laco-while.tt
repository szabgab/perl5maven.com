=title O laço while
=timestamp 2013-03-12T12:45:51
=indexes while, while (1), loop, laço, infinite loop, laço infinito, last
=status show
=original while loop
=books beginner_book
=author szabgab
=translator leprevost
=index 1
=archive 1
=feed 1
=comments 1
=social 1

=abstract start

Neste capitulo do <a href="/perl-tutorial">tutorial Perl</a> nós iremos ver <b>como os laços do tipo while funcionam em Perl</b>.

=abstract end

<code lang="perl">
use strict;
use warnings;
use 5.010;

my $contador = 10;

while ($contador > 0) {
  say $contador;
  $ccontador -= 2;
}
say 'pronto';
</code>

O laço <hl>while</hl> possui uma condição, exemplificada no caso acima avaliando se a variável $contador é maior do que 0,
seguido de um bloco de código envolto por chaves.

Quando a execução do código acima atinge o ponto inicial do laço while, ocorre então a verificação da condição onde a mesma é testada
retornando um valor <a href="/boolean-values-in-perl">verdadeiro ou falso</a>. Caso seja <hl>FALSA</hl> o bloco é ignorado e a próxima
declaração do código é realizada, imprimindo 'pronto' na tela.

Se a condição do laço <hl>while</hl> for <hl>VERDADEIRA</hl> então o bloco é executado. Após isso a execução retorna ao ponto de
teste e a condição é testada novamente. Caso dessa vez seja falsa, o bloco é ignorado e o texto 'pronto'
é impresso na tela. Se for verdadeira o bloco é executado novamente, e em seguida retornando ao ponto de teste...

Esse processo se repete enquanto a condicional testada retornar valor verdadeiro, ou seja:

<hl>while</hl> (condição-for-verdadeira) { faça algo }</hl>

<h2>Laços infinitos</h2>

NO código exemplo acima nós sempre reduzimos o valor da variável, dessa forma garantimos que em algum momento a condicional seria falsa. 
Se por algum motivo a condicional nunca se tornar falsa você terá um <hl>laço infinito</hl>. O seu programa ficará preso
em um pequeno bloco de execução e nunca conseguirá escapá-lo.

Isso aconteceria se nós por exempĺo, estivéssemos esquecido de reduzir o valor da variável <hl>$contador</hl>, ou se nós estivéssemos aumentando o seu valor.

Se nesse caso fosse um acidente, então nós teríamos um <i>bug</i>.

Por outro lado, em alguns casos o uso <b>proposital</b> de laços infinitos pode deixar o seu programa mais simples de escrever e fácil de ser lido.
E nós adoramos código fácil de ser lido!
Se nós fossemos utilizar um laço infinito, poderíamos utilizar uma condição que sempre seja verdadeira.

Então podemos escrever:

<code lang="perl">
while (42) {
  # faça algo aqui
}
</code>

É claro que pessoas que não possuam as <a href="http://en.wikipedia.org/wiki/Answer_to_Life,_the_Universe,_and_Everything#Answer_to_the_Ultimate_Question_of_Life.2C_the_Universe.2C_and_Everything_.2842.29">referências culturais adequadas</a>
irão se perguntar o porque de usar 42, então podemos utilizar o sempre entediante número 1 em laços infinitos.

<code lang="perl">
while (1) {
  # faça algo aqui
}
</code>

Naturalmente, observando que a execução do código não possui escapatória do laço, você se perguntaria como pode então o programa encerrar a sua execução,
talvez sendo interrompido externamente?

Para isso, existem diferentes resoluções:

Uma das soluções é utilizar a declaração <hl>last</hl> dentro do laço.
Dessa forma, a execução irá ignorar o resto do bloco e não irá realizar mais as avaliações da condicional.
Efetivamente terminando a execução do laço. As pessoas normalmente utilizam essa declaração dentro de alguma condicional.

<ode lang="perl">
use strict;
use warnings;
use 5.010;

while (1) {
  print "Qual linguagem de programação você está aprendendo agora? ";
  my $nome = <STDIN>;
  chomp $nome;
  if ($nome eq 'Perl') {
    last;
  }
  say 'Errado! Tente novamente!';
}
say 'pronto';
</code>

Neste exemplo nós fazemos uma pergunta ao usuário e esperamos que seja capaz de responder com a resposta correta. 
Caso não responda 'Perl', ficará preso no laço eternamente.

Então a conversa poderá seguir da seguinte forma:

<code>
Qual linguagem de programação você está aprendendo agora?
>  Java
Errado! Tente novamente!
Qual linguagem de programação você está aprendendo agora?
>  PHP
Errado! Tente novamente!
Qual linguagem de programação você está aprendendo agora?
>  Perl
pronto
</code>

Como pode observar, uma vez o usuário digitando a resposta correta, a declaração <hl>last</hl> é invocada e o resto do bloco
iincluindo <hl>say 'Errado! Tente novamente!';</hl> é ignorado e a execução segue adiante após o <hl>laço while</hl>.
