=title Strings em Perl: entre aspas, interpoladas e escapadas
=timestamp 2013-05-31T17:15:03
=indexes strings, ', ", \, escape character, interpolation, quote, embedded characters, q, qq
=status show
=original quoted-interpolated-and-escaped-strings-in-perl
=books beginner_book
=author szabgab
=translator aramisf
=index 1
=archive 1
=feed 1
=comments 1
=social 1

=abstract start

Entender como as strings funcionam é importante em toda linguagem de
programação, mas em Perl elas são parte da essência da linguagem.
Especialmente se você considerar que um dos acrônimos do Perl é <b>Practical
Extraction and Reporting Language</b> e para isso você precisa usar muitas
strings.

=abstract end

Strings podem ser colocadas dentro de aspas simples <hl>'</hl> ou duplas
<hl>"</hl> e elas tem um comportamento ligeiramente diferente.

<h2>Strings com aspas simples</h2>

Se você coloca caracteres entre aspas simples <hl>'</hl>, então quase todos os
caracteres, exceto a aspa simples <hl>'</hl> e a contra-barra <hl>\</hl>, o
caractere de escape, são interpretados como são escritos no código.

<code lang="perl">
my $name = 'Foo';
print 'Hello $name, how are you?\n';
</code>

A saída será:

<code>
Hello $name, how are you?\n
</code>

<h2>Strings com aspas duplas</h2>

Strings colocadas entre aspas duplas <hl>"</hl> provêm interpolação (outras
variáveis embutidas na string serão substituídas pelo seu conteúdo), e elas
também substituem os caracteres escapados especiais, tais como <hl>\n</hl> por
uma quebra de linha e <hl>\t</hl> por uma tabulação.

<code lang="perl">
my $name = 'Foo';
my $time  = "today";
print "Hello $name,\nhow are you $time?\n";
</code>

A saída será:

<code>
Hello Foo,
how are you today?

</code>

Nota, há um <hl>\n</hl> logo depois da vírgula e outro ao final da string.

Para strings simples tais como 'Foo' e "today" que não possuem os caracteres
<hl>$</hl>, <hl>@</hl>, e <hl>\</hl>, não faz diferença se forem colocadas
entre aspas duplas ou simples.

As duas linhas seguintas tem exatamente o mesmo resultado:

<code lang="perl">
$name = 'Foo';
$name = "Foo";
</code>


<h2>Endereços de Correio Eletrônico</h2>

Como <hl>@</hl> também interpola entre aspas duplas, escrever endereços de
correio eletrônico precisam de um pouco mais atenção.

Em aspas simples <hl>@</hl> não interpola.

Em aspas duplas esse código gera um erro:
<a href="/global-symbol-requires-explicit-package-name">Global symbol "@bar"
requires explicit package name at ... line ...</a> (em inglês por enquanto)

e um alerta:
<b>Possible unintended interpolation of @bar in string at ... line ...</b>

Este último pode ser aquele que nos dá a melhor pista do que está realmente
acontecendo.

<code lang="perl">
use strict;
use warnings;
my $broken_email  = "foo@bar.com";
</code>

Esse código, por outro lado, tendo o endereço de correio eletrônico entre
aspas simples, vai funcionar.

<code lang="perl">
use strict;
use warnings;
my $good_email  = 'foo@bar.com';
</code>

E se você precisar de ambos interpolações de variáveis escalares e quiser
incluir arrobas <hl>@</hl> na string?

<code lang="perl">
use strict;
use warnings;
my $name = 'foo';
my $good_email  = "$name\@bar.com";

print $good_email; # foo@bar.com
</code>

Você sempre pode <b>escapar</b> os caracteres especiais, neste caso a arroba
<hl>@</hl>, usando o chamado <b>caractere de escape</b> que é a contra-barra
<hl>\</hl>.

<h2>Embutindo o cifrão $ em strings com aspas duplas</h2>

Do mesmo jeito se você quiser incluir um sinal <hl>$</hl> em uma string com
aspas duplas, você pode escapa-lo também:

<code lang="perl">
use strict;
use warnings;
my $name = 'foo';
print "\$name = $name\n";
</code>

Vai imprimir:

<code>
$name = foo
</code>

<h2>Escapando o escape</h2>

Existem casos onde você gostaria de incluir o escape na string. Se você
colocar uma contra-barra <hl>\</hl> em uma string, (seja ela com aspas simples
ou duplas), o Perl vai pensar que você quer escapar o próximo caractere e
fazer sua mágica.

Não se preocupe. Você pode dizer ao Perl para parar isso escapando o
caractere de escape:

Simplesmente coloque mais um escape antes dele:

<code lang="perl">
use strict;
use warnings;
my $name = 'foo';
print "\\$name\n";:w
</code>

<code>
\foo
</code>

Entendo que escapar um escape é um pouco estranho, mas isto é basicamente como
a coisa funciona em todas as outras linguagens também.


Se você quiser entender como funciona esse esquema de escapes, tente algo
como:

<code lang="perl">
print "\\\\n\n\\n\n";
</code>

veja o que é impresso:

<code>
\\n
\n
</code>

e tente explicar para si mesmo.

<h2>Escapando aspas duplas</h2>

Vimos que você pode colocar variáveis escalares em strings envoltas por aspas
duplas e pode também escapar o sinal <hl>$</hl>.

Vimos que você pode usar o escape <hl>\</hl> e como pode escapa-lo também.

E se você quiser imprimir uma aspa dupla dentro de uma string envolta por
aspas duplas?


Este código tem um erro de sintaxe:

<code lang="perl">
use strict;
use warnings;
my $name = 'foo';
print "The "name" is "$name"\n";
</code>

Quando o Perl ve aspas duplas logo antes da palavra "name" ele pensa que este
foi o final da string e então ele reclama que a palavra <b>name</b> é uma <a
href="/palavras-soltas-em-perl">palavra solta</a>.

Você já deve ter conjecturado, é preciso escapar as aspas duplas <hl>"</hl>
ali embutidas:

<code lang="perl">
use strict;
use warnings;
my $name = 'foo';
print "The \"name\" is \"$name\"\n";
</code>

Isto vai imprimir:

<code>
The "name" is "foo"
</code>

Funciona, mas é um tanto difícil de ler.


<h2>qq, o operator duplo-q</h2>

Aqui é onde você pode usar o <hl>qq</hl>, ou o operador duplo-q:

<code lang="perl">
use strict;
use warnings;
my $name = 'foo';
print qq(The "name" is "$name"\n);
</code>

Para olhos não treinados, o qq() pode parecer uma chamada de função, mas não
é. <hl>qq</hl> é outro operador e você verá em um segundo o que mais ele pode
fazer, mas antes deixe-me explicar.

Trocamos as aspas duplas <hl>"</hl> que costumavam envolver a string pelos
parêntesis do <hl>qq</hl>. Isso significa que as aspas duplas não são mais
especiais na string, e não é mais necessário escapá-las.
Isso faz o código ficar mais legível.
Até poderia dizer que ficou mais bonito, se eu não temesse a ira dos
programadores Python.

Mas e se você quisesse incluir os parêntesis na sua string?

<code lang="perl">
use strict;
use warnings;
my $name = 'foo';
print qq(The (name) is "$name"\n);
</code>

Sem problemas, contanto que eles estejam pareados (ou seja, ter a mesma
quantidade de parêntesis abertos <hl>(</hl> e fechados <hl>)</hl>, e sempre
ter um parentesis aberto <hl>(</hl> antes de seu correspondente fechado
<hl>)</hl>) o Perl pode entender.

Eu sei. Você vai querer fechar parêntesis antes de abrir, só para quebrar a
regra:

<code lang="perl">
use strict;
use warnings;
my $name = 'foo';
print qq(The )name( is "$name"\n);
</code>

De fato, o Perl lhe dará um erro de sintaxe sobre "name" ser uma<a
href="/palavras-soltas-em-perl">palavra solta</a>. O Perl não pode entender
tudo, pode?

Claro que é possível escapar os parêntesis dentro da string <hl>\)</hl> e
<hl>\(</hl>, mas já descemos nessa toca de coelho.
Não, obrigado!

Deve haver um caminho melhor.

Lembra que escrevi que o <hl>qq</hl> é um operador e não uma função? Então ele
pode fazer truques, certo?

E se trocarmos os parêntesis que envolvem a string por chaves? <hl>{}</hl>:

<code lang="perl">
use strict;
use warnings;
my $name = 'foo';
print qq{The )name( is "$name"\n};
</code>

Funciona e imprime a string que queríamos:

<code>
The )name( is "foo"
</code>

(contudo, não sei porquê eu iria querer imprimir uma coisa desse tipo...)

Então o <a
href="http://perl.plover.com/yak/presentation/samples/slide027.html">cara da
segunda fila</a> levanta a mão e pergunta: "E se você quiser parêntesis e
chaves na sua string, ambos descasados? (link em inglês)

Você quer dizer assim, certo?

<code lang="perl">
use strict;
use warnings;
my $name = 'foo';
print qq[The )name} is "$name"\n];
</code>

imprime isto:

<code>
The )name} is "foo"
</code>


... deve haver uma forma de utilizar os colchetes também, certo?


<h2>q, o operator q-unico</h2>

Semelhante ao <hl>qq</hl> existe também um operador chamado <hl>q</hl>. Ele
também permite que você selecione os delimitadores da sua string, mas isso
funciona como uma aspa simples <hl>'</hl> funciona: <b>SEM</b> interpolação de
variáveis.

<code lang="perl">
use strict;
use warnings;
print q[The )name} is "$name"\n];
</code>

imprime:

<code>
The )name} is "$name"\n
</code>


