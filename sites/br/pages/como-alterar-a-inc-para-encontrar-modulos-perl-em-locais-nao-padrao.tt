=title Como alterar a @INC para encontrar módulos Perl em locais não padrão?
=timestamp 2013-05-30T19:10:00
=indexes @INC, use, PERLLIB, PERL5LIB, lib, -I
=status show
=original how-to-change-inc-to-find-perl-modules-in-non-standard-locations
=books beginner_book
=author szabgab
=translator aramisf
=index 1
=archive 1
=feed 1
=comments 1
=social 1

=abstract start

Ao usar módulos que não estão instalados nos diretórios padrão do Perl,
precisamos alterar a variável @INC para que o Perl possa encontra-los. Existem
alguns meios de fazer isso, resolvendo diferentes casos de uso.

Vejamos primeiramente esses casos de uso:

=abstract end


<h2>Carregando o seu módulo Perl privado</h2>

Você tem um script e está começando a mover algumas partes do seu código para
um novo módulo chamado <hl>My::Module</hl>.
Você gravou o módulo em <hl>/home/foobar/code/My/Module.pm</hl>.

Seu script Perl agora começa assim:

<code lang="perl">
use strict;
use warnings;

use My::Module;
</code>

Quando você executa o script você recebe uma mensagem de erro amigável como esta:

<code>
Can't locate My/Module.pm in @INC (@INC contains:
   /home/foobar/perl5/lib/perl5/x86_64-linux-gnu-thread-multi
   /home/foobar/perl5/lib/perl5
   /etc/perl
   /usr/local/lib/perl/5.12.4
   /usr/local/share/perl/5.12.4
   /usr/lib/perl5 /usr/share/perl5
   /usr/lib/perl/5.12
   /usr/share/perl/5.12
   /usr/local/lib/site_perl
   .).
   BEGIN failed--compilation aborted.
</code>

O Perl não consegue encontrar o seu módulo.

<h2>Atualizando um módulo Perl</h2>

Você está pensando em atualizar um módulo proveniente do CPAN em um sistema
qualquer. Você não quer instalar este módulo no local padrão ainda. Antes você
gostaria de coloca-lo em um diretório privado, testa-lo, e instalar no sistema
somente quando estiver certo de que o módulo funciona bem.

Neste caso também você "instala" o módulo em um diretório privado, por
exemplo, em /home/foobar/code e de alguma forma você pretende convencer o Perl
a encontrar aquela versão do módulo, e não a que está instalada no sistema.

<h2>O comando use</h2>

Quando o Perl encontra <hl>use My::Module;</hl> ele percorre os elementos do
vetor @INC que contém nomes de diretórios. Em cada diretório ele verifica se
existe um subdiretório chamado "My" e se dentro deste subdiretório existe um
arquivo chamado "Module.pm".

O primeiro arquivo encontrado pelo Perl será carregado na memória.

Se ele não encontrar o arquivo, você recebe as mensagens de erro acima.

<hl>@INC</hl> é definida quando o Perl é compilado e ela é embutida no código
binário. Você não pode mudar isso a não ser que você recompile o Perl. Não é
algo que faríamos diariamente.

Por sorte o vetor <hl>@INC</hl> pode ser modificado de diversas maneiras ao
executarmos um script. Vamos ver essas soluções e discutir quando cada uma
delas é mais apropriada.

<h2>PERLLIB e PERL5LIB</h2>

Você pode definir a variável de ambiente PERL5LIB (ainda que PERLLIB funcione
do mesmo modo, eu recomendaria usar PERL5LIB ao invés da PERLLIB por ela
deixar claro que é com relação ao Perl 5) da mesma forma que você define a
variável de ambiente PATH. Todo diretório listado nessa variável será
adicionado ao início da <hl>@INC</hl>.

No <b>Linux/Unix</b> ao usar o <b>Bash</b>, você pode escrever

<code>
export PERL5LIB=/home/foobar/code
</code>

Você pode adicionar este comando no arquivo ~/.bashrc para disponibiliza-la
sempre que fizer login.

No <b>Windows</b> você pode fazer o mesmo na janela do programa cmd digitando

<code>
set PERL5LIB = c:\path\to\dir
</code>

Para uma solução mais perene siga estes passos:

Clique com o botão direito em <b>Meu Computador</b> e clique em
<b>Propriedades</b>.

Na janela <b>Propriedades do Sistema</b>, clique na aba <b>Avançado</b>.

Na seção Avançada, clique no botão <b>Variáveis de Ambiente</b>.

Na janela Variáveis de Ambiente, na seção "Variáveis do usuário para Foo Bar"
clique em <b>Nova</b> e digite o seguinte:

Nome da Variável: PERL5LIB

Valor da Variávle: c:\path\to\dir

Então clique OK 3 vezes. As janelas que você abrir <b>depois</b> disso vão
conhecer esta variável. Digite isso na janela de comando, para ver o valor
recentemente definido:

<code>
echo %PERL5LIB%
</code>

<hr>

Isso irá adicionar o diretório privado /home/foobar/code (ou c:\path\to\dir)
para o início da <b>@INC</b> para <b>todo script</b> que for executado no
mesmo ambiente.

No <b>modo sujo</b>, que será explicado em um artigo separado, as variáveis de
ambiente PERLLIB e PERL5LIB são ignoradas.

<h2>use lib</h2>

Adicionar uma instrução <hl>use lib;</hl> ao script vai adicionar o diretório
à <hl>@INC</hl> para aquele script específico.
Independentemente de quem e em qual ambiente for executado.

Você precisa apenas se certificar que a instrução use lib foi utilizada antes
de tentar carregar o módulo:

<code lang="perl">
use lib '/home/foobar/code';
use My::Module;
</code>

Uma nota aqui. Vi muitas empresas onde instruções <hl>use lib</hl> foram
adicionadas a módulos para que os mesmos carreguem suas dependências. Não
considero isso uma boa prática.
Acho que o lugar certo de modificar <hl>@INC</hl> é o script principal ou até
melhor, fora do script como nas duas outras soluções.

<h2>-I na linha de comando</h2>

(Isto é um i maiúsculo)

A última solução é a mais temporária.
Adicionar um parâmetro <hl>-I /home/foobar/code</hl> ao Perl ao executar o
script.

<b>perl -I /home/foobar/code  script.pl</b>

Isso vai adicionar /home/foobar/code ao início da @INC <b>para esta execução
específica</b> do script.

<h2>Então qual delas usar?</h2>

Se você deseja somente testar a nova versão de um módulo, eu recomendaria o
parâmetro da linha de comando:
<hl>perl -I /path/to/lib</hl>.

Se você está instalando um conjunto de módulos em um diretório privado então
eu provavelmente usaria <hl>PERL5LIB</hl> embora também veremos que o
<hl>local::lib</hl> faz isso por você.

<hl>use lib</hl> é usado em dois casos:

<ol>
<li>Quando você tem um local fixo, porém num ambiente não padronizado na
empresa, onde se põe os módulos em um local padronizado comum.</li>
<li>Quando você está desenvolvendo uma aplicação e você gostaria de ter
certeza que o script sempre carrega os módulos de seus caminhos relativos.
Vamos discutir isto em outro artigo.</li>
</ol>

