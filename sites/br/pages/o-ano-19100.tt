=title O Ano 19100
=timestamp 2013-05-20T22:37:35
=indexes time, localtime, gmtime, Time::HiRes, DateTime
=status show
=original the year 19100
=books beginner_book
=author szabgab
=translator leprevost
=index 1
=archive 1
=feed 1
=comments 1
=social 1

=abstract start

Esta parte do <a href="/perl-tutorial">Tutorial Perl</a> explicará o uso do <b>tempo no perl</b>.

O Perl possui uma função interna chamada <hl>time()</hl> que irá retornar um número de 10 dígitos
representando o número de segundos passados desde a "época" demarcada pela
data 1 de Janeiro de 1970 na maioria dos sistemas operacionais.

=abstract end

<code lang="perl">
$t = time();         # retorna um número parecido com este: 1021924103
</code>

Você pode usar essa função como uma etiqueta de tempo por exemplo, para verificar tempos percorridos.
Você pode salvar os segundos no seu código por invocar <hl>time()</hl> e então ao chamar <hl>time()</hl> novamente.
E então, comparando os resultados obtidos nas duas chamadas:

<code lang="perl">
my $t = time();
# várias linhas de código
say 'Tempo percorrido: ', (time() - $t);
</code>

<h2>localtime</h2>

Há uma outra função chamada <hl>localtime()</hl> que pega aquele número de 10 dígitos,
que representa o tempo, e convertê-lo em algo mais legível:

<code lang="perl">
my $then = localtime($t);  # retorna um texto parecido com este       Thu Feb 30 14:15:53 1998
</code>

Na verdade a função nem precisa de um argumento. Se chamada sem argumentos, ela iŕa invocar a função
<hl>time()</hl> por si só.

<code lang="perl">
my $now = localtime();    # retorna um texto com o tempo local
</code>

Você pode salvar as etiquetas de tempo várias vezes durante a execução de um programa, geradas pela função
<hl>time()</hl>, e depois você pode usar os valores para calcular o tempo percorrido, ou então transformar
os valores de tempo em algo mais legível.

<h2>O outro localtime</h2>

O que acontece se nós chamarmos a mesma função <hl>localtime($t)</hl> como acima mas dessa vez
direcionando o seu retorno a um array? Você esperaria o mesmo texto como descrito acima, na primeira
posição do array?

<code lang="perl">
my @then = localtime($t);
</code>

O array será preenchido com os seguintes valores:

<code>
53 15 14 30 1 98 4 61 0
</code>

O que são esses números estranhos? Você deve estar se perguntando. Se você observar com mais cuidado, irá perceber
que o primeiro valor armazena os segundos, seguido pelos minutos e então pelas horas e alguns outros números
representando o mesmo momento no tempo. A lista completa segue abaixo:

<code lang="perl">
my ($sec ,$min, $hour, $mday, $mon, $year, $wday, $yday, $isdst) = localtime(time);
</code>
<code>
$sec   - segundos (0-59)
$min   - minutos (0-59)
$hour  - horas  (0-23)
$mday  - dia do mês (1-31)
$mon   - mês (0-11) - 0 é Janeiro, 11 é Dezembro.
$year  - ANO - 1900
$wday  - dia da semana (0-6), 0 é Domingo, 6 é Sábado.
$yday  - dia do ano (0-364 ou 0-365 em ano bissexto).
$isdst - horário de verão - Verdadeiro se for horário de verão pela configuração do seu computador. Falso caso não seja.
</code>

Note que no campo representando o <b>mês</b> 0 significa Janeiro e 11 significa Dezembro.
Nos campos representando o <b>dia da semana</b> 0 significa Domingo e 6 significa Sábado.

Por outro lado o campo representando o <b>dia do mês</b> vai de 1 até 28, 29 ou 30 dependendo do mês.

O mais problemático de todos é o campo representando o <b>ano</b>. Pode facilmente levar ao bug <b>Y2K</b>

<h2>O bug do milênio</h2>

Em meados de 1998 as pessoas utilizavam o <hl>$year</hl> como sendo 98 e queria imprimir 1998, então
escreviam <hl>19$year</hl>. Isso funcionava bem ara eles, até mesmo em 1999, mas quando o ano 2000 veio,
e <hl>19$year</hl> se tornou 2000-1900 = 100, o seu texto bem formatado se tornou <b>19100</b>.

Foi essa a origem do ano 19100. Foi exatamente assim que as pessoas criaram código com o tal
<b>bug do milênio</b>

Se elas tivessem lido a documentação, elas teriam escrito:

<code>
1900 + $year
</code>

que é a forma correta de se ter o número real de nossa data segundo o
<a href="http://pt.wikipedia.org/wiki/Calend%C3%A1rio_gregoriano">Calendário Gregoriano</a>.
O formato de calendário mais comum e utilizado ao redor do mundo.

<h2>gmtime</h2>

O Perl possui ainda uma função chamada <hl>gmtime()</hl> que faz as mesmas coisas que <hl>localtime()</hl>,
mas fornece o tempo em <a href="http://pt.wikipedia.org/wiki/Greenwich_%28Londres%29">Greenwich</a>,
Londres. (O $isdst é sempre 0 neste caso).

<h2>Como o tempo realmente funciona?</h2>

Normalmente o relógio de hardware de seu computador deve estar configurado para GMT
(<a href="http://pt.wikipedia.org/wiki/Greenwich_Mean_Time">Greenwich Mean Time</a>)
(ou então <a href="http://pt.wikipedia.org/wiki/Tempo_Universal_Coordenado">UTC</a> which is more or less the same).

Seu sistema operacional (Windows, Linux, Mac OSX, Unix, etc) deve ter noção sobre o fuso horário configurada por você,
e se o horário de verão está sendo aplicado. <hl>localtime()</hl> leva em consideração
esses valores enquanto <hl>gmtime()</hl> apenas usa os valores "brutos" do relógio do hardware.

<h2>Tempo de alta precisão</h2>

A função interna <hl>time()</hl> retorna o tempo atual em segundos. Isso signiica que não é capaz de medir
períodos mais curtos de tempo do que um segundo. Se você precisar de medidas de alta precisão, existe um
módulo chamado <a href="https://metacpan.org/module/Time::HiRes">Time::HiRes</a> que pode prover um substituto
para a função <hl>time()</hl>.

<code lang="perl">
use strict;
use warnings;
use 5.010;

use Time::HiRes qw(time);

say time;
</code>

E o resultado é:

<code>
1021924103.58673
</code>

<h2>DateTime</h2>

Enquanto que as funções acima podem lhe fornecer formas básicas de manipulação de datas e do tempo, provavelmente
qualquer coisa além do mais simples pode ser realizado através do módulo do CPAN 
<a href="https://metacpan.org/module/DateTime">DateTime</a>.

Nós iremos aprender sobre ele mais tarde.

<h2>Noção do contexto</h2>

Todas as considerações acima são importantes, mas há ainda um aspecto muito importante dessa aula.
Nós sutilmente passamos sobre essa questão importante do Perl, onde a função <hl>localtime()</hl>
é apenas um exemplo.

Se você observar no exemplo acima, você irá perceber que a função <hl>localtime()</hl> de alguma forma sabe se o valor de retorno
será atribuído a uma escalar ou um array, para que então o valor de retorno possa ser legível ou então representado na forma
de um número de 9 dígitos.

Essa é uma característica geral do Perl 5. Uma característica muito importante e nós iremos aprender muito mais sobre ela.
A mensagem importante a ser passada aqui é entender que em muitas situações, o Perl é <b>sensível ao contexto</b>. 
