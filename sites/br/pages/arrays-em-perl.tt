=title Arrays em Perl
=timestamp 2013-05-07T23:08:12
=indexes @, array, arrays, length, size, foreach, Data::Dumper, scalar, push, pop, shift
=status show
=original perl arrays
=books beginner_book
=author szabgab
=translator leprevost
=index 1
=archive 1
=feed 1
=comments 1
=social 1

=abstract start

Neste espisódio do <a href="/perl-tutorial">Tutorial Perl</a> nós iremos aprender sobre <b>arrays em Perl</b>.
Esse artigo será um resumo sobre o funcionamento de <i>arrays</i> em Perl. Iremos ver mais adiante
maiores detalhes sobre o seu funcionamento.

Em Perl, nomes de variáveis do tipo array iniciam com o símbolo <hl>@</hl>.

Por conta da nossa insistência no uso do pragma <hl>strict</hl> você precisa declarar essas variáveis utilizando
a palavra-chave <hl>my</hl> antes do nome da variável.

=abstract end

Lembre-se, todo os exemplos abaixo iniciam da seguinte forma:

<code lang="perl">
use strict;
use warnings;
use 5.010;
</code>

Declare um array:

<code lang="perl">
my @names;
</code>

Declare e atribua valores:

<code lang="perl">
my @names = ("Foo", "Bar", "Baz");
</code>


<h2>Depurando arrays</h2>

<code lang="perl">
use Data::Dumper qw(Dumper);

my @names = ("Foo", "Bar", "Baz");
say Dumper \@names;
</code>

O resultado é:

<code>
$VAR1 = [
        'Foo',
        'Bar',
        'Baz'
      ];
</code>

<h2>Laço foreeach e arrays em perl</h2>

<code lang="perl">
my @names = ("Foo", "Bar", "Baz");
foreach my $n (@names) {
  say $n;
}
</code>

Irá imprimir:

<code>
Foo
Bar
Baz
</code>

<h2>Acessando um elemento de um array</h2>

<code lang="perl">
my @names = ("Foo", "Bar", "Baz");
say $names[0];
</code>

NOte que quando acessando um único elemento do array, o símbolo colocado na frente do nome da variável muda 
de <hl>@</hl> para <hl>$</hl>. Isso pode causar um pouco de confusão em algumas pessoas, mas de você parar
para pensar, é algo um tanto quanto óbvio.

O sínbolo <hl>@</hl> significa algo no plural e o <hl>$</hl\> algo no singular. Quando acessando um único
elemento de um array, a variável se comporta como uma variável escalar.

<h2>Índices de um array</h2>

O índice de um array inicia em 0. O maior índice é sempre armazenado em uma variável chamada
<hl>$#nome_do_array</hl>, ou seja:

<code lang="perl">
my @names = ("Foo", "Bar", "Baz");
say $#names;
</code>

Irá imrimir 2 porque os índices são 0,1 e 2.

<h2>Comprimento ou tamanho de um array</h2>

Em Perl não há uma função especial para recuperar o tamanho de um array, mas há 
várias formas de se obter esse valor. Um delas por exmeplo, é somar 1 ao 
maior índice do array. No caso acima <hl>$#names + 1</hl> é o <b>tamanho</b>
ou <b>comprimento</b> do array.

Além disso a função <hl>scalar</hl> pode ser utilizada para obter o tamanho de um array:

<code lang="perl">
my @names = ("Foo", "Bar", "Baz");
say scalar @names;
</code>

Irá imprimir 3.

A função <hl>scalar</hl> é um tipo de invocação onde - entre outras coisas - realiza a 
conversão entre arrays e scalars. Por conta de uma decisão arbitrária, porém inteligente, esssa
conversão resulta no tamanho do array.

<h2>Iterando os índices de um array</h2>

Em determinados casos a iteração sobre os valores do array não é o suficiente.
Nós poderemos precisar de ambas informações, os valores e os índices.
Neste caso nós precisamos iterar sobre os índices e obter os valores utilizando
os índices:

<code lang="perl">
my @names = ("Foo", "Bar", "Baz");
foreach my $i (0 .. $#names) {
  say "$i - $names[$i]";
}
</code>

imprime:

<code>
0 - Foo
1 - Bar
2 - Baz
</code>

<h2>Função push em arrays</h2>

<hl>push</hl> adiciona um novo valor ao final do array, aumentando o seu tamanho:

<code lang="perl">
my @names = ("Foo", "Bar", "Baz");
push @names, 'Moo';

say Dumper \@names;
</code>

Resulta em:

<code>
$VAR1 = [
        'Foo',
        'Bar',
        'Baz',
        'Moo'
      ];
</code>


<h2>Função pop em array</h2>

<hl>pop</hl> remove o último elemento de um array:

<code lang="perl">
my @names = ("Foo", "Bar", "Baz");
my $last_value = pop @names;
say "Last: $last_value";
say Dumper \@names;
</code>

Resultando em:

<code>
Last: Baz
$VAR1 = [
        'Foo',
        'Bar',
      ];
</code>

<h2>Função shift em array</h2>

<hl>shift</hl> irá retornar o último elemento à esquerda do array
e irá mover todos os demais elementos uma casa à esquerda.

<code lang="perl">
my @names = ("Foo", "Bar", "Baz");

my $first_value = shift @names;
say "First: $first_value";
say Dumper \@names;
</code>

O resultado é:

<code>
First: Foo
$VAR1 = [
        'Bar',
        'Baz',
      ];
</code>

