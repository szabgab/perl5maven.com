=title trim - removendo espaços em branco à esquerda e à direita com Perl
=timestamp 2013-05-31T00:10:01
=indexes trim, ltrim, rtrim
=status show
=original trim
=books beginner_book
=author szabgab
=translator aramisf
=index 1
=archive 1
=feed 1
=comments 1
=social 1

=abstract start

Em algumas outras linguagens existem funções chamadas <b>ltrim</b> e
<b>rtrim</b> para remover espaços e tabulações do início e do final de uma
string, respectivamente. Ás vezes elas tem a função chamada <b>trim</b> para
remover espaços em branco de ambos os lados de uma string.

Não existem tais funções em Perl (embora eu esteja convecido de que existem
diversos módulo do CPAN que implementam essas funções) pois uma simples
substituição por expressão regular pode resolver isso.

Na verdade é tão simples que isto é um dos grandes assuntos da <a
href="https://en.wikipedia.org/wiki/Parkinson%27s_law_of_triviality">Lei da
Trivialidade de Parkinson</a> (em inglês. O conceito consiste basicamente em 
superestimar ou aumentar demasiadamente a complexidade de tarefas simples).


=abstract end

<h2>trim à esquerda</h2>

<b>ltrim</b>  ou <b>lstrip</b> remove espaços em branco do lado esquerdo de uma string:

<code lang="perl">
$str =~ s/^\s+//;
</code>

Do início da stringo <hl>^</hl> pegue 1 ou mais espaços em branco
(<hl>\s+</hl>), e troque-os por uma string vazia.

<h2>trim à direita</h2>

<b>rtrim</b> ou <b>rstrip</b> remove espacos em branco da direita de uma string:

<code lang="perl">
$str =~ s/\s+$//;
</code>

Pegue 1 ou mais espaços (<hl>\s+</hl>) até o final da string (<hl>$</hl>), e
troque-os por uma string vazia.

<h2>trim em ambos os lados</h2>

<b>trim</b> remove o espaço em branco de ambos os lados de uma string:

<code lang="perl">
$str =~ s/^\s+|\s+$//g
</code>

As duas expressões regulares acima foram unidas com uma marca de alternação
<hl>|</hl> em nós adicionamos um <hl>/g</hl> ao final para efetuar a
substituição <b>globalmente</b> (repetidas vezes).

<h2>Escondendo em funções</h2>

Se você não quer ver estes contructos no seu código, você pode adicionar a ele essas
funções:

<code lang="perl">
sub ltrim { my $s = shift; $s =~ s/^\s+//;       return $s };
sub rtrim { my $s = shift; $s =~ s/\s+$//;       return $s };
sub  trim { my $s = shift; $s =~ s/^\s+|\s+$//g; return $s };
</code>

e usá-las assim:

<code lang="perl">
my $z = " abc ";
printf "<%s>\n", trim($z);   # <abc>
printf "<%s>\n", ltrim($z);  # <abc >
printf "<%s>\n", rtrim($z);  # < abc>
</code>


<h2>String::Util</h2>

Se você realmente não quer copiar aquilo, você pode sempre instalar um módulo.

Por exemplo <a
href="https://metacpan.org/module/String::Util">String::Util</a> provê uma
função chamada <hl>trim</hl> que você pode usar dessa forma:

<code lang="perl">
use String::Util qw(trim);

my $z = " abc ";
printf "<%s>\n", trim( $z );              # <abc>
printf "<%s>\n", trim( $z, right => 0 );  # <abc >
printf "<%s>\n", trim( $z, left  => 0 );   # < abc>
</code>

Por padrão ela apara ambos os lados e você tem que desligar a aparagem. Penso
eu que ter o seu próprio <hl>ltrim</hl> e <hl>rtrim</hl> será mais claro.

<h2>Text::Trim</h2>

Outro módulo, um que provê todas as 3 funções é o <a
href="https://metacpan.org/module/Text::Trim">Text::Trim</a>, mas ele leva o
estilo Perl de escrever um passo adiante, e talvez para lugares ligeiramente
perigosos.

Se você chama-lo e usar o valor de retorno em uma instrução print ou atribuir
tal valor a uma variável, ele vai retornar uma versão aparada da string e vai
manter o original intacto.

<code lang="perl">
use Text::Trim qw(trim);

my $z = " abc ";
printf "<%s>\n", trim($z);  # <abc>
printf "<%s>\n", $z;       # < abc >
</code>

Por outro lado, se você chama-lo em um contexto VAZIO, ou seja, quando você
não utiliza o valor de retorno, a função trim muda seu parâmetro, de um jeito
parecido com o comportamento do <a href="/perldoc/chomp">chomp</a>.

<code lang="perl">
use Text::Trim qw(trim);

my $z = " abc ";
trim $z;
printf "<%s>\n", $z;       # <abc>
</code>

