=title Não Abra Arquivos na Forma Antiga
=timestamp 2013-03-21T00:45:17
=indexes open
=status show
=original open-files-in-the-old-way
=books beginner_book
=author szabgab
=translator leprevost
=index 1
=archive 1
=feed 1
=comments 1
=social 1

=abstract start

Previamente no <a href="/perl-tutorial">Tutorial Perl</a>
nós vimos como abrir arquivos para leitura e escrita.
Infelizmente, quando você busca pela web, ou entçao olha códigos antigos
você irá se deparar com uma sintaxe um tanto diferente.

Vamos ver o que é, qual é o problema e como evitá-la?.

=abstract end

<h2>Então, o que devo fazer?</h2>

Antes de explicar o que você não deve fazer, deixe-me fornecer a você <i>links</i> para artigos explicando
o que você deve fazer:

Leia <a href="/open-and-read-from-files">como abrir arquivos para leitura no estilo moderno</a>
ou o artigo sobre <a href="/writing-to-files-with-perl">escrever em arquivos utilziando o Perl</a>.

Agora vamos retornar ao antigo, e não tão bom assim, modo de programar.

<h2>A forma antiga e não recomendada</h2>

Até o lançamento do perl 5.6 - isto é, meados de 2000 - nos costumávamos escrever código como este
para abrir um arquivo para escrita:

<code lang="perl">
open OUT, ">$filename" or die ...;
</code>

e código como este para leitura:

<code lang="perl">
open IN, $filename or die ...;
</code>

A parte "or die" é a mesma que utilizamos hoje em dia.

Como você pode ver a função <hl>open</hl> recebe dois parâmetros. O primeiro é um conjunto de letras, 
geralmente em caixa alta. Esta é a estrutura que receberá o <i>filehandle</i>. O segundo parâmetro
é um combinado do modo de abertura com o caminho do arquivo que deve ser aberto.

Ou seja, no primeiro caso você vê o sinal 'maior do que' significando que nós estamos abrindo o arquivo
para escrita, mas no segundo exemplo nós omitimos o modo de abertura. Isso funciona porquê a função
<hl>open()</hl> funciona em modo de leitura por padrão.

Existem duas grandes diferenças:

<h2>Filehandle glob</h2>

A primeira diferença está no uso da estranha variável sem o sinal de <hl>$</hl> na frente
para receber o <i>filehandle</i>.
(Isto na verdade é uma <b>palavra solta (bareword)</b>, mas uma que não dispara o erro
<a href="/barewords-in-perl">Bareword not allowed while "strict subs" in use</a>).

Funciona da mesma forma que antigamente nos primórdios do Perl, mas há vários problemas:

É global a todo o seu script, então se alguma outra pessoa utilizar o mesmo nome (IN, ENTRADA, OUT, SAIDA, por exemplo)
irá ocorrer colisão com as suas variáveis.

É também um tanto difícil passar essas variáveis às suas funções.

<h2>Abertura com 2 parâmetros</h2>

A segunda diferença é o fato de que nesses exemplos a função <hl>open</hl> apenas possui dois parâmetros.

E se a variável <hl>$filename</hl>, que você está usando para abrir o arquivo para leitura, contém >/etc/passwd ?

Ops.

O <hl>open IN, $filename</hl> irá na verdade abrir o arquivo para escrita.

Você acaba de deletar o arquivo de senhas do seu sistema Linux.

Nada Bom.

<h2>É necessário fechar o filehandle</h2>

Outra vantagem de usar <b>variáveis definidas dentro de um escopo</b> como <i>filehandles</i>
é que elas irão fechar automaticamente quando saírem de escopo.

<h2>Como evitar estes problemas?</h2>

A melhor saída é evitar ambas práticas utilizando o comando "new", (disponível desde 2000 !)
<a href="/open-and-read-from-files">utilizando a função open com 3 parâmetros através de variável escalar
definida dentro de um escopo</a> para armazenar o <i>filehandle</i>.

Existem ainda políticas no <a href="http://www.perlcritic.com/">Perl::Critic</a>
que irão ajudá-lo a analizar o seu código e localizar todos os locais onde foram utilizadas
as formas descritas acima.

<h2>O Bom e o Ruim para leitura</h2>

Ruim:

<code lang="perl">
open IN, $filename or die ...;
</code>

Bom:

<code lang="perl">
open my $in, '<', $filename or die ...;
</code>

<h2>O Bom e o Ruim para escrita</h2>

Ruim:

<code lang="perl">
open IN, ">$filename" or die ...;
</code>

Bom:

<code lang="perl">
open my $in, '>', $filename or die ...;
</code>
