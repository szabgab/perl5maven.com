=title Perl 배열과 해시에 대한 undef 호출
=timestamp 2013-05-26T00:30:00
=indexes undef, delete, defined
=status show
=original undef-on-perl-arrays-and-hashes
=books beginner_book
=author szabgab
=translator gypark
=index 1
=archive 1
=feed 1
=comments 1
=social 1

=abstract start

스칼라 변수에 대해 <hl>undef</hl>을 사용할 때는, 두 가지 방식으로 작성할 수 있고, 동일한 효과가 있습니다.

배열이나 해시에 대해 사용할 때는, 두 가지 방식의 결과가 다릅니다. 혼란스러운 부분을 명확히 해봅시다.

=abstract end

<h2>스칼라 변수에 대한 undef</h2>

다음 두 코드를 살펴봅시다:

첫번째는 <hl>$x = undef;</hl>입니다:

<code lang="perl">
use strict;
use warnings;

my $x = 42;
$x = undef;

print defined $x ? 'DEFINED' : 'NOT';
</code>

두번째는 <hl>undef $x;</hl>입니다:

<code lang="perl">
use strict;
use warnings;

my $x = 42;
undef $x;

print defined $x ? 'DEFINED' : 'NOT';
</code>

두 경우 다 "NOT"이 출력됩니다. <hl>$x = undef</hl>과 <hl>undef $x</hl>는 정확히 동일합니다.
이 둘은 또한 <hl>$x = undef()</hl>과 <hl>undef($x)</hl>와도 동일하므로, 괄호를 선호한다면
이렇게 쓸 수도 있습니다.

<h2>배열 원소에 대한 undef</h2>

<hl>$names[1] = undef;</hl>이 들어있는 다음 코드를 실행해봅시다:

<code lang="perl">
use strict;
use warnings;

use Data::Dumper qw(Dumper);

my @names = qw(Foo Bar Baz);
$names[1] = undef;

print Dumper \@names;
</code>

다음과 같이 출력될 것입니다:

<code>
$VAR1 = [
          'Foo',
          undef,
          'Baz'
        ];
</code>

<hl>$names[2] = undef;</hl>을 <hl>undef $names[2];</hl>로 바꿔도 동일한 결과가 나옵니다.
이 두 가지는 동일하기 때문입니다.

<h2>배열에 대한 delete</h2>

<hl>delete $names[2];</hl> 형태의 코드는 폐지 예정이고 Perl 향후 버전에서는 제거될 수 있습니다.
배열의 세번째 요소(2번 인덱스)를 지우려면 <hl>splice(@names, 2, 1)</hl>를 사용하기 바랍니다.
<a href="http://perlmaven.com/splice-to-slice-and-dice-arrays-in-perl">splice</a>에 관해 더 알아보세요.

<h2>배열에 대한 undef</h2>

이제 <hl>undef @names;</hl>를 호출하는 다음 코드를 써 봅시다.

<code lang="perl">
use strict;
use warnings;

use Data::Dumper qw(Dumper);

my @names = qw(Foo Bar Baz);
undef @names;

print Dumper \@names;
</code>

<code>
$VAR1 = [];
</code>

배열이 비워졌습니다.

<hl>undef @names;</hl> 대신에 <hl>@names = ();</hl>로 쓸 수도 있고, 결과는 동일하게 빈 배열을 얻게 됩니다.

반면에, <hl>@names = undef;</hl>처럼 쓰면 undef 원소 하나가 있는 배열이 남게 됩니다.

<code>
$VAR1 = [
          undef
        ];
</code>

이것은 <b>여러분이 원한 결과가 아닙니다</b>!


<h2>해시 원소에 대한 undef</h2>

다음 스크립트는 <hl>$h{Foo} = undef;</hl>를 사용하여 어떤 해시 키에 대응되는 값을 <hl>undef</hl>으로 설정합니다.

<code lang="perl">
use strict;
use warnings;

use Data::Dumper qw(Dumper);

my %h = (Foo => 123, Bar => 456);
$h{Foo} = undef;

print Dumper \%h;
</code>

이 코드는 %h 해시의 키 Foo에 대응되는 값을 <hl>undef</hl>으로 설정합니다:

<code>
$VAR1 = {
          'Bar' => 456,
          'Foo' => undef
        };
</code>


<hl>undef $h{Foo};</hl> 역시 정확히 같은 일을 합니다.

<h2>해시 원소에 대한 delete</h2>

<hl>undef</hl>을 호출하는 대신에 <hl>delete $h{Foo};</hl>로 쓰면 해시에서 키와 값 둘 다를 제거합니다:

<code>
$VAR1 = {
          'Bar' => 456
        };
</code>

<hl>delete</hl>를 반대편에 쓰는 것은 전혀 의미가 없습니다: <hl>$h{Foo} = delete;</hl>는 문법 오류입니다.

<h2>전체 해시에 대한 undef</h2>

다음 코드에 있는 <hl>undef %h;</hl>를 봅시다:

<code lang="perl">
use strict;
use warnings;

use Data::Dumper qw(Dumper);

my %h = (Foo => 123, Bar => 456);
undef %h;

print Dumper \%h;
</code>

<code>
$VAR1 = {};
</code>

<hl>undef %hl</hl> 대신에 <hl>%h = ()</hl> 라고 쓰는 것 역시 위와 같이 해시를 빈 해시로 만듭니다.

반면에 <hl>%h = undef;</hl>는 옳지 않습니다. 이것은 다음과 같은 출력을 낼 것입니다:

<code>
Odd number of elements in hash assignment at files/eg.pl line 7.
Use of uninitialized value in list assignment at files/eg.pl line 7.
$VAR1 = {
          '' => undef
        };
</code>

다소 이상하게 보입니다. 무슨 일이 벌어졌냐 하면, 우리가 타이핑한 <hl>undef</hl>은 빈 문자열로 변환되었고, 이 때문에
<a href="/use-of-uninitialized-value">Use of uninitialized value in list assignment at ...</a> 경고가
발생합니다. 이 빈 문자열이 해시 안에서 키가 됩니다.

그 다음으로 보면, 이 키에 대응되는 값이 없습니다. 이 때문에 <b>Odd number of elements in hash assignment</b> 경고가
뜹니다. 그리고 <hl>undef</hl>이 이 빈 문자열 키에 대응되는 값으로 할당됩니다.

어쨌거나, 이것은 <b>여러분이 원한 결과가 아닙니다</b>!

결론적으로, 단도직입으로 묻는다면 다음과 같이 답할 수 있습니다:

<h2>Perl에서 배열과 해시를 리셋하려면?</h2>

<code lang="perl">
@a = ();
%h = ();
</code>


<h2>해시 전체를 리셋하거나 키/값 쌍을 리셋하려면?</h2>

전체 해시 리셋:

<code lang="perl">
%h = ();
</code>

키/값 쌍 제거:

<code lang="perl">
delete $h{Foo};
</code>

어떤 키/값 쌍의 값만 제거:

<code lang="perl">
$h{Foo} = undef;
</code>

