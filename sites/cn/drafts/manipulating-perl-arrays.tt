=title Manipulating Perl arrays: shift, unshift, push, pop
=timestamp 2013-02-06T14:45:56
=indexes array, shift, unshift, push, pop
=status show
=books beginner_book
=author szabgab
=translator terrencehan
=index 1
=archive 1
=feed 1
=comments 1
=social 1

=abstract start

就像允许直接方位单独的数组元素一样，Perl也提供了很多其它有趣的方式来操作数组.
特别是，有些函数可以很方便有效的将Perl的数组作为栈或者队列来使用.

=abstract end

<h2>pop</h2>

<hl>pop</hl>函数会删除并返回数组的最后一个元素.

在第一个例子(3个元素的数组）中你可以看到, the <hl>pop</hl>函数删除最后一个元素（下标最大）并返回它.

<code lang="perl">
my @names = ('Foo', 'Bar', 'Baz');
my $last_one = pop @names;

print "$last_one\n";  # Baz
print "@names\n";     # Foo Bar
</code>


在原数组为空的特例中<hl>pop</hl>函数会返回<a href="/undef-and-defined-in-perl">undef</a>.

<h2>push</h2>

<hl>push</hl> 函数可以在数组的后面添加一个或多个值.
(当然，也可以添加0个值，但是没有用，不是么？)

<code lang="perl">
my @names = ('Foo', 'Bar');
push @names, 'Moo';
print "@names\n";     # Foo Bar Moo

my @others = ('Darth', 'Vader');
push @names, @others;
print "@names\n";     # Foo Bar Moo Darth Vader
</code>

在这个例子中我们最初有个两元素数组.
之后我们向数组尾部push了一个标量, 我们的数组扩展成了3元素数组.

在第二次调用<hl>push</hl>中, 我们push了<hl>@others</hl>数组的内容到<hl>@names</hl>尾部, 把它扩充成5元素数组.

<h2>shift</h2>

<hl>shift</hl>函数会让整个数组左移.
设想一下，数组从左边开始.
数组的第一个元素会从数组“掉下来”，并成为函数的返回值.
(如果数组为空, <b>shift</b> 会返回 <a href="/undef-and-defined-in-perl">undef</a>.) 

这样操作之后，数组会少一个元素.

<code lang="perl">
my @names = ('Foo', 'Bar', 'Moo');
my $first = shift @names;
print "$first\n";     # Foo
print "@names\n";     # Bar Moo
</code>

这和<hl>pop</hl>很像, 但是它作用于数组索引的小端.

<h2>unshift</h2>

这是<hl>shift</hl>的反函数. <hl>unshift</hl> 会获取一个或多个值(或者0个) 并把它放在数组的开头，将其他元素右移动.

你可以向它传一个单个的标量, 那么这个值会成为数组的第一个元素. 
或者像第二个例子那样, 你可以传递第二个数组，那么第二个数组的所有元素(我们例中的<hl>@others</hl>)会复制到主数组的开头(例中<hl>@names</hl>), 并将其他元素向高索引方向移动.

<code lang="perl">
my @names = ('Foo', 'Bar');
unshift @names, 'Moo';
print "@names\n";     # Moo Foo Bar 

my @others = ('Darth', 'Vader');
unshift @names, @others;
print "@names\n";     # Darth Vader Moo Foo Bar
</code>

