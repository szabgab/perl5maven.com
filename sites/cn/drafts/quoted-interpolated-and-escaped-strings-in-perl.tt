=title Strings in Perl: quoted, interpolated and escaped
=timestamp 2013-05-15T11:45:03
=indexes strings, ', ", \, escape character, interpolation, quote, embedded characters, q, qq
=status show
=original quoted-interpolated-and-escaped-strings-in-perl
=books beginner_book
=author szabgab
=translator terrencehan
=index 1
=archive 1
=feed 1
=comments 1
=social 1

=abstract start

Understanding how strings work is important in every programming language, but in Perl they are
part of the essence of the language. Especially if you consider that one of the backronimes of Perl
is <b>Practical Extraction and Reporting Language</b> and for that you need to use lots of strings.
理解字符串是如何工作的在任何编程语言中都很重要，尤其在Perl中它们是语言的精髓。

=abstract end

Strings can be placed either between single quotes <hl>'</hl> or double quotes <hl>"</hl> and they have slightly different behavior.
字符串可以放在单引号<hl>'<hl>或者双引号<hl>"</hl>之间，而这两种形式的行为是不同的。

<h2>单引号</h2>

If you put characters between single quotes <hl>'</hl>, then almost all the characters,
except the single-quote itself <hl>'</hl>,
are interpreted as they are written in the code.
如果把字符放在单引号<hl>'</hl>之间，除了单引号本身<hl>'</hl>之外的绝大多数字符会解释成和写在代码中一样的形式。

<code lang="perl">
my $name = 'Foo';
print 'Hello $name, how are you?\n';
v</code>

输出：

<code>
Hello $name, how are you?\n
</code>

<h2>双引号</h2>

Strings placed between double quotes <hl>"</hl> provide interpolation
(other variables embedded in the string will be replaced by their content),
and they also replace the special escape sequences such as <hl>\n</hl> by a real newline
and <hl>\t</hl> by a real tab.
放在双引号之间的字符串支持内插（内嵌在字符串中的变量会被替换成其内容），而且也会替换转义字符，例如用换行符替换<hl>\n</hl>，用tab替换<hl>\t</hl>。

<code lang="perl">
my $name = 'Foo';
my $time  = "today";
print "Hello $name,\nhow are you $time?\n";
</code>

输出：

<code>
Hello Foo,
how are you today?

</code>

Note, there is a <hl>\n</hl> right after the comma in the string and another one at the end of the sting.
注意，有个<hl>\n</hl>跟在逗号后面而另一个则是在字符串结尾。

For simple strings such as 'Foo' and "today" that have no <hl>$</hl>, <hl>@</hl>, and <hl>\</hl> characters
in them, it does not matter how they are quoted.
对于像'Foo'和"today"这样没有<hl>$</hl>，<hl>@</hl>，及<hl>\</hl>的简单字符串，无所谓是用什么引起的。

The next two lines have the exact same result:
下面的两行是一个结果：

<code lang="perl">
$name = 'Foo';
$name = "Foo";
</code>


<h2>email地址</h2>

As <hl>@</hl> also interpolates in double quoted strings, writing e-mail addresses
needs a little more attention.
因为在双引号引起的字符串中<hl>@</hl>也是内插的，在写email地址的时候需要格外注意。

In single quotes <hl>@</hl> does not interpolate.
在单引号中的<hl>@</hl>不会内插。

In double quotes this code will generate an error:
<a href="/global-symbol-requires-explicit-package-name">Global symbol "@bar" requires explicit package name at ... line ...</a>
and a warning:
<b>Possible unintended interpolation of @bar in string at ... line ...</b>
在双引号中则会产生错误
<a href="/global-symbol-requires-explicit-package-name">Global symbol "@bar" requires explicit package name at ... line ...</a>
以及警告
<b>Possible unintended interpolation of @bar in string at ... line ...</b>。

The latter might be the one that provides the better clue what is really the problem.
后者可能会提供了解决实际问题更好的线索。

<code lang="perl">
use strict;
use warnings;
my $broken_email  = "foo@bar.com";
</code>

This code, on the other hand, having the e-mail address in single quotes, will work.
下面代码把email地址放在单引号中就能正常工作。

<code lang="perl">
use strict;
use warnings;
my $good_email  = 'foo@bar.com';
</code>

What if you need both the interpolation of scalar variables but you want to include at marks <hl>@</hl> in the string?
如果既需要内插标量，又要在字符串中使用<hl>@</hl>该怎么办呢？

<code lang="perl">
use strict;
use warnings;
my $name = 'foo';
my $good_email  = "$name\@bar.com";

print $good_email; # foo@bar.com
</code>

You can alway <b>escape</b> the special characters, in this case the at-mark <hl>@</hl> by using the so-called <b>escape character</b>
which is the back-slash <hl>\</hl> character.
你总是可以<b>转义</b>特殊字符，本例中的at符号<hl>@</hl>就是使用反斜线<hl>\</hl>这个<b>转义字符</b>来进行转义的。

<h2>在双引号字符串中内嵌$符号</h2>

In a similar way if you'd like to include a <hl>$</hl> sign in an otherwise double-quoted string you can escape that too:
如果想要在双引号字符串中包含<hl>$</hl>符号也可以使用同样的方法转义：

<code lang="perl">
use strict;
use warnings;
my $name = 'foo';
print "\$name = $name\n";
</code>

输出：

<code>
$name = foo
</code>

<h2>转义转义字符</h2>

There are rare cases when you'd like to include a back-slash character in a string.
If you put a back-slash <hl>\</hl> in a string, (either single-quoted or double quoted),
Perl will think you want to escape the next character and do its magic.
其实只有少部分情况下你需要在字符串中包含反斜线。如果把反斜线<hl>\</hl>放在字符串里（无论是在单引号还是双引号中），Perl都会认为你想转义下一个字符。

Don't worry though. You can tell Perl to stop that by escaping the escape character:
不要担心。你可以转义转义字符来告诉Perl不要这么做：

You just put another back-slash in front of it:
你仅需要在它之前再放一个反斜线：

<code lang="perl">
use strict;
use warnings;
my $name = 'foo';
print "\\$name\n";:w
</code>

<code>
\foo
</code>

I know this escaping the escape character is a bit strange, but this is basically how it works in every other language as well.
我知道这种转义转义字符的方式有些奇怪，但是这就是其他语言的工作方式。


If you'd like to understand this whole escaping business, try something like this:
如果你想了解整个转义的细节，这样做：

<code lang="perl">
print "\\\\n\n\\n\n";
</code>

see what does that print:
看一下输出：

<code>
\\n
\n
</code>

and try to explain it to yourself.
然后自己解释一下。

<h2>转义双引号</h2>

We saw that you can put scalar variables in double-quoted strings but you can also escape the <hl>$</hl> sign.
我们了解了可以把标量放在双引号字符串中，而且可以转义<hl>$</hl>符号。

We saw how you can use the escape character <hl>\</hl> and how you can escape that too.
我们看到了如何使用转义字符<hl>\</hl>，也看到了如何转义它本身。

What if you'd like to print a double quote in a double-quoted string?
如果想要在双引号字符串中打印双引号该怎么办呢？


This code has a syntax error:
下面的代码有个语法错误：

<code lang="perl">
use strict;
use warnings;
my $name = 'foo';
print "The "name" is "$name"\n";
</code>

when Perl sees the double-quote just before the word "name" it thinks that was the end of the string
and then it complains about the word <b>name</b> being a <a href="/barewords-in-perl">bareword</a>.
当Perl看到单词"name"前面的双引号时，它认为字符串结束了，然后指出单词<b>name</b>是一个<a href="/barewords-in-perl">裸字</a>。

You might have already guessed, we need to escape the embedded <hl>"</hl> character:
你可能已经猜到了，我们需要转义内嵌的<hl>"</hl>字符：

<code lang="perl">
use strict;
use warnings;
my $name = 'foo';
print "The \"name\" is \"$name\"\n";
</code>

This will print:
这会输出：

<code>
The "name" is "foo"
</code>

This works, but it is quite hard to read.
以上可以正常工作，但是阅读起来可能会有些困难。


<h2>qq, 双q操作符</h2>

That's where you can use <hl>qq</hl> or the double-q operator:
你可以使用<hl>qq</hl>也称双q操作符来解决问题：

<code lang="perl">
use strict;
use warnings;
my $name = 'foo';
print qq(The "name" is "$name"\n);
</code>

For the untrained eyes, the qq() might look like a function call, but it is not. <hl>qq</hl> is an operator
and you'll see in a second what else it can do, but first let me explain this.
如果之前没有了解过的话，可能会把qq()看成函数调用，其实不是。<hl>qq</hl>是一个操作符，很快你就会知道它还能做什么，不过这里先解释一下上面的代码。

We replace the double-quotes <hl>"</hl> that used to surround the string by the parentheses of the <hl>qq</hl>
operator. This means the double-quotes are not special any more in this string, so we don't need to escape them.
That makes the code a lot more readable.
I'd even call it beautiful, if I did not fear the wrath of the Python programmers.
我们使用<hl>qq</hl>操作符的括号来代替原来字符串外面的双引号<hl>"</hl>。这样双引号在字符串中就不再特殊，进而不需要对它们转义了。这样会增加可读性。如果我不畏惧Python程序员的批评的话，甚至可以说这么写很漂亮。

But what if you would like to include parentheses in you string?
不过，如果要在字符串中包含括号呢？

<code lang="perl">
use strict;
use warnings;
my $name = 'foo';
print qq(The (name) is "$name"\n);
</code>

No problem. As long as they are balanced
(that is, having the same number of opening <hl>(</hl>, and closing <hl>)</hl> parentheses,
and always having the opening parentheses before the corresponding closing parentheses) Perl can
understand it.
没关系的。如果它们是平衡的（也就是会说起始<hl>(</hl>和闭合<hl>)</hl>括号数量相同，且起始括号总是在闭合括号前面）Perl会理解的。

I know. You'll want to break it now, by putting a closing before the opening:
如果你非要破坏这种平衡，把闭合括号放在起始括号前面：

<code lang="perl">
use strict;
use warnings;
my $name = 'foo';
print qq(The )name( is "$name"\n);
</code>

Indeed, perl will give you a syntax error about "name" being a <a href="/barewords-in-perl">bareword</a>.
Perl can't understand everything, can it?
这样Perl会报出"name"是<a href="/barewords-in-perl">裸字</a>的语法错误。Perl也不是万能的，对么？

You could, of course, escape the parentheses in the string<hl>\)</hl> and <hl>\(</hl>, but we were down that rabbit hole already.
No thank you!
当然你也可以在字符串中转义括号<hl>\)</hl> 和 <hl>\(</hl>。TODO

There must be a better way!
肯定还有更好的方法！

Do you remember, I wrote <hl>qq</hl> is an operator and not a function? So it can do tricks, right?
你还记得我说过<hl>qq</hl>是操作符而不是函数么？还有小窍门，对么？

What if we replaced the parentheses around our string by curly braces? <hl>{}</hl>:
如果我们使用花括号<hl>{}</hl>来代替圆括号会怎样样呢？

<code lang="perl">
use strict;
use warnings;
my $name = 'foo';
print qq{The )name( is "$name"\n};
</code>

That works and prints the string as we meant:
这也有效，并且按照我们想要的方式输出字符串：

<code>
The )name( is "foo"
</code>

(even though I have not idea why would I want to print something like that...)
（即使我不知道为什么我想这么打印...）

Then <a href="http://perl.plover.com/yak/presentation/samples/slide027.html">the guy from the second row</a> raises his hand,
and ask what if you want both parentheses and curly braces in your string, <b>and</b> you want them imbalanced?
然后<a href="http://perl.plover.com/yak/presentation/samples/slide027.html">第二行的朋友</a>举手提问：如果你想要在字符串中同时包含圆括号和花括号，<b>并且</b>它们并不配对怎么办？

You mean like this, right?
你说的是这样对么？

<code lang="perl">
use strict;
use warnings;
my $name = 'foo';
print qq[The )name} is "$name"\n];
</code>

printing this:
输出：

<code>
The )name} is "foo"
</code>


... there must be a use for the square brackets too, right?
... 当然也有使用方括号的情况，对么？


<h2>q, 单q操作符</h2>

Similar to <hl>qq</hl> there is also an operator called <hl>q</hl>.
That too allows you select the delimiters of your string, but it works
as a single quote <hl>'</hl> works: It does <b>NOT</b> interpolate variables.
还有一个与<hl>qq</hl>相似的操作符<hl>q</hl>。它也允许你自定义字符串分隔符，不过它的工作方式和单引号<hl>'</hl>相同：<b>不能</b>内插变量。

<code lang="perl">
use strict;
use warnings;
print q[The )name} is "$name"\n];
</code>

prints:
打印：

<code>
The )name} is "$name"\n
</code>


