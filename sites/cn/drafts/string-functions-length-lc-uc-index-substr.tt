=title String functions: length, lc, uc, index, substr
=timestamp 2013-02-20T14:45:56
=indexes length, lc, uc, index, substr, scalar
=status show
=books beginner_book
=author szabgab
=index 1
=archive 1
=feed 1
=comments 1
=social 1

=abstract start

在这部分的<a href="/perl-tutorial">Perl教程</a>中，我们会学习Perl提供的几个操作字符串的函数.

=abstract end

<h2>lc, uc, length</h2>

有很多像<b>lc</b> 和 <b>uc</b>一样的简单函数能分别返回原始字符串的小写和大写形式，
<b>length</b>则返回给定字符串的字符个数.

看以下例子:

<code lang="perl">
use strict;
use warnings;
use 5.010;

my $str = 'HeLlo';

say lc $str;      # hello
say uc $str;      # HELLO
say length $str;  # 5
</code>


<h2>index</h2>

<b>index</b> 函数会接受两个字符串参数，并且返回第二个字符串在第一个字符串中的位置.

<code lang="perl">
use strict;
use warnings;
use 5.010;

my $str = "The black cat jumped from the green tree";

say index $str, 'cat';             # 10
say index $str, 'dog';             # -1
say index $str, "The";             # 0
say index $str, "the";             # 26
</code>

第一次调用<hl>index</hl>返回10, 因为"cat"从第10个字符开始.
第二次调用<hl>index</hl> 返回-1 , 表示句子中没有"dog".

第三次调用<hl>index</hl> 返回0, 这是因为第二个字符串是第一个字符串的前缀.

第四个例子表示<hl>index</hl>对大小写敏感. 因此"the" 和 "The" 是不同的.

<hl>index()</hl> 是搜索字符串而不仅是单词, 所以即便是"e "也能查询:

<code lang="perl">
say index $str, "e ";              # 2
</code>

<hl>index()</hl> 还可以包含第三个参数，用来指示从哪个位置开始搜索.
正如我们能发现的"e "在第一个字符串开头的第二个字符，
我们可以从第三个地方开始搜索，看一下是否有另一个"e ":

<code lang="perl">
say index $str, "e ";              # 2
say index $str, "e ", 3;           # 28
say index $str, "e", 3;            # 18
</code>

查询不带空格的"e"会得到另外一个结果.

最后, 有另外一个叫<b>rindex</b> (right index)的函数,  它会从字符串的右侧开始搜索:

<code lang="perl">
say rindex $str, "e";              # 39
say rindex $str, "e", 38;          # 38
say rindex $str, "e", 37;          # 33
</code>

<h2>substr</h2>

它基本上是index()的反函数. index()能告诉你<b>给定的字符串在什么位置</b>, 而substr会返回<b>给定位置的字符串</b>. 
通常<hl>substr</hl>会得到3个参数. 第一个是字符串，第二个是从零开始的位置(也称为<b>偏移量</b>), 而第三个参数则是要获取的子串<b>length</b>长度.

我认为在这篇文章中最有意思的函数是<hl>substr</hl>.

<code lang="perl">
use strict;
use warnings;
use 5.010;

my $str = "The black cat climbed the green tree";

say substr $str, 4, 5;                      # black
</code>

substr (位置计数)是从0开始的，所以偏移量为4的字符是'b'.

<code lang="perl">
say substr $str, 4, -11;                    # black cat climbed the
</code>

第三个参数（长度）也可以是负数. 它指定了从原始字符串右边开始有多少个自负不包括在子串中.
所以上面例子的意思是：返回从左边数4, 右边数11, 其中间的字符.

<code lang="perl">
say substr $str, 14;                        # climbed the green tree
</code>

你也可以不使用第3个（长度）参数，这样就意味着：返回从第4个位置开始，一直到字符串结尾的所有字符.

<code lang="perl">
say substr $str, -4;                        # tree
say substr $str, -4, 2;                     # tr
</code>

我们也可以使用负数作为偏移量: 从右边数4个，并从第四个（包含）开始. 这等同于<hl>length($str)-4</hl>.

<h2>替换字符串的一部分</h2>

最后一个例子有些麻烦.
目前为止，每个例子中<hl>substr</hl>都返回子串并保持原来的字符串不变. 而在这个例子中, 
substr的返回值不变，但是它会改变原来字符串的内容!

<hl>substr()</hl>的返回值总是取决于前3个参数, 但是在这个例子中substr有第4个参数, 它是将从原字符串选出
的子串进行替换的字符串.

<code lang="perl">
my $z = substr $str, 14, 7, "jumped from";
say $z;                                                     # climbed
say $str;                  # The black cat jumped from the green tree
</code>

于是<hl>substr $str, 14, 7, "jumped from"</hl> 返回单词 <b>climbed</b>,
但是因为有第4个参数，原字符串就被改变了.
