=title How to create a Perl Module for code reuse?
=timestamp 2013-02-10T09:31:56
=indexes package, use, Exporter, import, @INC, @EXPORT_OK, $0, dirname, abs_path, Cwd, File::Basename, lib, 1;
=status show
=original how-to-create-a-perl-module-for-code-reuse
=books advanced_book
=author szabgab
=translator terrencehan
=index 1
=archive 1
=feed 1
=comments 1
=social 1

=abstract start

You may be creating more and more scripts for your systems, which need to use the same functions.
你可能要为系统创建越来越多的脚本，这些脚本里使用相同的函数。

You already mastered the ancient art of copy-paste, but you are not satisfied with the result.
你已经掌握了复制-粘贴的方法，但是不满意这样的结果。

You probably know lots of Perl modules that allow you to use their functions and you also want to create one.
你大概知道Perl的模块，这样可以让你使用它们的函数，并且你也想自己写一个模块。

However, you don't know how to create such a module.
然而，你不知道如何下手。

=abstract end

<h2>模块</h2>

<code lang="perl">
package My::Math;
use strict;
use warnings;

use Exporter qw(import);

our @EXPORT_OK = qw(add multiply);

sub add {
  my ($x, $y) = @_;
  return $x + $y;
}

sub multiply {
  my ($x, $y) = @_;
  return $x * $y;
}

1;
</code>

Save this in somedir/lib/My/Math.pm  (or somedir\lib\My\Math.pm on Windows).
把这些代码保存在somedir/lib/My/Math.pm（或者Windows上的somedir\lib\My\Math.pm）。

<h2>脚本</h2>

<code lang="perl">
#!/usr/bin/perl
use strict;
use warnings;

use My::Math qw(add);

print add(19, 23);
</code>

Save this in somedir/bin/app.pl (or somedir\bin\app.pl on Windows).
保存在somedir/bin/app.pl （或Windows平台上的 somedir\bin\app.pl）。

Now run <b>perl somedir/bin/app.pl</b>. (or <b>perl somedir\bin\app.pl</b> on Windows).
现在运行<b>perl somedir/bin/app.pl</b>。（或Windows上的 <b>perl somedir\bin\app.pl</b> ）。

It is going to print an error like this:
这将会输出如下错误：

<code>
Can't locate My/Math.pm in @INC (@INC contains:
...
...
...
BEGIN failed--compilation aborted at somedir/bin/app.pl line 9.
</code>

<h2>有什么问题？</h2>

In the script we loaded the module with the <hl>use</hl> keyword.
Specifically with the <hl>use My::Math qw(add);</hl> line.
This searches the directories listed in the built-in <hl>@INC</hl> variable looking for a
subdirectory called <b>My</b> and in that subdirectory for a file called <b>Math.pm</b>.
我们在脚本里使用<hl>use</hl>关键词加载模块，就是<hl>use My::Math qw(add);</hl>。这样会在内建变量<hl>@INC</hl>列出的文件夹中搜索子文件夹<hl>My</hl>以及子文件夹中的文件<b>Math.pm</b>。

The problem is that your .pm file is not in any of the standard directories
of perl: it is not in any of the directories listed in @INC.
问题是你的 .pm 文件没有在任何Perl标准的文件夹中：也就是没有在@INC列出的文件夹。

You could either move your module, or you could change @INC.
你可以移动模块的位置或者改变@INC。

The former can be problematic, especially on systems where there is a strong separation
between the system administrator and the user. For example on Unix and Linux system
only the user "root" (the administrator) has write access to these directories.
So in general it is easier and more correct to change @INC.
前者也会有问题，尤其是在系统管理员和用户是有明确区分的系统上。例如Unix和Linix系统，只有"root"（管理员）用户可以写访问这些文件夹。而且，通常修改@INC既容易又正确。


<h2>从命令行修改 @INC</h2>

Before we try to load the module, we have to make sure the directory of the module is in the @INC array.
在尝试加载模块之前，我们必须要确认模块的文件夹在@INC数组中。

Try this:
尝试一下：

<b>perl -Isomedir/lib/ somedir/bin/app.pl</b>.

This will print the answer: 42.
这会打印出结果：42.

In this case, the <hl>-I</hl> flag of perl helped us add a directory path to @INC.
在此例中，Perl的<hl>-I</hl>标志帮助我们向@INC添加了一个文件夹。



<h2>在脚本中修改 @INC</h2>

Because we know that the "My" directory that holds our module is in a fixed place
<b>relative</b> to the script, we have another possibility for changing the script:
因为我们知道放有模块的文件夹"My"和脚本文件的位置是<b>相对的</b>，所以可以这样改写脚本：

<code lang="perl">
#!/usr/bin/perl
use strict;
use warnings;

use File::Basename qw(dirname);
use Cwd  qw(abs_path);
use lib dirname(dirname abs_path $0) . '/lib';

use My::Math qw(add);

print add(19, 23);
</code>

and run it again with this command:
并且再次运行脚本：

<b>perl somedir/bin/app.pl</b>.

Now it works.
现在它能工作了。

Let's explain the change:
下面来解释一下这个改变：

<h2>如何改变@INC来指向一个相对目录</h2>

This line:
<hl>use lib dirname(dirname abs_path $0) . '/lib';</hl>
adds the relative lib directory to the beginning of <hl>@INC</hl>.
这一行：
<hl>use lib dirname(dirname abs_path $0) . '/lib';</hl>
向<hl>@INC</hl>开头添加了相对目录。

<hl>$0</hl> holds the name of the current script.
<hl>abs_path()</hl> of <hl>Cwd</hl> returns the absolute path to the script.
<hl>$0</hl>含有当前脚本的名字。<hl>Cwd</hl>的<hl>abs_path()</hl>返回脚本的绝对路径。

Given a path to a file or to a directory the call to
<hl>dirname()</hl> of <hl>File::Basename</hl> returns the directory part,
except of the last part.
给定一个文件或文件夹的路径，<hl>File::Basename</hl>的<hl>dirname()</hl>函数返回（除了最后一部分）文件夹路径。

In our case $0 contains app.pl
这个例子中的$0是app.pl

abs_path($0) returns  .../somedir/bin/app.pl
abs_path($0) 返回  .../somedir/bin/app.pl

dirname(abs_path $0)   returns  .../somedir/bin
dirname(abs_path $0)   返回  .../somedir/bin

dirname( dirname abs_path $0)   returns  .../somedir
dirname( dirname abs_path $0)   返回  .../somedir

That's the root directory of our project.
这就是项目的根目录。

dirname( dirname abs_path $0) . '/lib'   then points to  .../somedir/lib
那么dirname( dirname abs_path $0) . '/lib'   就指向  .../somedir/lib

So what we have there is basically
所以最终我们得到的是

<hl>use lib '.../somedir/lib';</hl>

but without hard-coding the actual location of the whole tree.
而且没有硬编码整个目录树的位置。

The whole task of this call is to add the '.../somedir/lib' to be the first element of @INC.
以上处理的目的就是把'.../somedir/lib'添加到@INC的第一个元素。

Once that's done, the subsequent call to  <hl>use My::Math qw(add);</hl> will find the
'My' directory in '.../somedir/lib' and the Math.pm in '.../somedir/lib/My'.
一旦上面的操作结束，接下来调用的<hl>use My::Math qw(add);</hl>就能找到 '.../somedir/lib'中的'My'文件夹并且在'.../somedir/lib/My'中找到Math.pm文件。


The advantage of this solution is that the user of the script does not have to remember
to put the -I... on the command line.
这种解决方案的优势是脚本的用户不需要必须记住在命令行中使用 -I.. 。

There are other
<a href="/how-to-change-inc-to-find-perl-modules-in-non-standard-locations">ways to change @INC</a>
for you use in other situations.
还有其它
<a href="/how-to-change-inc-to-find-perl-modules-in-non-standard-locations">改变@INC的方式</a>可以用来提供另一种解决方案。


<h2>Explaining use</h2>

So as I wrote earlier, the <hl>use</hl> call will look for the My directory and the Math.pm file in it.
如我前面写到的，<hl>use</hl>的调用会查找My字符串以及其中的Math.pm文件。

The first one it finds will be loaded into memory and the <hl>import</hl>
function of My::Math will be called with the parameters after the name of
the module. In our case <hl>import( qw(add) )</hl> which is just the same
as calling <hl>import( 'add' )</hl>.
第一个找到的（模块）会加载到内存，之后以模块后面的参数调用 My::Math 的<hl>import</hl>函数。我们例子中的<hl>import( qw(add) )</hl>和调用<hl>import( 'add' )</hl>的效果一样。

<h2>脚本的说明</h2>

There is not much left to explain in the script. After the <hl>use</hl> statement
is done calling the <hl>import</hl> function, we can just call the newly imported
<b>add</b> function of the My::Math module. Just as if I declared the function in
the same script.
脚本中没有多少需要解释的。在<hl>use</hl>语句调用<hl>import</hl>函数之后，我们就能调用从 My::Math 模块导入的<hl>add</hl>函数，就像它在同一个脚本声明的一样。

What is more interesting is to see the parts of the module.
更有趣的是模块的部分。


<h2>模块的说明</h2>

A module in Perl is a namespace in the file corresponding to that namespace.
The <hl>package</hl> keyword creates the namespace. A module name My::Math
maps to the file My/Math.pm. A module name A::B::C maps to the file A/B/C.pm
somewhere in the directories listed in @INC.
Perl的模块就是命名空间，它放在与命名空间对应的文件中。<hl>package</hl>关键词可以创建命名空间。模块名My::Math映射的是My/Math.pm文件。A::B::C模块映射的是@INC中某个文件夹下面的A/B/C.pm文件。

As you recall, the <hl>use My::Math qw(add);</hl> statement in the script will load
the module and then call the <hl>import</hl> function. Most people don't
want to implement their own import function, so they load the <hl>Exporter</hl>
module and import the 'import' function.
如前所述，脚本里的<hl>use My::Math qw(add);</hl>语句会加载模块并调用<hl>import</hl>函数。大多数人不想自己去实现导入函数，所以他们使用<hl>Exporter</hl>模块以及'import'函数。

Yes, it is a bit confusing. The important thing to remember is that Exporter gives you the import.
没错，这有点迷惑。需要记住的是Exporter给你个提供了import。

That import function will look at the <hl>@EXPORT_OK</hl> array in your module
and arrange for on-demand importing of the functions listed in this array.
import函数会查看模块中的<hl>@EXPORT_OK</hl>数组，并按需组织从该数组中导入函数。

OK, maybe I need to clarify:
The module "exports" functions and the script "imports" them.
可能需要澄清一下：模块“导出”函数，本脚“导入”它们。


The last thing I need to mention is the <hl>1;</hl> at the end of the module.
Basically the use statement is executing the module and it needs to see some kind
of a true statement there. It could be anything. Some people put there <hl>42;</hl>,
others, the really funny ones put <hl>"FALSE"</hl> there. After all every string
with letters in it is <a href="/boolean-values-in-perl">considered to be true in Perl</a>.
That confuses about everyone. There are even people who put quotes from poems there.
最后需要提及的是模块结尾的<hl>1;</hl>。基本上，use语句会执行脚本，而且它需要（最后）看到有个能返回真值的语句。这可以是任何东西。有些人会放<hl>42;</hl>，还有一些有趣的人会放<hl>"FALSE"</hl>在那。毕竟每个（仅）包含字母的字符串<a href="/boolean-values-in-perl">被Perl看为真</a>。这会很有迷惑性。甚至还有人会在那里放一些诗歌的引用。

"Famous last words."

That's actually nice, but might still confuse some people at first.
这实际上不错，但是仍然会在开始的时候迷惑某些人。

There are also two functions in the module. We decided to export both of them,
but the user (the author of the script) wanted to import only one of the subroutines.
在模块里有两个函数。我们决定把它们两个都导出，但是用户（脚本的作者）只想导入其中一个。


<h2>总结</h2>

Aside from a few lines that I explained above, it is quite simple to create a Perl module.
Of course there are other things you might want to learn about modules that will
appear in other articles, but there is nothing stopping you now from moving some common
functions into a module.
除了上面几行说明以外，创建一个Perl的模块还是相当简单的。当然还有其他关于模块的事情你可能需要学习，它们会在其它文章中涉及，不过现在没有什么事情可以阻碍你向模块中继续添加函数。

Maybe one more advice on how to call your module:
还有一个给模块取名的建议：

<h2>模块的名字</h2>

It is highly recommended to use capital letter as the first letter of every part in the
module name and lower case for the rest of the letters.
It is also recommended to use a namespace several levels deep.
强烈建议在模块名的每部分首字母大写，以及使用多层的命名空间。

If you work in a company called Abc, I'd recommend preceding all the modules with the Abc::
namespace. If within the company the project is called Xyz, then all its modules should be in
Abc::Xyz::.
如果你为Abc工作，那么建议你把所有的模块都使用前导命名空间Abc::。如果公司内的项目名是Xyz，那么它所有的模块都应在 Abc::Xyz:: 命名空间下。

So if you have a module dealing with configuration you might call the package
Abc::Xyz::Config which indicates the file   .../projectdir/lib/Abc/Xyz/Config.pm
所以如果有个模块是处理配置的，你可能给该包取名为 Abc::Xyz::Config来指向.../projectdir/lib/Abc/Xyz/Config.pm

Please avoid calling it just Config.pm. That will confuse both Perl (that comes with its own Config.pm)
and you.
请避免只使用Config.pm。这样不但还会迷惑Perl（有它自己的Config.pm）还会迷惑你。


