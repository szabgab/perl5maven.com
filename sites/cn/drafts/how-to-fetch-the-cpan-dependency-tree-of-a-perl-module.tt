=title How to fetch the CPAN dependency tree of a Perl module?
=timestamp 2012-12-18T12:45:56
=indexes MetaCPAN, CPAN, dependencies, MetaCPAN::API
=status show
=original how-to-fetch-the-cpan-dependency-tree-of-a-perl-module
=author szabgab
=translator terrencehan
=index 1
=archive 1
=feed 1
=comments 1
=social 1

=abstract start

When installing a module from CPAN, we first need to install all the dependencies of a module. Luckily all the CPAN can
do this automatically. Either out-of-the box, or after setting a configuration option.
在从CPAN安装模块的时候，首先要安装该模块的所有依赖。幸运的是所有CPAN能自动的完整这项操作。TODO

What if you'd like to check the dependency tree of a module, even before installing all the dependencies of the module?
如果想在安装模块之前检查依赖树会怎样？

How could you fetch the list of the dependencies?
如何才能获取到依赖列表呢？

=abstract end

<h2>MetaCPAN knows it</h2>

Luckily, <a href="https://www.metacpan.org/">MetaCPAN</a> already collected all the information we need, so we only need to fetch the data
via they MetaCPAN API. We are going to use the <a href="https://www.metacpan.org/module/MetaCPAN::API">MetaCPAN::API</a>
module created by <a href="http://blogs.perl.org/users/sawyer_x/">SawyerX</a>
幸运的是，<a href="https://www.metacpan.org/">MetaCPAN</a>已经收集了我们需要的所有信息，所以可以通过MetaCPAN API来提取信息。我们将会使用<a href="http://blogs.perl.org/users/sawyer_x/">SawyerX</a>创建的<a href="https://www.metacpan.org/module/MetaCPAN::API">MetaCPAN::API</a>模块。

Let's see the building blocks.
TODO

<h2>获取CPAN上的Perl模块信息</h2>

A Perl module is the pm file that is interesting for the developer.
It is what you load into memory with the <b>use</b> statement. Each Perl module is packaged
into a distribution, but in the first example we examine a single module.
Perl模块就是pm文件，它就是你要通过<b>use</b>语句加载到内存的东西。每个Perl模块都被打包到发行版中，不过在第一个例子中将会使用一个单独的模块。

<code lang="perl">
#!/usr/bin/perl
use strict;
use warnings;
use 5.010;

use Data::Dumper;
use MetaCPAN::API;

my $mcpan = MetaCPAN::API->new;

my $module   = $mcpan->module( 'Test::More' );
say Dumper $module;
</code>

After creating the MetaCPAN::API object we can call the <b>module</b> method passing the name of a module to it.
It will return a hash reference, representing all the information about the module. Among other things, the hash
has a key called <b>distribution</b> with the name of the CPAN distribution that contains this module. In the case
of the <a href="https://www.metacpan.org/module/Test::More">Test::More</a> module,
this is the <a href="https://metacpan.org/release/Test-Simple">Test-Simple</a> distribution.
在创建 MetaCPAN::API 对象之后，我们以模块名作为参数调用<b>module</b>方法。它会返回一个hash引用来表示模块的所有信息。该hash有个键<b>distribution</b>，它关联的是包含此模块的CPAN发布模块。在<a href="https://www.metacpan.org/module/Test::More">Test::More</a>模块中就是<a href="https://metacpan.org/release/Test-Simple">Test-Simple</a>发布模块。

There are many other fields. Some that might be more interesting are: <b>version</b>, <b>abstract</b>, <b>author</b>
which is the PAUSE id of the person who uploaded this release, and date.
还有很多其他字段，其中一些比较有用：<b>version</b>, <b>abstract</b>, <b>author</b>（上传发布的用户ID），以及日期。


<h2>Get information about a CPAN distribution</h2>

A CPAN distribution is a tarball or zip file uploaded to CPAN.
This is the unit that you can install (or not).
Each distribution can contain 0 or more modules.
It is mostly interesting for the system administrators who need to ensure, you have all the dependencies installed.
CPAN发布模块是一个上传到CPAN的tar或zip文件。它作为一个安装单元。每个发布包含0或多个模块。系统管理员会这些比较感兴趣，因为他们要确定你已经安装了所有依赖。

<code lang="perl">
#!/usr/bin/perl
use strict;
use warnings;
use 5.010;

use Data::Dumper;
use MetaCPAN::API;

my $name = 'Test-Simple';
my $mcpan = MetaCPAN::API->new;
my $dist  = $mcpan->release( distribution => $name );
say Dumper $dist;
</code>

In order to fetch information about a distribution we call the <b>release</b> method and pass the name of the
distribution. For example <a href="https://metacpan.org/release/Test-Simple">Test-Simple</a>.
为了获得发布模块的信息，我们它的名字作为参数调用<b>release</b>方法。例如<a href="https://metacpan.org/release/Test-Simple">Test-Simple</a>。

This, too returns a reference to a hash with lots of key. Some of the interesting keys would be <b>date</b>,
<b>author</b>, <b>download_url</b>, <b>version</b>, <b>license</b> (which is actually an array reference to a list of
license keywords), and dependency which is also an array reference.
The element of this array are hash references by themselves. Each hash describing one of the direct dependencies.
These hashes have 5 keys, IMHO 3 of them are the most interesting ones: <b>version</b>, <b>module</b>, and
<b>phase</b> which describes when is this dependency needed. Values can be <b>configure</b>, <b>build</b>, and
<b>runtime</b>.
这也会返回一个有很多键的hash。比较有用的是<b>date</b>,<b>author</b>, <b>download_url</b>, <b>version</b>, <b>license</b>（指向证书关键词列表的数组引用），以及也是数组引用的依赖。该数组的每个元素都是hash引用，它们描述了直接依赖的信息。这些hash都有5个键，我认为最有趣的是<b>version</b>, <b>module</b>, 和<b>phase</b>（表述了需要该依赖的环节，值可以是<b>configure</b>, <b>build</b>, 以及<b>runtime</b>）。


<h2>DevOps</h2>

People who understand that there is a need to bridge the gap between developers and operators (sysadmins)
are referred as being <a href="http://en.wikipedia.org/wiki/DevOps">DevOps</a>. They are concerned with both
the modules and the distributions mentioned above.

Furthermore, given a module, they will be probably interested in the list of all the dependencies, and not
only the immediate ones. After all, it is quite possible that module A depends on module B which in turn depends on
module C which depends on D ...
更进一步，给定一个模块，他们可能对所有的依赖列表感兴趣，而不仅是直接依赖的那些。毕竟，可能模块A依赖模块B，而B依赖C，C进而依赖D等等。

Given a module, or a list of modules, they will certainly want to know which distributions they will need to install.
给定一个模块或者一个模块列表，他们肯定想要知道那些发布模块需要安装。

<h2>Getting the CPAN dependency tree of a Perl module</h2>

<code lang="perl">
#!/usr/bin/perl
use strict;
use warnings;
use 5.010;

use Data::Dumper;
use MetaCPAN::API;

my %data;

my $mcpan = MetaCPAN::API->new;
process_module('Test::More');
say Dumper \%data;

sub process_distro {
    my ($name) = @_;

    return if exists $data{distros}{$name};
    say STDERR "Processing distro $name";

    $data{distros}{$name} = undef;
    my $dist  = eval { $mcpan->release( distribution => $name ) };
    if ($@) {
        warn "Exception: $@";
        return;
    }
    $data{distros}{$name} = $dist;

    foreach my $dep (@{ $dist->{dependency} }) {
        process_module($dep->{module});
    }

    return;
}

sub process_module {
    my ($name) = @_;

    return if exists $data{modules}{ $name };
    say STDERR "Processing module $name";

    $data{modules}{ $name } = undef;
    my $module   = eval { $mcpan->module( $name ) };
    if ($@) {
        warn "Exception: $@";
        return;
    }
    $data{modules}{ $name } = $module;
    process_distro($module->{distribution});

    return;
}
</code>

This script starts with the name of a single module (Test::More in the example), recursively fetches all
the dependencies and saves them in a single hash.
上面的脚本从一个模块（Test::More）开始，递归的获取所有依赖并保存在一个hash中。

The <b>%data</b> hash holds all the information. It has two main keys, <b>modules</b> and <b>distros</b>.
Under <b>modules</b>, each module name will have an entry, under <b>distros</b> each distribution will have an entry.
<b>%data</b>哈希表持有所有信息。它有两个主要的键：<b>modules</b> 和 <b>distros</b>。<b>modules</b>下面每个模块名有一个项，<b>distros</b>下面每个发行模块有一个项。

There are two subroutines, one for fetching the information of a module and the other for fetching the
information of a distribution. Once the data was fetched it is saved in the hash. Let's look at the
<b>process_module</b> subroutine. It received the name of the module as a parameter. The first thing it checks
if this module has already been processed. If it has, we call return. No need to fetch it again.
有两个函数，一个提取模块的信息，另一个提取发行模块的信息，并保存在哈希表中。来看一下<b>process_module</b>函数。它传入模块名作为参素。首先它会检查该模块是否已经处理过了。如果是，调用return。没有必要再提取一遍。

<code lang="perl">
    return if exists $data{modules}{ $name };
</code>

Then there is a line just to show progress.
之后有一行输出进度。

<code lang="perl">
    say STDERR "Processing module $name";
</code>

We put <b>undef</b> in the field, so even if the fetching fails, we'll already have the key in the hash.
Using this will, ensure that we won't try to fetch the data again even if the first attempt failed.
That's the reason we use <b>exists</b> in the firs line explained above.
我们在这个字段放置<b>undef</b>，这样即便提取失败，我们也已经在哈希表中有个键了，这也可以保证不会在第一次提取失败之后再次尝试。这也是为什么在上面说明的第一行中使用<b>exists</b>的原因。

<code lang="perl">
    $data{modules}{ $name } = undef;
</code>

Next, we fetch the data from MetaCPAN, but we wrapped the call in an <b>eval</b> block to avoid die-ing.
If the call fails and throws an exception we catch it, print it using the <b>warn</b> call stop further
processing of this module by calling <b>return</b>.
接下来，从MetaCPAN上获取数据，这里我们使用<b>eval</b>块将调用包裹起来以避免程序崩溃。如果调用失败会抛出异常，我们会捕获并使用<b>warn</b>打印出来，然后使用<b>return</b>结束该模块的处理。

<code lang="perl">
    my $module   = eval { $mcpan->module( $name ) };
    if ($@) {
        warn "Exception: $@";
        return;
    }
</code>

If we successfully fetched the data from MetaCPAN, we save it in the hash and call the <b>process_distro</b>
function to process the distribution.
如果我们成功地从MetaCPAN上提取到了数据，我们把它保存在哈希表并调用<b>process_distro</b>函数来处理发行模块。

<code lang="perl">
    $data{modules}{ $name } = $module;
    process_distro($module->{distribution});
</code>


The <b>process_distro</b> function is very similar, but because each distribution can depend on several modules, there
is a loop processing each module.
<b>process_distro</b>函数相当简单，但是因为每个发行模块可以依赖多个模块，在处理每个模块的时候会有一个循环。

We know this recursive process will end as there is a finite number of CPAN modules and we made sure we don't try to
process the same module or distribution twice.
因为CPAN上的模块数目有限，所以我们知道递归处理终会结束，并且我们已经确保同一个模块不会被处理两次。

<h2>警告</h2>

As far as I know, MetaCPAN takes its information from the META.yml or META.json file that comes with every modern CPAN
distribution. This means that if a distribution does not supply the META file, or if the information within that file
is incorrect, then the data in MetaCPAN will be incorrect as well.
据我所知，MetaCPAN是从每个现代CPAN发布模块的META.yml或META.json中提取信息的。这意味着如果发布模块没有提供META文件，或者文件中的信息是错误的，那么MetaCPAN的数据也是错误的。

Normally the META files are generated when the developer builds and packs the distribution. The data is derived from
the content of Makefile.PL, Build.PL or dist.ini files depending on the packaging system the developer uses.
通常META文件在开发者构建和打包发布模块的时候生成的。文件的数据源自Makefile.PL, Build.PL 或 dist.ini的内容，具体是哪个文件取决于开发者使用的打包系统。

So the META files might be missing for old distributions or if the developer does not use any of the standard packaging
systems.
所以可能因为发布模块比较旧或者开发者没有使用任何标准的打包系统而找不到META文件。

Even if the developer uses the right tools, the data in the META files can be incorrect, or not 100% correct.
Especially when the list of dependencies is dynamic. For example when the list of dependencies are different on
Windows and Linux and Mac OSX.
即便开发者使用了正确的工具，META文件的数据也可能是错的，或者说不是100%正确。尤其是在依赖列表是动态的情况下。例如当依赖列表在Windows，Linux和Mac OSX上不同时。

If the dependencies can be different based on some questions asked during the installation. (e.g. Which database
driver should be used? SQlite, MySQL, or PostgreSQL ?)
依赖也可能根据安装时的提问而不一样。（例如：应该使用那个数据库驱动？SQlite，MySQL，或PostgreSQL？）

There can be optional dependencies adding optional features that won't be listed in the META files.
还有一些添加可选特性的依赖，它们不会在META文件中列出。

These dependencies can be resolved in a dynamic way during the installation process, but are not solved in the static
META files.
这些依赖可以在安装过程中动态解决，但没有在静态的META文件中处理。


<h2>What next?</h2>

Based on this solution we could build all kinds of interesting tools. For example,
I'd like to make sure that all the dependencies I use have licenses and list
the licenses so the legal department can check if we can use the modules.
根据这种方案，我们可以构建很多有趣的工具。例如，我要确认所有要使用的依赖都有许可证书，然后列出这些证书供法律部门确认我们能否使用这些模块。

Other possible use is to create a script that would tell me common dependencies of two modules,
or probably more interestingly, the list of dependencies that are not common. Assuming I already
have an application using a set of modules. I'd like to find out what additional dependencies
I am going to add if I start using module X?
另外一种可能的应用是写一个脚本告诉我两个模块共同的依赖信息，或者更有趣一点：列出不同的依赖。假设我已经有个由很多模块构成的应用，现在想要找出如果要使用模块X，还要添加那些依赖。


What other task would you like to do?
你想做那些小任务呢？

If you are already using the MetaCPAN API, what do you use it for?
如果你已经在使用MetaCPAN API，你会用它做什么呢？

