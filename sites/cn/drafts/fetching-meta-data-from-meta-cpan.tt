=title Fetching META data from Meta CPAN
=timestamp 2013-01-08T10:45:56
=indexes CPAN, MetaCPAN, MetaCPAN::API, META
=status show
=original fetching-meta-data-from-meta-cpan
=author szabgab
=translator terrencehan
=index 1
=archive 1
=feed 1
=comments 1
=social 1

=abstract start

In other articles you can learn <a
href="http://perlmaven.com/how-to-add-link-to-version-control-system-of-a-cpan-distributions">how to add a link to
version control</a> and <a href="http://perlmaven.com/how-to-add-the-license-field-to-meta-files-on-cpan">how to add the license field</a> to a CPAN module.<a href="https://metacpan.org/module/MetaCPAN::API">MetaCPAN::API</a>
从其它文件你可以了解到<a
href="http://perlmaven.com/how-to-add-link-to-version-control-system-of-a-cpan-distributions">如何添加指向版本控制的链接</a> 和 <a href="http://perlmaven.com/how-to-add-the-license-field-to-meta-files-on-cpan">如何添加证书字段</a> 到CPAN模块。<a href="https://metacpan.org/module/MetaCPAN::API">MetaCPAN::API</a>。

So how many recently uploaded CPAN modules have this information? <a href="https://metacpan.org/">Meta CPAN</a> already
has this information. In this article we'll use it to create a report.
那么最近上传的模块中有多少是含有这中信息的？<a href="https://metacpan.org/">Meta CPAN</a>已经有这样的信息。在本文中我们就会用它来生成报告。

=abstract end

<h2>The full script</h2>

Using <a href="https://metacpan.org/module/MetaCPAN::API">MetaCPAN::API</a>.
使用<a href="https://metacpan.org/module/MetaCPAN::API">MetaCPAN::API</a>。

On the command line you have to pass the number of distributions you'd like to fetch,
and optionally you can also provide a PAUSE ID. (For example, when I check my own distributions
I run it with <b>perl metacpan_meta.pl 100 SZABGAB</b>.
在命令行中你要传入想要提取的分发模块树木以及可选地PAUSE ID。（例如，当我检查我自己的发行模块时，这样执行<b>perl metacpan_meta.pl 100 SZABGAB</b>）。

<code lang="perl">
#!/usr/bin/perl
use strict;
use warnings;
use 5.010;

use Data::Dumper;
use MetaCPAN::API;
my $mcpan = MetaCPAN::API->new;

my ($size, $pauseid) = @ARGV;
die "Usage: $0 N [PAUSEID]  (N = number of most recent distributions)\n" if not $size;

my $q = 'status:latest';
if ($pauseid) {
    $q .= " AND author:$pauseid";
}

my $r = $mcpan->fetch( 'release/_search',
    q => $q,
    sort => 'date:desc',
    fields => 'distribution,date,license,author,resources.repository',
    size => $size,
);

my %licenses;
my @missing_license;
my @missing_repo;
my %repos;
my $found = 0;
my $hits = scalar @{ $r->{hits}{hits} };
foreach my $d (@{ $r->{hits}{hits} }) {
    my $license = $d->{fields}{license};
    my $distro  = $d->{fields}{distribution};
    my $author  = $d->{fields}{author};
    my $repo    = $d->{fields}{'resources.repository'};

    if ($license and $license ne 'unknown') {
        $found++;
        $licenses{$license}++;
    } else {
        push @missing_license, [$distro, $author];
    }

    if ($repo and $repo->{url}) {
        if ($repo->{url} =~ m{http://code.google.com/}) {
            $repos{google}++;
        } elsif ($repo->{url} =~ m{git://github.com/}) {
            $repos{github_git}++;
        } elsif ($repo->{url} =~ m{http://github.com/}) {
            $repos{github_http}++;
        } elsif ($repo->{url} =~ m{https://github.com/}) {
            $repos{github_https}++;
        } elsif ($repo->{url} =~ m{https://bitbucket.org/}) {
            $repos{bitbucket}++;
        } elsif ($repo->{url} =~ m{git://git.gnome.org/}) {
            $repos{git_gnome}++;
        } elsif ($repo->{url} =~ m{https://svn.perl.org/}) {
            $repos{svn_perl_org}++;
        } elsif ($repo->{url} =~ m{git://}) {
            $repos{other_git}++;
        } elsif ($repo->{url} =~ m{\.git$}) {
            $repos{other_git}++;
        } elsif ($repo->{url} =~ m{https?://svn\.}) {
            $repos{other_svn}++;
        } else {
            $repos{other}++;
            say "Other repo: $repo->{url}";
        }
    } else {
        push @missing_repo, [$distro, $author];
    }
}
@missing_license = sort {$a->[0] cmp $b->[0]} @missing_license;
@missing_repo    = sort {$a->[0] cmp $b->[0]} @missing_repo;
say "Total asked for: $size";
say "Total received : $hits";
say "License found: $found, missing " . scalar(@missing_license);
say "Repos missing: " . scalar(@missing_repo);
say "-" x 40;
print Dumper \%repos;
print Dumper \%licenses;
print 'missing_licenses: ' . Dumper \@missing_license;
print 'missing_repo: ' . Dumper \@missing_repo;
</code>

<h2>查询的说明</h2>

I think the most interesting part is how the query is built, so I'll explain that first.
我认为最有趣的部分是查询条件的构建，所以首先来说明一下。

<code lang="perl">
my $q = 'status:latest';
if ($pauseid) {
    $q .= " AND author:$pauseid";
}

my $r = $mcpan->fetch( 'release/_search',
    q => $q,
    sort => 'date:desc',
    fields => 'distribution,date,license,author,resources.repository',
    size => $size,
);
</code>

We are calling the <hl>fetch</hl> method and we are searching for <b>release</b>-es (aka. distributions).
It takes a set of key-value pairs as parameters.
我们在这调用<hl>fetch</hl>方法并搜索<b>发行模块</b>。它(fetch)传入一系列键-值对最为参数。

The first one we see is <b>q</b>. This filters the results based on various conditions.
We have the conditions in a variable called <b>$q</b>. By default we fetch all the distributions where
the status is "latest" using the <hl>status:latest</hl> string.
For this report we don't want to see earlier releases of the same distribution.
我们看到的第一个是<b>q</b>。这会根据条件过滤结果。我们的过滤条件放于<b>$q</b>变量中。默认我们会使用<hl>status:latest</hl>提取状态是"latest"的所有发行模块。在此报告中，我们不想看到之前发布的模块。

Then, if the user provided a PAUSE ID - the ID used to upload a distribution to CPAN
(via <a href="https://pause.perl.org/">PAUSE</a>) -
we include that in the query. If the PAUSE ID is SZABGAB, you will have a query
<hl>status:latest AND author:SZABGAB</hl>.
如果用户提供了一个PAUSE ID——上传发行模块到CPAN的ID（通过<a href="https://pause.perl.org/">PAUSE</a>）——那我们会包含在查询条件中。如果PAUSE ID是SZABGAB，就会得到查询条件<hl>status:latest AND author:SZABGAB</hl>。

The second field is optional. We instruct Meta CPAN to provide the results sorted based on the <b>date</b> field in a
descending order. Most recent first.
第二个字段是可选的。我们指示Meta CPAN返回的结果根据<b>date</b>字段降序排列，最近最优先。

Another optional pair of parameters: <b>fields</b> can limit which fields we are actually interested in. If we leave out
the fields, Meta CPAN will return a lot of details for each distribution. IF we are not interested in those details,
then this is just a waste of resources. So we limit the fields we would like to see.
另外一个可选的参数：<b>fields</b>可以限制我们真正感兴趣的字段。如果我们省略这些字段，Meta CPAN会对每个发行模块返回很多细节。如果我们对这些细节不感兴趣，这无疑是对资源的浪费。所以我们限制了需要看的字段。

When I was creating this script I did not know which fields existed. So at first I fetched a single distribution
without setting the fields and printed the results using Data::Dumper. That helped me decide which fields to fetch
in the real script.
当我在写这个脚本的时候，我并不知道有哪些字段可以选择。所以开始的时候我没有设置fields就提取了单个发行模块信息，并通过Data::Dumper打印出来。这样就能帮助我决定在真正的脚本里使用哪些字段。

The last pair of parameters in our example sets the size of the "result set". The max number of results we would like to
fetch. Here again, I think it is better to limit this to the actual size we are interested in. There is no point in
fetching information about 20,000 distributions if we don't intend to use the most of that data.
我们例子中的最后一个参数是设置“结果集”的大小。也就是我们想提取结果的最大数量。我也认为根据需要来设置一个实际值是更好的实践，因为获取大约20,000个发行模块的信息而有大部分数据我们又不需要是毫无意义的。


<h2>Collecting the data</h2>

Once the query returned, we go over all the hits and using a straight-forward way of filtering we collect the
results in several hashes. Then we print the report and dump the data. I am sure the report could be formatted
in a much nicer way, but it was good enough for my purposes.
一旦返回查询结果，我们遍历所有的hits然后采用一种直接的方式从多个哈希表中过滤搜集结果。之后打印出报表并dump数据。我知道报表可以以一种更好的格式呈现，但这已经能够满足我的需求了。

<h2>The script on CPAN</h2>

Since I wrote the article I packaged the script and uploaded it to CPAN.
Check out the <a href="https://metacpan.org/release/MetaCPAN-Clients">MetaCPAN-Clients</a>
distribution.

在写完这篇文章之后，我将该脚本打包并上传到CPAN上。请参阅<a href="https://metacpan.org/release/MetaCPAN-Clients">MetaCPAN-Clients</a>。
