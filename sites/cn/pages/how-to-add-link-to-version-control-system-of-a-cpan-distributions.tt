=title 如何让Meta CPAN为模块显示一个到其版本控制系统的链接
=timestamp 2013-05-23T20:45:56
=indexes Perl, Perl 5, CPAN, Git, Github, SVN, Subversion, VCS, META, ExtUtils::MakeMaker, Module::Build, Module::Install, Dist::Zilla, CPAN::Meta::Spec
=status show
=original how-to-add-link-to-version-control-system-of-a-cpan-distributions
=author szabgab
=translator herolee
=index 1
=archive 1
=feed 1
=comments 1
=social 1

=abstract start

当你浏览<a href="https://www.metacpan.org/">META CPAN</a>或者<a href="http://search.cpan.org/">search.cpan.org</a>时，
你会发现有些模块有一个链接指向Github或者其他托管他们项目的地方。

在search.cpan.org上，它是一个在<b>Repository</b>标题旁的文字链接，而Meta CPAN根据存储的类型，它或是一个链接，或是一个<b>Clone repository</b>标题下边的弹出式菜单。
（Github用漂亮的弹出式菜单，私有存储则是简单的链接。）

=abstract end

两个站点都从CPAN发布的模块里所含的元文件获取到版本控制系統的链接。或者是 META.yml，或者是新式的 META.json。（他们只是格式有别。）


元文件通常在作者发布模块的時候自动生成，我这里只演示让四个主要的打包系统包含存储链接。

这个例子中我会以<a href="https://metacpan.org/module/Task::DWIM">Task::DWIM</a>的存储链接为例，
它是一个实验性模块，包含<a href="http://dwimperl.com/">DWIM Perl</a>发行版里的所有模块。

<h2>ExtUtils::MakeMaker</h2>

如果你使用 <a href="https://metacpan.org/module/ExtUtils::MakeMaker">ExtUtils::MakeMaker</a>
把下边这段加到Makefile.PL里作为函数<b>WriteMakefile</b>的参数：

<code lang="perl">
META_MERGE        => {
     resources => {
         repository  =>  'https://github.com/dwimperl/Task-DWIM',
     },
},
</code>

如果你的 ExtUtils::MakeMaker 版本不支持这个功能，请升级ExtUtils::MakeMaker。

<h2>Module::Build</h2>

如果你使用 <a href="https://metacpan.org/module/Module::Build">Module::Build</a>，把下面代码加到Build.PL，
作为 <b>Module::Build->new</b> 调用的参数：

<code lang="perl">
meta_merge => {
    resources => {
            repository => 'https://github.com/dwimperl/Task-DWIM'
    }
},
</code>

<h2>Module::Install</h2>

如果你使用 <a href="https://metacpan.org/module/Module::Install">Module::Install</a> 把下面这段加入到 Makefile.PL：

<code lang="perl">
repository 'https://github.com/dwimperl/Task-DWIM';
</code>

<h2>Dist::Zilla</h2>

如果你使用 <a href="http://dzil.org/">Dist::Zilla</a>，
<a href="https://metacpan.org/module/Dist::Zilla::Plugin::Repository">Dist::Zilla::Plugin::Repository</a>会自动添加到存储的链接，不过你也可以手动指定。

<code lang="perl">
[MetaResources]
repository.url = https://github.com/dwimperl/Task-DWIM.git
</code>

详尽的版本会像下面这个例子一样包含更多细节。
这部分只包含在文件META.json里，而不是META.yml。
要生成这个文件，你需要包含Dist::Zilla的<a href="https://metacpan.org/module/Dist::Zilla::Plugin::MetaJSON">MetaJSON插件</a>。

<code lang="perl">
[MetaResources]
repository.web = https://github.com/dwimperl/Task-DWIM
repository.url = https://github.com/dwimperl/Task-DWIM.git
repository.type = git

[MetaJSON]
</code>

Dist::Zilla还有许多其他办法可以<a href="http://www.lowlevelmanager.com/2012/05/dzil-plugins-github-vs-githubmeta.html">添加存储链接</a>到元文件中。

<h2>为什么添加这个链接？</h2>

道理很简单。
越容易给你模块的最新版本打补丁，你越可能获取它。

另外，你可能已经在最新版本上做了一些改动。你可能改了其他人要改的bug。要是能看到存储，我们能避免重复劳动。

<h2>其他资源</h2>

如果你已经在做这些了，你也可以加入其它资源。
<a href="https://metacpan.org/module/CPAN::Meta::Spec#resources">CPAN 元规范</a> 列出了所有的项目。
如果哪里不清楚，就去问它。

<h2>许可证</h2>

在另一篇文章中，我演示了
<a href="/how-to-add-the-license-field-to-meta-files-on-cpan">如何把许可证信息加入 CPAN 发行版的元文件中</a>。
如果你有一个公共存储，其他人发补丁就简单了。