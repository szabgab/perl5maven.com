=title Perl默认变量$_
=timestamp 2013-05-17T08:41:51
=indexes Perl, $_, scalar, default, variable, topic
=status show
=original the-default-variable-of-perl
=author szabgab
=translator herolee
=index 1
=archive 1
=feed 1
=comments 1
=social 1

=abstract start

Perl里有个奇怪的标量变量叫做<hl>$_</hl>，它是<hl>默认变量</hl>，换句话说是主题。

Perl里好多函数或者操作符默认使用这个变量，以防没有明确提供参数。
总的来说，我认为你<b>不</b>应该在实际代码里看到<hl>$_</hl>。
我认为<hl>$_</hl>的意思在于你不需要明确写出来。

当然，除非你写了。

=abstract end

拥有一个默认变量是个很强大的想法，但是不正确地使用它会降低你的代码的可读性。
看下这个脚本：

<code lang="perl">
use strict;
use warnings;
use v5.10;

while (<STDIN>) {
   chomp;
   if (/MATCH/) {
      say;
   }
}
</code>

这跟下边这个几乎一样：

<code lang="perl">
use strict;
use warnings;
use v5.10;

while ($_ = <STDIN>) {
   chomp $_;
   if ($_ =~ /MATCH/) {
      say $_;
   }
}
</code>

我从不写第二种，第一种也只是写在很小的脚本里或者代码里紧致的部分。甚至都不写。

如你所见，在<hl>while</hl>循环里，当你从文件句柄甚至是从标准输入读入时，如果不显式赋值给一个变量，读取的这一行会被赋值给<hl>$_</hl>。

如果没有提供参数，<hl>chomp()</hl>默认操作于该变量。

正则表达式匹配可以不显式提供字符串，甚至不写<hl>=~</hl>操作符。如果这么写时，它将会对<hl>$_</hl>的内容进行操作。

最后<hl>say()</hl>类似于<hl>print()</hl>会打印<hl>$_</hl>的内容，如果不提供其他参数的话。

<h2>split</h2>

<hl>split</hl>的第二个参数是要被分割的字符串。如果没有提供第二个参数，split将分割<hl>$_</hl>的内容。

<code lang="perl">
my @fields = split /:/;
</code>

<h2>foreach</h2>

如果我们不给<hl>foreach</hl>提供迭代变量的名称，它会使用<hl>$_</hl>。

<code lang="perl">
use strict;
use warnings;
use v5.10;

my @names = qw(Foo Bar Baz);
foreach (@names) {   # puts values in $_
    say;
}
</code>

<h2>条件赋值</h2>

有些情况下，我们可能由于隐含使用了<hl>$_</hl>导致错误。

一些高手可能有意写这种代码，但是新手或者初学者这么写的话，这就是bug了。

<code lang="perl">
if ($line = /regex/) {
}
</code>

你可以发现，我们使用了普通的赋值操作符：<hl>=</hl>而非正则表达式操作符：<hl>=~</hl>。
这实际上跟下边这个一样

<code lang="perl">
if ($line = $_ =~ /regex/) {
}
</code>

它获取<hl>$_</hl>的内容，并对之进行模式匹配，接着把结果赋值给<hl>$line</hl>。然后检查$line的内容是真或假。

<h2>显式$_</h2>

我前边说过，建议<b>不要</b>显式使用<hl>$_</hl>。
有时我看到人们这么写代码：

<code lang="perl">
while (<$fh>) {
  chomp;
  my $prefix = substr $_, 0, 7;
}
</code>

我认为，如果你使用perl的某个声明需要强制显式地写出<hl>$_</hl>，比如这个例子里的<hl>substr</hl>，你应该总是使用一个更有意义的名字。
即便它意味着更多键盘敲击：

<code lang="perl">
while (my $line = <$fh>) {
  chomp $line;
  my $prefix = substr $line, 0, 7;
}
</code>

我经常看到另一种不好的例子：

<code lang="perl">
while (<$fh>) {
   my $line = $_;
   ...
}
</code>

这很可能出现在人们不了解<hl>while</hl>语句，文件句柄读操作以及<hl>$_</hl>之间的交互时。

这可以以更简单的方式直接赋值给<hl>$line</hl>变量。

<code lang="perl">
while (my $line = <$fh>) {
   ...
}
</code>


<h2>例外</h2>

有些情况下，你不可避免地需要显式使用<hl>$_</hl>。
此类有<a href="/filtering-values-with-perl-grep">grep</a>和<a href="/transforming-a-perl-array-using-map">map</a>函数以及其他类似<a href="/filtering-values-with-perl-grep">any</a>的函数。
