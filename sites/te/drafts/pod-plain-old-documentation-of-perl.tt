=title POD - Plain Old Documentation
=timestamp 2013-05-18T03:19:56
=indexes POD, perldoc, =head1, =cut, =pod, =head2, documentation, pod2html, pod2pdf
=status show
=original perl-on-the-command-line
=books beginner_book
=author szabgab
=translator balasatishreddykarri
=index 1
=archive 1
=feed 1
=comments 1
=social 1

=abstract start

సాదారణంగా ప్రోగ్రామర్స్ డాక్యుమెంటేషన్ వ్రాయడానికి ఇష్టపడరు. ప్రోగ్రామ్స్ సాదారణ టెక్స్ట్ ఫైల్స్ లో వుండడం కూడా
ఒక కారణం, కానీ కొన్ని వర్డ్ ప్రాసెసర్ లో డాక్యుమెంటేషన్ వ్రాయవలసి వస్తుంది.

వర్డ్ ప్రాసెసర్ గురించి తెలుసుకుని దానిని నేర్చుకోవడానికి చాలా సమయం పడుతుంది.దానివలన
దానిలో వున్న కంటెంట్ కంటే దానిని అందంగా చూపించడానికే ఎక్కువ సమయం కేటాయిస్తాము.

Perl లో module డాక్యుమెంటేషన్ సోర్స్ కోడ్ లోనే వ్రాసి అందంగా చూపించడానికి బయటి టూల్స్ మీద ఆదారపడతాము.

=abstract end
ఈ <a href="/perl-tutorial">Perl tutorials</a> ఎపిసోడ్ లో Perl డెవలపర్లు ఉపయోగించే mark-up లాంగ్వేజ్ ఐన <b>POD - Plain Old Documentation</b> గురించి తెలుసుకుందాం.

POD కలిగి ఉన్న Perl కోడ్ క్రింది విదంగా వుంటుంది:

<code lang="perl">
#!/usr/bin/perl
use strict;
use warnings;

=pod

=head1 DESCRIPTION

This script can have 2 parameters. The name or address of a machine
and a command. It will execute the command on the given machine and
print the output to the screen.

=cut

print "Here comes the code ... \n";
</code>

పైన ఉన్న స్క్రిప్ట్ ని <hl>script.pl</hl> అని సేవ్ చేసి, <hl>perl script.pl</hl> అని రన్ చెయ్యండి. Perl <hl>=pod</hl> నుండి <hl>=cut</hl> వరకూ ఉన్న లైన్స్ ని తీసుకోదు.
అసలైన కోడ్ ని మాత్రమే execute చేస్తుంది.

<hl>perldoc script.pl</hl> అని టైపు చేస్తే <b>perldoc</b> కమాండ్ కోడ్ ని విడిచిపెట్టి <hl>=pod</hl> నుండి <hl>=cut</hl> వరకు ఉన్న లైన్స్ ని తీసుకుని కొన్ని రూల్స్ ని పాటిస్తూ ఒక పద్ధతిలో స్క్రీన్ మీద చూపిస్తుంది.
ఆ రూల్స్ మీరు వాడె ఆపరేటింగ్ సిస్టం మీద ఆదారపడి ఉంటుంది, మనం ఇంతకుముందు <a href="/core-perl-documentation-cpan-module-documentation">standard documentation of Perl</a> లో చెప్పుకున్న విదంగానే వుంటుంది.

<h2>Too simple?</h2>

మనం obstacles ని తెసివేయడం వలన సులభంగా డాక్యుమెంట్ వ్రాయడానికి వుంటుంది. వర్డ్ ప్రాసెసర్ గురించి తెలుసుకొని దానిని నేర్చుకోవడానికి సమయం కేటాయించడం కంటే,
సింబల్ తో పాటు టెక్స్ట్ కలపడం వలన సులువుగా డాక్యుమెంట్ పొందగలం. ( <a href="http://metacpan.org/">Meta CPAN</a> డాక్యుమెంట్ PODs ని ఉపయోగించి చాలా బాగా చేసారు.)

<h2>The markup language</h2>

<a href="http://perldoc.perl.org/perlpod.html">POD markup language</a> గురించి అన్ని విషయాలు <a href="http://perldoc.perl.org/perlpod.html">perldoc perlpod</a> అని టైపు చేసి సులభంగా తెలుసుకోవచ్చు.

కొన్ని టాగ్స్ : <hl>=head1</hl> చాలా ముఖ్యమైన headers కోసం, <hl>=head2</hl> ప్రాధాన్యమైన headers కోసం, <hl>=over</hl> పేరాగ్రాఫ్ మొదలు పెట్టడానికి మరియు <hl>=item</hl> బుల్లెట్ పాయింట్స్ కోసం, ఇలా ఇంకొన్ని వున్నాయి.

<hl>=cut</hl> ని ఉపయోగించి POD సెక్షన్ ని ముగించవచ్చు మరియు <hl>=pod</hl> ని ఉపయోగించి మొదలుపెట్టవచ్చు,దీని తోటే మొదలుపెట్టాలని ఏమిలేదు.

ఏ స్ట్రింగ్ ఐనా <hl>=</hl> సైన్ తోటే మొదులుకుని POD మార్కప్ కల్గి వుంటుంది,<hl>=cut</hl> తో మాత్రమే ముగుస్తుంది.

POD L&lt;some-link> notation ని ఉపయోగించుకొని hyper-links ని చూపిస్తుంది.

markup parts మధ్యలో వున్న టెక్స్ట్ ని plain టెక్స్ట్ పేరాగ్రాఫ్ కింద చూపిస్తుంది.



If the text does not start on the first character of the row, it will be taken verbatim,
meaning they will look exactly as you typed them: long lines will stay
long lines and short lines will remain short. This is used for code examples.

An important thing to remember is that POD requires empty rows around the tags.
So

<code lang="perl">
=head1 Title
=head2 Subtitle
Some Text
=cut
</code>

won't do what you are expecting.

<h2>The look</h2>

As POD is a mark-up language it does not by itself define how things will be displayed.
Using an <hl>=head1</hl> indicates something important, <hl>=head2</hl> means something less important.

The tool that is used to display the POD will usually use bigger characters to display the
text of a head1 than that of a head2 which in turn will be displayed using bigger fonts than the regular
text. The control is in the hands of the display tool.

The <hl>perldoc</hl> command that comes with perl displays the POD as a man-page. It is quite useful on Linux.
Not so good on Windows.

The <a href="https://metacpan.org/module/Pod::Html">Pod::Html</a> module provides another command line tool called
<hl>pod2html</hl>. This can convert a POD to an HTML document you can view in a browser.

There are additional tools to generate pdf or mobi files from POD.

<h2>Who is the audience?</h2>

After seeing the technique, let's see who is the audience?

Comments (the thing that start with a # ) are explanations for
the maintenance programmer. The person who needs to add features
or fix bugs.

Documentation written in POD is for the users. People who should not
look at the source code. In case of an application those will be
so called "end users". That's anyone.

In case of Perl modules, the users are other Perl programmers who need
to build applications or other modules. They still should not
need to look at your source code. They should be able to use
your module just by reading the documentation via the
<hl>perldoc</hl> command.


<h2>Conclusion</h2>

Writing documentation and making it look nice is not that hard in Perl.



