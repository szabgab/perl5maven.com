=title Scalar and List context in Perl, the size of an array
=timestamp 2013-04-10T11:45:56
=indexes scalar, list, array, size, length, context, Perl
=status show
=books beginner_book
=author szabgab
=index 1
=archive 1
=feed 1
=comments 1
=social 1

=abstract start

En este capítulo de <a href="/perl-tutorial">Perl tutorial</a> vamos a analizar la <b>sensibilidad alcontexto</b> en Perl.

Tanto en Inglés como en Español, y en la mayoría de idiomas, las palabras pueden tener multiples significados.
Por ejemplo, en Inglés la palabra "left":

I left the building. # Sali del edificio

I turned left at the building. # Gire a la izquierda en el edificio

O en Español la palabra "banco":

Fui al banco a sacar dinero

Me sente en el banco del parque

Sabemos el significado correcto gracias al resto de frases alrededor de la palabra.
Es lo que llamaos contexto.

Perl 5 funciona de forma parecida. Las palabras, llamadas a funciones y otras dexpresiones tienen
difentes significados dependiendo del contexto. Esto hace más dificil aprender el lenguage pero también lo dota
de más expresividad.

=abstract end

Hay dos contextos principales en Perl: SCALAR y LIST.

<h2>Array in LIST context</h2>

Veamos un ejemplo:

<code lang="perl">
my @words = ('Foo', 'Bar', 'Baz');
my @names = @words;
</code>

Después de la asignación anterior <hl>@names</hl> contiene una copia de los valores que estaban en <hl>@words</hl>;

La asignación de un array en otro array copia el contenido de dicho array.

<h2>Array in SCALAR context</h2>

<code lang="perl">
my @words = ('Foo', 'Bar', 'Baz');
my $people =  @words;
</code>

Esta vez asignamos el array <hl>@words</hl> a la variable <hl>$people</hl>, que es una variable scalar.

Otros lenguajes se comportan de forma diferente, pero en Perl esta
asignación pone en $people <b>el número de elementos del array</b>.

Esto es arbitrario, y el caso anterior posiblemente no muy útil, pero en muchos otros casos este 
comportamiento puede ser muy útil.

<h2>SCALAR and LIST context</h2>

En contexto escalar se espera recibir un valor único mientras que en contexto de lista se
esperan multiples valores.
En el contexto de lista el número de valores puede ser 0, 1, 2 o cualquier otro número.


<h2>El contexto de la sentencia if</h2>

Observa este ejemplo:

<code lang="perl">
my @words = ('Foo', 'Bar', 'Baz');

if (@words) {
   say "Hay algunas palabras en el array";
}
</code>

Dentro de la condición de la sentencia <hl>if</hl> se espera
exactamente un valor. Esto debe ser contexto escalar.

Sabemos que el valor de un array en contexto ESCALAR es el número
de elementos que contiene. También sabemos que es cero (<a href="/boolean-values-in-perl">FALSO</a>)
cuando el array esta vacío, y un número positivo (<a href="/boolean-values-in-perl">VERDADERO</a>),
cuando el array tiene uno o más valores.

Debido a la decisión arbitraria anterior, el código<hl>if (@words)</hl>
comprueba si hay algun elemento en el array y devuelve falso si el array esta vacio.

Dandole la vuelta, la expresión <hl>if (! @words)</hl> será verdadera
si el array esta vacío.

<h2>Contextos ESCALAR y LISTA</h2>

En el <a href="/the-year-19100">episodio previo</a> vimos como <hl>localtime()</hl>
se comporta en contexto ESCALAR y en contexto LISTA, ahora vemos como se comporta un array en ambos contextos.

No hay una regla general sobre el contexto por lo que es necesario aprenderse los diferentes casos,
no obstante suelen ser bastante obvios. En cualquier caso, cuando consultes la documentación de una función en
<a href="/core-perl-documentation-cpan-module-documentation">perldoc</a>,
encontraras una explicación de su comportamiento en cada caso.
Al menos en los casos en los que los contextos ESCALAR y LISTA proporcionen diferentes resultados.

We should now look at a few more examples for expressions in Perl,
and what kind of context they create.
Veremoes algunos ejemplos más de expresiones en Perl y que tipo de contexto crean.

<h2>Creando contexto ESCALAR</h2>

Ya hemos visto que independientemente de lo que asignes a una variable escalar esa cosa estará en contexto ESCALAR.
Escribamoslo de la siguiente forma:

<code>
$x = SCALAR;
</code>

Because individual elements of an array are also scalars, assignment to them also creates SCALAR context:
Debido a que cada elemento de un array también es escalar, su asignación también crea contexto ESCALAR:

<code>
$word[3] = SCALAR;
</code>

La concatenación espera dos cadenas a cada lado por lo que crea contexto ESCALAR en ambos lados:

<code>
"string" . SCALAR;
</code>

y también

<code>
SCALAR . "string"
</code>

Por lo que

<code lang="perl">
my @words = ('Foo', 'Bar', 'Baz');
say "Number of elements: " . @words;
say "It is now " . localtime();
</code>

mostrará:

<code>
Number of elements: 3
It is now Thu Feb 30 14:15:53 1998
</code>

Los operadores numericos normalmente esperan dos numeros, dos escalares, a cada lado.
Por lo tanto dichos operadores crean contexto ESCALAR en cada lado:

<code>
5 + SCALAR;

SCALAR + 5;
</code>

<h2>Creando contexto LISTA</h2>

Hay otras construciones que crean contexto LISTA:

La asignación a un array es una de ellas:

<code>
@x = LIST;
</code>

Otra es la asignación a una lista:

<code>
($x, $y) = LIST;
</code>

Incluso si esa lista tiene un solo elemento:

<code>
($x) =  LIST;
</code>

Esto nos lleva a un asunto importante que nos puede confundir facilmente:

<h2>¿Cuando son los parentesis significativos?</h2>

<code lang="perl">
use strict;
use warnings;
use 5.010;

my @words = ('Foo', 'Bar', 'Baz');

my ($x) = @words;
my $y   = @words;

say $x;
say $y;
</code>

la salida es:

<code>
Foo
3
</code>

Este es uno de los pocos casos donde los parentesis son muy importantes.

En la primera asignación <hl>my ($x) = @words;</hl> asignamos
a una <b>lista</b> de variable(s) escalares.
Esto crea contexto LISTA en el lado derecho. Lo que implica que los <b>valores</b>
del array fueron copiados a la lista del lado izquierdo. Debido a que solo había
una variable escalar, solo el primer elemento del array fue copiado.

En la segunda asignación <hl>my $y   = @words;</hl> asignamos <b>directamente</b> a
una variable escalar. Esto crea contexto ESCALAR en el lado derecho. Un array en
contexto ESCALAR deveuelve el número de elementos en él.

<!--
Esto será muy importante cuando eches un vistazo a 
<a href="http://szabgab.com/subroutines-and-functions-in-perl.html">pasando parametros a funciones</a>
-->

<h2>Forzando contexto ESCALAR</h2>

Tanto <hl>print()</hl> como <hl>say()</hl> crean contexto LISTA para sus parametros.
¿Que ocurre si quieres mostrar el número de elementos en un array?
Y si quieres mostrar correctamente formateada la fecha devuelta por <hl>localtime()</hl>?

Probemos esto:

<code lang="perl">
use strict;
use warnings;
use 5.010;

my @words = ('Foo', 'Bar', 'Baz');

say @words;
say localtime();
</code>

La salida es:

<code>
FooBarBaz
3542071011113100
</code>
La primera línea es más o menos clara, son los valores del array juntos.

La segunda es confusa. NO es el mismo resultado que el resultado de la función <hl>time()</h1>,
como se podría pensar. Son los 9 números devueltos por la función <hl>localtime()</hl> en
contexto LISTA. Si no lo recuerda, echa un vistazo al capitulo acerca
<a href="/the-year-19100.html">del año 19100</a>.

La solución es usar la función <hl>scalar()</hl> que creará contexto ESCALAR para sus parámetros.
De hecho ese es el único proposito de la función <hl>scalar()</hl>.
#Some people might think about it as <b>casting</b> from plural to singular, even though I think this word is not used often in Perl-land.

<code lang="perl">
say scalar @words;
say scalar localtime();
</code>

Y la salida será

<code>
3
Mon Nov  7 21:02:41 2011
</code>

<h2>Dimensión de un array en Perl</h2>

In a nutshell, if you would like to get the size of an array in Perl you can use
En resumen, si quieres el tamaño de un array en Perl puedes usar
la funcion <hl>scalar()</hl> para forzar ESCALAR contexto y devolver su tamaño.

<h2>La forma difícil</h2>

Algunas veces puedes encontrar código como este:

<code lang="perl">
0 + @words;
</code>

Básicamente es un truco para conseguir el tamaño de un array. El operador <hl> + </hl>
crea contexto ESCALAR en ambos lados. Un array devolerá su tamaño en contexto ESCALAR.
Añadiendole 0 no cambia el número por lo que la expresión anterior devolerá el tamaño del array.

Recomiendo usar la función <hl>scalar</hl>, es una forma ligeramente más larga pero mucho
más clara de obtener el tamaño de un array.



