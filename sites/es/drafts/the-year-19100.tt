=title El año 19100
=timestamp 2013-04-04T12:45:17
=indexes time, localtime, gmtime, Time::HiRes, DateTime
=status show
=original The year of 19100
=books beginner_book
=author szabgab
=index 1
=archive 1
=feed 1
=comments 1
=social 1

=abstract start

Esta parte de <a href="/perl-tutorial">Perl Tutorial</a> explica <b>la fecha en Perl</b>.

Perl tiene incluida la función <hl>time()</hl> que devuelve un número de 10 dígitos
representando el número de segundos transcurridos desde el 1 de enero de 1970.

=abstract end

<code lang="perl">
$t = time();         # devuelve un numero como: 1021924103
</code>

Puedes usar este número como una marca de tiempo, por ejemplo para calcular el tiempo transcurrido.
Usando <hl>time()</hl> puedes guardar el número de segundos en un punto de tu código y
después llamar a <hl>time()</hl> de nuevo. Comparando el resultado de las dos llamadas:

<code lang="perl">
my $t = time();
# lots of code
say 'Tiempo transcurrido: ', (time() - $t);
</code>

<h2>localtime</h2>

La función <hl>localtime()</hl> puede recibir como parámetro
el resultado de la llamada a <hl>time()></hl>, el número de 10 dígitos, y convertirlo
en algo más sencillo de entender para las personas:

<code lang="perl">
my $then = localtime($t);  # devuelve una cadena del estilo  Thu Feb 30 14:15:53 1998
</code>

De hecho, ni si quiera es necesario un parámetro. Si se llama directamente sin
parámetros usará el valor devuelto por <hl>time()</hl>:

<code lang="perl">
my $now = localtime();    # devuelve la cadena para la fecha actual
</code>

Puedes almacenar diferentes marcas de tiempo generadas por <hl>time()</hl> y después
usarlas para calcular tiempos transcurridos, o convertirlas a algún formato más
legible para el usuario como vimos anteriormente.

<h2>EL otro localtime</h2>

¿Que sucede si realizamos la misma llamada a <hl>localtime($t)</hl> pero esta vez
asignamos el resultado a un array? ¿Esperarias obtener la misma cadena que antes
como primer elemento del array?

<code lang="perl">
my @then = localtime($t);
</code>

El contenido del array será:

<code>
53 15 14 30 1 98 4 61 0
</code>

¿Que son estos extraños números? Si miras detenidamente, te daras cuenta
de que el primer valor corresponde a los segundos, seguido de los minutos, horas y otros
números representando el mismo punto en el tiempo. La lista completa de valores es la siguiente:

<code lang="perl">
my ($sec ,$min, $hour, $mday, $mon, $year, $wday, $yday, $isdst) = localtime(time);
</code>
<code>
$sec   - segundos (0-59)
$min   - minutos (0-59)
$hour  - horas  (0-23)
$mday  - día del mes (1-31)
$mon   - mes (0-11) - 0 es Enero, 11 es Diciembre.
$year  - Año-1900
$wday  - día de la semana (0-6), 0 corresponde al Domingo y el 1 al Lunes
$yday  - día del año (0-364 o 0-365 para años bisiestos)
$isdst - 'horario de verano activado' verdadero si el horario de verano esta activado en tu ordenador.
</code>

Ten en cuenta que el mes 0 representa a Enero y el 11 a Diciembre.
En el día de la semana 0 es Domingo mientras que 6 es Sabado.

Por otro lado el campo representando al día del mes varía de 1 a 28, 30 o 31 dependiendo del mes.

El campo más problematico de todos puede ser el año que puede conducir fácilmente al bug del año 2000:

<h2>El bug del año 2000</h2>

Cuando en 1998 algunos programadores veian que <hl>$year</hl> era 98 y querían mostrar 1998
escribieron <hl>"19$year"</hl>. Funcionó entonces y también funciono en 1999, pero entonces llego
el año 2000 y <hl>$year</hl> se convirtio en 2000-1900 = 100. El texto formateado se convirtio en <b>19100</b>.

De ahí proviene el año 19100. Precisamente así se creo código con el infame
<b>bug del año 2000</b>.

Si hubieran leido la documentación deberían haber escrito:

<code>
1900 + $year
</code>

que es la forma correcta de obtener el número correspondiente a nuestra fecha en el
<a href="http://es.wikipedia.org/wiki/Calendario_gregoriano">calendario gregoriano</a>.
El calendario más usado en el mundo.

<h2>gmtime</h2>

Perl también dispone de la función <hl>gmtime()</hl> que hace lo mismo que <hl>localtime()</hl>,
pero siempre devuelve la hora de <a href="http://es.wikipedia.org/wiki/Greenwich">Greenwich</a>,
un barrio de Londres. ($isdst es siempre 0 en este caso.)

<h2>¿Como funciona realmente la hora?</h2>

Normalmente el reloj hardware de tu ordenador debería corresponder con la hora GMT
(<a href="http://es.wikipedia.org/wiki/GMT">tiempo medio de Greenwich</a>)
(o <a href="http://es.wikipedia.org/wiki/Coordinated_Universal_Time">UTC</a> que es más o menos lo mismo).

Tu sistema operativo (Windows, Linux, Mac OSX, Unix, etc.) debería saber la zona horaria que has
configurado, y si es horario de verano o no. <hl>localtime()</hl> usa estos valores
mientras que <hl>gmtime()</hl> simplemente usa el valor devuelto por el reloj hardware.

<h2>Hora de alta precisión</h2>

La función <hl>time()</hl> devuelve la fecha actual en segundos. Por lo que no puede
medir peridos inferiores a un segundo. Si necesitas más precisión hay un modulo
llamado <a href="https://metacpan.org/module/Time::HiRes">Time::HiRes</a> que puede
sustituir el uso de <hl>time()</hl>.

<code lang="perl">
use strict;
use warnings;
use 5.010;

use Time::HiRes qw(time);

say time;
</code>

Y la salida será:

<code>
1021924103.58673
</code>

<h2>DateTime</h2>

Las funciones anteriores proporcionan información básica sobre la hora y la fecha,
probablemente es mejor usar el modulo <a href="https://metacpan.org/module/DateTime">DateTime</a> para cualquier necesidad no trivial.

Le echarémos un vistado más adelante.

<h2>Conciencia del contexto</h2>

Todo lo anterior es importante, pero hay algo vital que nos hemos
saltado al ver la función <hl>localtime()</hl>.

Si observas el ejemplo de <hl>localtime()</hl>, verás que <hl>localtime()</hl>
de alguna manera sabe si el valor devuelto será asignado a una variable escalar o a un array y
devuelve un valor legible o la representación de 9 dígitos dependiendo del caso.

Esta es una característica general de Perl 5. Una característica muy importante, y aprenderemos
mucho más sobre ella. Lo importante es entender que en muchas situaciones Perl es <b>sensible al contexto</b>.



