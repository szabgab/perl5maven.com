=title Arrays en Perl
=timestamp 2013-08-08T18:55:02
=indexes @, array, arrays, length, size, foreach, Data::Dumper, scalar, push, pop, shift
=status show
=original perl-arrays
=books beginner_book
=author szabgab
=translator DavidEGx
=archive 1
=comments 1
=social 1

=abstract start

En este episodio de <a href="/perl-tutorial">Perl Tutorial</a> echaremos un vistazo a los <b>arrays en Perl</b>.
Esto es un pequeño resumen de como funcionan los arrays en Perl. Veremos explicaciones más detalladas en el futuro.

Los nombres de variables que contienen arrays en Perl empiezan con el carácter <hl>@</hl>.

Debido a nuestra insistencia del uso de <hl>strict</hl> tendrás que declarar estas variables usando <hl>my</hl>
antes del primer uso.

=abstract end

Recuerda que todos los ejemplos asumen que tu código comienza con

<code lang="perl">
use strict;
use warnings;
use 5.010;
</code>

Declarar un array:

<code lang="perl">
my @names;
</code>

Declarar y asignar valores:

<code lang="perl">
my @names = ("Foo", "Bar", "Baz");
</code>


<h2>Comprobar el contenido de un array</h2>

<code lang="perl">
use Data::Dumper qw(Dumper);

my @names = ("Foo", "Bar", "Baz");
say Dumper \@names;
</code>

La salida será:

<code>
$VAR1 = [
        'Foo',
        'Bar',
        'Baz'
      ];
</code>

<h2>El bucle foreach y los arrays en perl</h2>

<code lang="perl">
my @names = ("Foo", "Bar", "Baz");
foreach my $n (@names) {
  say $n;
}
</code>

Mostrará

<code>
Foo
Bar
Baz
</code>

<h2>Accediendo a un elemento de un array</h2>

<code lang="perl">
my @names = ("Foo", "Bar", "Baz");
say $names[0];
</code>

Ten en cuenta que al acceder a un solo elemento de un array la <hl>@</hl> inicial cambia a <hl>$</hl>.
Puede parecer confuso, pero si piensas en ello es bastante obvio el porqué.

<hl>@</hl> indica plural y <hl>$</hl> indica singular. Al acceder a un solo elemento
de un array se comporta simplemente como una variable escalar normal.

<h2>Indices en un array</h2>

Los indices en un array empiezan por 0. El indice superior es siempre la variable
<hl>$#name_of_the_array</hl>. Por tanto

<code lang="perl">
my @names = ("Foo", "Bar", "Baz");
say $#names;
</code>

Mostrará 2 porque los indices son 0, 1 y 2.

<h2>Tamaño de un array</h2>

En Perl no existe ninguna función especial para obtener el tamaño de un array,
pero hay varias formas de obtener su valor. Una es usar el indice
superior y sumarle 1. En el caso anterior, <hl>$#names+1</hl> es el <b>tamaño</b> del
array.

Además la función <hl>scalar</hl> también puede usarse para obtener el tamaño:

<code lang="perl">
my @names = ("Foo", "Bar", "Baz");
say scalar @names;
</code>

Mostrará 3.

La función scalar realiza una especie de conversión que, entre otras cosas, convierte un
array a escalar. Debido a una decisión arbitraria a la par que inteligente, esta 
conversión devuelve el tamaño del array.

<h2>Iterar sobre los indices de un array</h2>

Hay casos en los que recorrer los valores de un array no es suficiente ya que
podemos necesitar tanto el valor con el indice de ese valor.
En ese caso necesitamos iterar sobre los indices y obtener los valores a partir
de ellos:

<code lang="perl">
my @names = ("Foo", "Bar", "Baz");
foreach my $i (0 .. $#names) {
  say "$i - $names[$i]";
}
</code>

mostrará:

<code>
0 - Foo
1 - Bar
2 - Baz
</code>

<h2>Añadir un elemento a un array</h2>

La función <hl>push</hl> añade un nuevo valor al final de un array:

<code lang="perl">
my @names = ("Foo", "Bar", "Baz");
push @names, 'Moo';

say Dumper \@names;
</code>

El resultado será:

<code>
$VAR1 = [
        'Foo',
        'Bar',
        'Baz',
        'Moo'
      ];
</code>


<h2>Extraer elementos de un array</h2>

La función <hl>pop</hl> extrae el último elemento de un array:

<code lang="perl">
my @names = ("Foo", "Bar", "Baz");
my $last_value = pop @names;
say "Last: $last_value";
say Dumper \@names;
</code>

El resultado será:

<code>
Last: Baz
$VAR1 = [
        'Foo',
        'Bar',
      ];
</code>

<h2>Añadir un elemento al principio de un array</h2>
La función <hl>unshift</hl> añadirá un elemento al principio del
array y moverá el resto hacia la derecha.

<code lang="perl">
my @names = ("Foo", "Bar", "Baz");
unshift @names, "Moo";

say Dumper(\@names);

Mostrará:

<code>
$VAR1 = [
        'Moo',
        'Foo',
        'Bar',
        'Baz'
      ];
</code>

<h2>Extraer el primer elemento de un array</h2>

La función <hl>shift</hl> extraerá el primer elemento del array
y moverá el resto hacia la izquierda.

<code lang="perl">
my @names = ("Foo", "Bar", "Baz");

my $first_value = shift @names;
say "First: $first_value";
say Dumper \@names;
</code>

El resultado será:

<code>
First: Foo
$VAR1 = [
        'Bar',
        'Baz',
      ];
</code>

