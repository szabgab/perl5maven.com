=title Las 19 herramientas fundamentales para manipular el sistema de archivos en Perl 5
=timestamp 2012-07-19T12:45:56
=indexes cwd, tempdir, catfile, catdir, dirname, FindBin, $Bin, File::Spec, File::Basename, File::Temp, Cwd
=status draft
=author szabgab
=translator enrique
=original the-most-important-file-system-tools
=archive 1
=comments 1
=social 1


=abstract start

Cuando escribo scripts Perl para manipular el sistema de archivos suelo tener que cargar muchos módulos.
Gran parte de las funciones que necesito están dispersas en distintos módulos. Algunas son funciones integradas de perl, otras se encuentran en módulos estándar incluidos en perl, y otras deben instalarse desde CPAN.

Voy a describir las 19 herramientas que más uso.

=abstract end

<h2>Ruta actual</h2>

A menudo tengo que determinar en qué directorio me encuentro. El módulo <b>Cwd</b> incluye una función con el mismo nombre, pero escrito en minúsculas (<b>cwd</b>), que devuelve el <b>directorio de trabajo actual</b>.

<img src="/img/Hdd_icon.svg" style="float: right" />

<code lang="perl">
use strict;
use warnings;

use Cwd qw(cwd);

print cwd, "\n";
</code>


<h2>Directorio temporal</h2>

Muchas veces tengo que crear unos cuantos archivos temporales y quiero asegurarme de que se eliminen automáticamente cuando finalice el script. La manera más sencilla de hacer esto es crear un directorio temporal mediante la función <b>tempdir</b> de <b>File::Temp</b>, con la opción CLEANUP activada.


<code lang="perl">
use strict;
use warnings;
use autodie;

use File::Temp qw(tempdir);

my $dir = tempdir( CLEANUP => 1 );

print "$dir\n";

open my $fh, '>', "$dir/un_archivo.txt";
print $fh "texto";
close $fh;
</code>


<h2>Ruta independiente del sistema operativo</h2>

Aunque el código anterior funciona tanto en Linux como en Windows, en Windows se suelen usar barras diagonales inversas para separar las partes de una ruta. Además, en VMS no funcionará.
Creo. Para evitar problemas, podemos usar la función <b>catfile</b> de <b>File::Spec::Functions</b>:

<code lang="perl">
use strict;
use warnings;

use File::Spec::Functions qw(catfile);

use File::Temp qw(tempdir);

my $dir = tempdir( CLEANUP => 1 );

print "$dir\n";
print catfile($dir, 'un_archivo.txt'), "\n";
</code>

Prueba este código. Verás el nombre del directorio temporal y el archivo anexado al final.

<h2>Cambiar de directorio</h2>

A veces es más fácil cambiar primero el directorio de trabajo a un directorio temporal y trabajar en dicho directorio. Puede ocurrir a menudo al escribir pruebas, pero también en otros casos. Para esto, podemos usar la función predefinida <b>chdir</b>.


<code lang="perl">
use strict;
use warnings;
use autodie;

use File::Temp qw(tempdir);
use Cwd;

my $dir = tempdir( CLEANUP => 1 );
print cwd, "\n";
chdir $dir;
print cwd, "\n";

open my $fh, '>', 'temp.txt';
print $fh, 'texto';
close $fh;
</code>

Esto podría funcionar, pero cuando File::Temp intenta quitar el directorio, seguiremos "dentro", ya que lo hemos convertido en el directorio de trabajo.

Aparecerá un mensaje de error similar al siguiente:

<code>
cannot remove path when cwd is /tmp/P3DZP_rmqg for /tmp/P3DZP_rmqg:
</code> (no se puede quitar la ruta cuando cwd es /tmp/P3DZP_rmqg para /tmp/P3DZP_rmqg)

Para evitar que esto ocurra, suelo guardar la ruta devuelta por <b>cwd</b> antes de cambiar de directorio, y al final vuelvo a llamar a <b>chdir</b>:


<code lang="perl">
my $original = cwd;

...

chdir $original;
</code>

Sin embargo, esto presenta un pequeño problema. ¿Qué ocurre si tengo que llamar a <b>exit()</b> en la mitad del script o si algo desencadena una excepción que finaliza el script antes de que llegue a <b>chdir $original</b>?

Perl nos permite solucionarlo encapsulando la última función chdir en un bloque <b>END</b>.
Esto garantizará la ejecución del código independientemente de cuándo y cómo se salga del script.

<code lang="perl">
my $original = cwd;

...

END {
    chdir $original;
}
</code>


<h2>Ruta relativa</h2>

Al desarrollar un proyecto con varios archivos (p. ej., uno o más scripts, algunos módulos, puede que algunas plantillas, etc.), si no deseo "instalarlos", la mejor estructura de directorios es asegurarse de que todo está en un lugar fijo <b>con respecto</b> a los scripts.

Por esta razón, generalmente tengo un directorio de proyecto que contiene un subdirectorio para scripts, otro para módulos (lib), otro para plantillas, etc.:

<code>
proyecto/
     scripts/
     lib/
     plantillas/
</code>

¿Cómo puedo asegurarme de que los scripts encuentren las plantillas? Para esto hay varias soluciones:


<code lang="perl">
use strict;
use warnings;
use autodie;

use FindBin qw($Bin);
use File::Basename qw(dirname);
use File::Spec::Functions qw(catdir);

print $Bin, "\n";                                # /home/foobar/Lanzador-Cohetes/scripts
print dirname($Bin), "\n";                       # /home/foobar/Lanzador-Cohetes
print catdir(dirname($Bin), 'templates'), "\n";  # /home/foobar/Lanzador-Cohetes/templates
</code>

La variable <b>$bin</b> exportada por el módulo <b>FindBin</b> contendrá la ruta de acceso al directorio del script actual. En este caso, la ruta al directorio proyecto/scripts/.

La función <b>dirname</b> de <b>File::Basename</b> consume una ruta y devuelve esa ruta sin la parte final.

La última línea contiene la función <b>catdir</b> de <b>File::Spec::Functions</b>, que es básicamente análoga a la función catfile que vimos antes.

En lugar de imprimir en pantalla usamos el valor devuelto por catdir para especificar las plantillas.

<h2>Cargar módulos desde una ruta relativa</h2>

Se aplica prácticamente lo mismo a la búsqueda y carga de los módulos que se encuentran en el directorio lib/ del proyecto. Para ello combinamos el código anterior con el pragma <b>lib</b>. Eso cambiará el contenido de la variable <b>@INC</b>, agregando la ruta relativa al principio del array.

<code lang="perl">
use strict;
use warnings;
use autodie;

use FindBin qw($Bin);
use File::Basename qw(dirname);
use File::Spec::Functions qw(catdir);

use lib catdir(dirname($Bin), 'lib');

use Lanzador::Cohetes;
</code>

Aquí supongo que tienes un archivo lib/Lanzador/Cohetes.pm


<h2>¿Dónde están las demás herramientas?</h2>

Podría explayarme más, pero creo que ya es suficiente como primera parte de esta serie.
Si no quieres perderte los demás artículos, <a href="/register">suscríbete a este boletín</a>. Es gratis.



<a href="http://commons.wikimedia.org/wiki/File:Hdd_icon.svg">Origen de imagen</a>

