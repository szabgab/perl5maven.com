=title El operador ternario en Perl
=timestamp 2014-02-17T13:45:56
=indexes ?:
=status show
=original the-ternary-operator-in-perl
=books beginner_book
=author szabgab
=translator davidegx
=archive 1
=comments 1
=social 1

=abstract start

El operador ternario es probablemente uno de los operadores más tristes en el mundo. El resto de los operadores tienen
nombres como suma, negación unaria, negación binaria, pero este es nombrado solo por su sintaxis.

Como en la mayoría de lenguajes de programación es el único operador con 3 parámetros, mucha gente no conoce su nombre real.
Cuando fue creado se llamó <a href="http://en.wikipedia.org/wiki/%3F:">operador condicional </a>.

=abstract end

<h2>Operadores unarios, binarios y ternarios</h2>

Un operador unario tiene un solo operando (-3).

Un operador binario tiene dos operandos (2-3) o (4+5).

Un operador ternario tiene tres operandos.

<h2>El operador condicional</h2>

En Perl 5, como en la mayoría de lenguajes de programación, el <b>operador condicional</b> tiene 3 partes separadas por <hl>?</hl> y <hl>:</hl>.

La primera parte, antes de <hl>?</hl> es la condición. Es evaluada en contexto booleano.
Si es <a href="/valores-booleanos-en-perl.tt">verdadera</a>, la segunda parte, entre <hl>?<hl> y <hl>:</hl>
será evaluada y ese será el resultado de la expresión.
En caso contrarío la tercera parte será evaluada y ese será el valor de la expresión.

En general es similar a:

<code>
CONDICION ? EVALUAR_SI_CONDICION_ES_VERDADERO : EVALUAR_SI_CONDICION_ES_FALSO
</code>

Que básicamente es lo mismo que

<code>
if (CONDICION ) {
CONDITION
    EVALUAR_SI_CONDICION_ES_VERDADERO;
} else {
    EVALUAR_SI_CONDICION_ES_FALSO;
}
</code>

<h2>Ejemplos</h2>

Veamos algunos ejemplos:

<code lang="perl">
use strict;
use warnings;
use 5.010;

my $file = shift;

say $file ? $file : "archivo no proporcionado"; 
</code>

Si <hl>$file</hl> es verdadero (el usuario proporciono el nombre del fichero en la línea de comandos), mostrará el nombre en la línea de comandos.
En caso contrario mostrará "archivo no proporcionado".

<code lang="perl">
my $x = rand();
my $y = rand();

my $smaller = $x < $y ? $x : $y;
say $smaller
</code>

En este ejemplo el valor más pequeño es almacenado en <hl>$smaller</hl>.

<h2>Estableciendo un limite</h2>

Por ejemplo si nuestro código recibe algún valor por una función llamada <hl>get_value()</hl>, pero queremos
estar seguro de que no excede un limite determinado:

<code lang="perl">
my $MAX_LIMIT = 10;

my $value = get_value();
$value = $value <= $MAX_LIMIT ? $value : $MAX_LIMIT;
</code>

También podríamos escribir esto de otra forma:

<code lang="perl">
$value = $MAX_LIMIT if $value > $MAX_LIMIT;
</code>


