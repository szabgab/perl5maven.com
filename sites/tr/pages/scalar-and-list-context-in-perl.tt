=title Perlde scalar ve list bağlam, bir dizinin boyutu
=timestamp 2013-12-13T20:47:56
=indexes scalar, list, array, size, length, context, Perl
=status show
=original scalar-and-list-context-in-perl
=books beginner_book
=author szabgab
=translator kbeyazli
=archive 1
=comments 1
=social 1

=abstract start

<a href="/perl-tutorial">Perl dersimizin</a> bu bölümünde Perlde <b>bağlam duyarlılığını</b>
göreceğiz.

İngilizcede diğer birçok konuşma dilinde olduğu gibi kelimelerin birden çok anlamı vardır.
Mesela "left" kelimesi birçok anlam içerir:

I left the building.

I turned left at the building.

Cümlede kullanılışına göre kelimenin doğru anlamının ne olduğunu anlarız.
Buna bağlam denir.

Perl 5 de buna benzer. Kelimeler, fonksiyon çağrıları ve diğer ifadeler bağlama 
göre farklı anlam içerir. Bu durum öğrenmeyi zorlaştırır, ama daha fazla
anlamlılık sağlar.

=abstract end

Perl dilinde 2 önemli bağlam vardır: SCALAR ve LIST bağlam.

<h2>LIST bağlamda dizi</h2>

Bir örnek verelim:

<code lang="perl">
my @words = ('Foo', 'Bar', 'Baz');
my @names = @words;
</code>

Yukaridaki atama sonrası <hl>@names</hl> dizisi <hl>@words</hl> dizi değerlerinin kopyasını içerir;

Bir diziyi başka bir diziye atama işlemi dizinin içeriğini diğer diziye kopyalar.

<h2>SCALAR bağlamda dizi</h2>

<code lang="perl">
my @words = ('Foo', 'Bar', 'Baz');
my $people =  @words;
</code>

Bu kez <hl>@words</hl> dizisini <hl>$people</hl> adlı scalar bir değişkene atadık.

Diğer diller farklı davranabilir ama Perl dilinde
bu atama işlemi <b>dizinin eleman sayısını</b>
scalar değişkene kopyalar.

Bu işlem isteğe bağlıdır ve yukarıdaki kullanımın faydalı olduğu da söylenemez ama bu işlemin çok
faydalı olduğu birçok başka durum vardır.

<h2>SCALAR ve LIST bağlam</h2>

Yukarıda SCALAR and LIST bağlamdan bahsettik. Anlam olarak tek bir değer (SCALAR bağlam) 
veya birden fazla değeri (LIST context) içermektedir.
LIST bağlamda sayı değerleri 0, 1, 2 veya başka bir rakam olabilir.

<h2>if ifadesi bağlamı</h2>

Aşağıdaki örneğe bakalım:

<code lang="perl">
my @words = ('Foo', 'Bar', 'Baz');

if (@words) {
   say "There are some words in the array";
}
</code>

<hl>if</hl> ifadesinin koşul kısmında
bir değer bekliyoruz. Bu durumda beklenen SCALAR bağlam olmalı.

Şu an bir dizinin SCALAR bağlamdaki değerinin eleman sayısı olduğunu biliyoruz.
Ayrıca eğer ki dizi boş ise bu değerin 0 (that is <a href="/boolean-values-in-perl">FALSE</a>)
olduğunu, 1 veya daha fazla eleman içeriyor ise pozitif bir sayı (that is <a href="/boolean-values-in-perl">TRUE</a>)
olduğunu da biliyoruz.

Yukarıda bahsedilen durumlardan dolayı, <hl>if (@words)</hl> kod ifadesi
dizide herhangi bir eleman olup olmadığını kontrol eder ve dizi boş ise koşul sağlanmamış olur.

if-koşulunu <hl>if (! @words)</hl> şekline çevirmemiz durumunda dizi
boş ise true dönecektir.

<h2>SCALAR and LIST bağlam</h2>

Bir <a href="/the-year-19100">önceki bölümde</a> <hl>localtime()</hl> ifadesinin 
SCALAR ve LIST bağlamda nasıl davrandığını, şimdi ise bir dizinin SCALAR and LIST bağlamda nasıl davrandığını gördük.

Bağlam hakkında genel bir kural yoktur, özel durumları öğrenmek zorundasınız
ama genellikle bunlar çok açıktır. Herhangi bir durumda <a href="/core-perl-documentation-cpan-module-documentation">perldoc</a>
kullanan bir fonksiyona bakıyor iseniz, bu fonksiyonların her biri
için bir açıklama göreceksiniz.
En azından SCALAR ve LIST bağlamların farklı sonuçlar verdiği durumlarda.

Şimdi daha fazla Perl ifadelerine ve ne tip
bağlam oluşturduklarına bakalım.

<h2>SCALAR bağlam oluşturmak</h2>

Herhangi scalar bir değişkene ne atamasi yapar iseniz yapın bunun SCALAR bir bağlam içereceğini gördük.
Bunu aşağıda açıklayalım:

<code>
$x = SCALAR;
</code>

Dizinin her bir elemanı scalar olduğundan, bunlara yapılan atamalar SCALAR bağlam oluşturur:

<code>
$word[3] = SCALAR;
</code>

Birleştirme operatörü her iki tarafında string beklediği için aşağıdaki 2 durumda da SCALAR bağlam oluşturur:

<code>
"string" . SCALAR;
</code>

ve ayrıca

<code>
SCALAR . "string"
</code>

Bu nedenle aşağıdaki kod parçası

<code lang="perl">
my @words = ('Foo', 'Bar', 'Baz');
say "Number of elements: " . @words;
say "It is now " . localtime();
</code>

ekrana aşağıdakini yazacaktır

<code>
Number of elements: 3
It is now Thu Feb 30 14:15:53 1998
</code>

Sayısal operatörler genellikle 2 sayı bekler - her iki tarafta - 2 scalar.
Bu yüzden sayısal operatörler her iki taraftan SCALAR bağlam oluştururlar.

<code>
5 + SCALAR;

SCALAR + 5;
</code>

<h2>LIST bağlam oluşturma</h2>

LIST bağlam oluşturmak için bazı yaplar vardır:

Diziye atama yapmak bunlardan biridir:

<code>
@x = LIST;
</code>

Bir listeye atama yapmak diğer bir yoldur:

<code>
($x, $y) = LIST;
</code>

Bu liste tek bir eleman içerse dahi durum aynıdır:

<code>
($x) =  LIST;
</code>

Bu insanları aldatmak için bize önemli bir ozellik sağlar:

<h2>Parantezler ne zaman önemlidir?</h2>

<code lang="perl">
use strict;
use warnings;
use 5.010;

my @words = ('Foo', 'Bar', 'Baz');

my ($x) = @words;
my $y   = @words;

say $x;
say $y;
</code>

Ekran çıktısı:

<code>
Foo
3
</code>

Bu, parantezlerin önemli olduğu nadir durumlardan biridir.

İlk atama olan <hl>my ($x) = @words;</hl> ifadesinde bir <b>liste</b>ye
scalar değişken(ler)i atadık.
Bu işlem bize sağ tarafta LIST bağlam oluşturdu. Yani dizinin <b>değerleri</b>
sol taraftaki listeye kopyalandı. Sadece bir scalar olduğundan, dizinin ilk elemanı
kopyalandı, diğerleri kopyalanmadı.

İkinci atama olan <hl>my $y = @words;</hl> ifadesinde <b>direkt</b> scalar
bir değişkene atama yaptık. Bu işlem bize sağ tarafta SCALAR bağlam oluşturdu. 
SCALAR bağlamda bir dizi eleman sayısını döndürür.

Bahsedilen bu durum <a href="/subroutines-and-functions-in-perl">fonksiyona parametre geçmek</a>
konusuna geçtiğinizde çok önemli olacak.

<h2>SCALAR bağlama zorlamak</h2>

Hem <hl>print()</hl> hem de <hl>say()</hl> parametreleri için LIST bağlam oluştururlar.
Peki bu durumda bir dizideki eleman sayısını ekrana basmak icin ne yazılması gerekiyor?
Ya da <hl>localtime()</hl> fonksiyonundan dönen formatlı tarihi ekrana basmak isterseniz?

Asağidakini deneyelim:

<code lang="perl">
use strict;
use warnings;
use 5.010;

my @words = ('Foo', 'Bar', 'Baz');

say @words;
say localtime();
</code>

Çıktı şu şekilde oluşur

<code>
FooBarBaz
3542071011113100
</code>
İlkinin anlaşılması bir şekilde mümkün, bunlar dizideki değerlerin gelişi güzel yazılmış halidir.

İkinci ise daha karmaşıktır. Bu sonuc <hl>time()</hl> fonksiyonundan dönen değer ile aynı
değildir. Bu aslında <hl>localtime()</hl> fonksiyonundan LIST bağlamda dönen 9 
rakamdır. Hatırlamıyorsanız <a href="/the-year-19100">the year of 19100</a> adlı 
bölümü inceleyebilirsiniz.

Çözümü SCALAR bağlamda veri döndüren <hl>scalar()</hl> fonksiyonunu kullanmaktır.
Aslında bu <hl>scalar()</hl> fonksiyonunun yaptığı tüm iş denebilir. Her ne kadar bu kelimenin
perl dünyasında sıkça kullanılmadığını düşünsem de, bazı insanlar bu fonksiyonu
çoğul ifadeyi tekile dönüştüren <b>casting</b> gibi düşünebilir. 
<code lang="perl">

say scalar @words;
say scalar localtime();
</code>

Çıktı aşağıdaki gibi olacaktır:

<code>
3
Mon Nov  7 21:02:41 2011
</code>

<h2>Perlde bir dizinin uzunluğu veya boyutu</h2>

Perlde bir dizinin boyutunu almak isterseniz SCALAR bağlama zorlayan ve boyutunu döndüren
<hl>scalar()</hl> fonksiyonunu kullanabilirsiniz.

<h2>Hileli metod</h2>

Bazen aşağıdaki gibi kod görebilirsiniz:

<code lang="perl">
0 + @words;
</code>

Bu dizinin boyutunu almanın hileli bir yöntemidir. <hl> + </hl> operatörü 
her iki tarafta da scalar bağlam oluşturur. Bir dizi boyutunu SCALAR bağlamda döndürecektir.
0 eklemek rakamı değiştirmez, bu nedenle yukarıdaki ifade dizinin boyutunu döndürür.

<hl>scalar</hl> fonksiyonunu kullanarak biraz daha uzun ama daha net yazmanızı öneririm.

