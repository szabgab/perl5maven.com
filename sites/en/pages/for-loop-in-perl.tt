=title The for loop in Perl
=timestamp 2013-03-26T08:46:13
=indexes for, foreach, loop, infinite loop
=status show
=books beginner_book
=author szabgab
=archive 1
=comments 1
=social 1

=abstract start

In this part of the <a href="/perl-tutorial">Perl Tutorial</a> we are going to talk
about the <b>for loop in Perl</b>. Some people also call it the <b>C-style for loop</b>,
but this construct is actually available in many programming languages.

=abstract end

<h2>Perl for loop</h2>

The <b>for</b> keyword in Perl can work in two different ways.
It can work just as a <b>foreach</b> loop works and it can act
as a 3-part C-style for loop. It is called C-style though
it is available in many languages.

I'll describe how this works although I prefer to write the <hl>foreach</hl>
style loop as described in the section about <a href="/perl-arrays">perl arrays</a>.

The two keywords <hl>for</hl> and <hl>foreach</hl> can be used as synonyms.
Perl will work out which meaning you had in mind.

The <b>C-style for loop</b> has 3 parts in the controlling section.
In general it looks like this code, though you can omit any of
the 4 parts.

<code lang="perl">
for (INITIALIZE; TEST; STEP) {
  BODY;
}
</code>

As an example see this code:

<code lang="perl">
for (my $i=0; $i <= 9; $i++) {
   print "$i\n";
}
</code>

The INITIALIZE part will be executed once when the execution reaches that point.

Then, immediately after that the TEST part is executed. If this is false,
the whole loop is skipped. If the TEST part is true then the BODY is executed followed by
the STEP part.

(For the real meaning of TRUE and FALSE, check the <a href="/boolean-values-in-perl">boolean values in Perl</a>.)

Then comes the TEST again and it goes on and on, as long as the TEST executes to some true value.
So it looks like this:

<code>
INITIALIZE

TEST
BODY
STEP

TEST
BODY
STEP

...

TEST
</code>


<h2>foreach</h2>

The above loop - going from 0 to 9 can be also written in a <b>foreach loop</b>
and I think the intention is much clearer:

<code lang="perl">
foreach my $i (0..9) {
  print "$i\n";
}
</code>

As I wrote the two are actually synonyms so some people use the <hl>for</hl> keyword
but write <b>foreach style loop</b> like this:

<code lang="perl">
for my $i (0..9) {
  print "$i\n";
}
</code>

<h2>The parts of the perl for loop</h2>

INITIALIZE is of course to initialize some variable. It is executed exactly once.

TEST is some kind of boolean expression that tests if the loop should stop or if it should go on.
It is executed at least once. TEST is executed one more time than either BODY or STEP are.

BODY is a set of statements, usually that's what we want to do repeated
times though in some cases an empty BODY can also makes sense.
Well, probably all those cases can be rewritten in some nice way.

STEP is another set of action usually used to increment or decrement some kind of an index.
This too can be left empty if, for example, we make that change inside the BODY.

<h2>Infinite loop</h2>

You can write an infinite loop using the <b>for loop</b>:

<code lang="perl">
for (;;) {
  # do something
}
</code>

People usually write it with a <hl>while</hl> statement such as:

<code lang="perl">
while (1) {
  # do something
}
</code>

It is described in the part
about the <a href="/while-loop">while loop in perl</a>.

<h2>perldoc</h2>

You can find the official description of the for-loop in the
<b>perlsyn</b> section of the
<a href="http://perldoc.perl.org/perlsyn.html#For-Loops">Perl documentation</a>.



