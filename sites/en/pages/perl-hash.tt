=title Perl Hash
=timestamp 2013-08-03T23:12:06
=indexes hash
=status show
=books beginner_book
=author szabgab
=archive 1
=comments 1
=social 1

=abstract start

Hash tables that are called <b>associative arrays</b>, <b>hashmaps</b> or <b>dictionaries</b> in other languages
are an integral and important part of Perl. On this page we try to answer some common questions about hashes.

=abstract end

<h2>Perl Hash table tutorial</h2>

A hash in Perl always starts with a percentage sign: <hl>%</hl>. When accessing an element of a hash
we replace the <hl>%</hl> by a  dollar sign <hl>$</hl> and put curly braces <hl>{}</hl> after the name.
Inside the curly braces we put the <hl>key</hl>.

A hash is an <hl>unordered set of key-value pairs</hl> where the keys are unique.

A <hl>key</hl> can be any string including numbers that are automatically converted to strings.
A <hl>value</hl> can be any scalar value: number, string, or a reference.

The key is a string, but when it is a "simple string" you can leave out the quote characters when used
on the left hand side of the fat-arrow, or in the curly braces.

<code lang="perl">
use strict;
use warnings;
use 5.010;

my %person = (
   fname => 'Foo',
   lname => 'Bar',
);
say $person{'fname'};  # Foo
say $person{fname};    # Foo
my $key = 'fname';
say $person{$key};     # Foo
</code>


<h2>Perl Hash of arrays</h2>

Each value in the following hash is an array, or more specifically it is a reference to an array.

<code lang="perl">
use strict;
use warnings;
use 5.010;
use Data::Dumper qw(Dumper);

my %grades;
$grades{'Foo Bar'}[0] = 23;
$grades{'Foo Bar'}[1] = 42;
$grades{'Foo Bar'}[2] = 73;
$grades{'Peti Bar'}[0] = 10;
$grades{'Peti Bar'}[1] = 15;
print Dumper \%grades;

$grades{'Zorg'} = [10, 20, 30, 40];

print Dumper \%grades;
</code>

In the first 5 lines we access the elements of the internal arrays as if we had a two-dimensional data structure.
In the last assignment we assign an array reference <hl>[10, 20, 30, 40]</hl> to Zorg.

<hl>Data::Dumper</hl> can show the data structure in a reasonably readable way:

<code>
$VAR1 = {
          'Foo Bar' => [
                         23,
                         42,
                         73
                       ],
          'Peti Bar' => [
                          10,
                          15
                        ]
        };
$VAR1 = {
          'Foo Bar' => [
                         23,
                         42,
                         73
                       ],
          'Peti Bar' => [
                          10,
                          15
                        ],
          'Zorg' => [
                      10,
                      20,
                      30,
                      40
                    ]
        };
</code>


<h2>Perl Hash of arrays of arrays</h2>

<code lang="perl">
</code>

<h2>Perl Hash reference</h2>

<code lang="perl">
use strict;
use warnings;
use 5.010;
use Data::Dumper qw(Dumper);

my %phones = (
   Foo => '1-234',
   Bar => '1-456',
);
my $hr = \%phones;

say $phones{Foo};  # 1-234
say $hr->{Foo};    # 1-234

print Dumper $hr;

foreach my $name (keys %$hr) {
   say "$name $hr->{$name}";
}

my $other_ref = {
   Qux => '1-567',
   Moo => '1-890',
};

say $other_ref->{Qux};   # 1-567
print Dumper $other_ref;
</code>

<code>
1-234
1-234
$VAR1 = {
          'Foo' => '1-234',
          'Bar' => '1-456'
        };
Foo 1-234
Bar 1-456
1-567
$VAR1 = {
          'Qux' => '1-567',
          'Moo' => '1-890'
        };
</code>


<h2>Perl Hash table</h2>
<h2>Perl Hash key</h2>
<h2>Perl Hash exists</h2>
<h2>Perl Hash size</h2>
<code lang="perl">
use strict;
use warnings;

#Program to find the size of a hash

#In this hash, keys contain multiple words (i.e 2 words)
#so you need to enclose it in quotes. If the key contains
#only a single word, then quotes are optional and it is
#recommended to omit quotes for keys

my %india = (
    'National Bird'   => 'Peacock',
    'National Animal' => 'Tiger',
    'National Flower' => 'Lotus',
    'National Fruit'  => 'Mango',
    'National Tree'   => 'Banyan',
    'National Game'   => 'Hockey'
);

#The keys function in scalar context returns the number of keys in the hash.
my $size = keys %india;

print "The size of the hash is $size\n";
</code>
<h2>Perl Hash map</h2>
<h2>Perl Hash slice</h2>

<code lang="perl">
</code>

<h2>Size of an array in a hash</h2>

<h2>Number of elements of an array in a hash</h2>

