=title How to get the size of a file in Perl
=timestamp 2015-01-07T10:30:01
=indexes -s, stat, File::stat
=status show
=author szabgab
=comments_disqus_enable 1

=abstract start

Given a path to e file in a variable <hl>my $filename = "path/to/file.png";</hl>  the easiest thing is to use the
<hl>-s</hl> operator to retrieve the size of the file: <hl>my $size = -s $filename;</hl>

=abstract end

<code lang="perl">
use strict;
use warnings;
use 5.010;

my $filename = "/etc/passwd";
my $size = -s $filename;
say $size;
</code>

<without any functions>
#!/usr/bin/perl

@files = `ls`;
chomp @files;
foreach $file (@files)
{
        $size{$file}= (-s "$file");
}

foreach $file (keys %size)
{
        print "$file - $size{$file} \n";
}

@files_sortbysize = sort {$size{$a} <=> $size{$b}} (keys %size);
print "$files_sortbysize[0] - $size{$files_sortbysize[0]}\n";

print "$files_sortbysize[$#files_sortbysize]-$size{$files_sortbysize[$#files_sortbysize]}\n";

$sum=0;
foreach $file (keys%size)
{
        $sum = $sum + $size{$file};
}
$sizemb = $sum/(1024*1024);
print "all files size is -$sizemb MB \n";


<h2>stat function</h2>

Alternatively the <hl>stat</hl> built-in function of perl returns a 13-element list providing information about the
status of the file. The 8th element (index 7) is the size of the file.


<code lang="perl">
use strict;
use warnings;
use 5.010;

my $filename = "/etc/passwd";
my @stat = stat $filename;
say $stat[7];
</code>

<h2>Fetch list element on-the-fly</h2>

Of course you don't have to assign the return value of the <hl>stat</hl> function to an array.
We can fetch the element on-the-fly by putting parentheses around the whole expression and then putting
the element index after that in square bracket: <hl>(stat $filename)[7];</hl>

<code lang="perl">
use strict;
use warnings;
use 5.010;

my $filename = "/etc/passwd";
my $size = (stat $filename)[7];
say $size;
</code>

We don't even need the <hl>$size</hl> variable for that, but we cannot simply write 
<hl>say (stat $filename)[7];</hl> or <hl>print (stat $filename)[7];</hl>.

The reason is that in this case perl will think the parentheses are part of the <hl>say</hl>
or <hl>print</hl> function and the <hl>[7]</hl> is an index on the return value of <hl>say</hl>
or <hl>print</hl>.

We can solve this by either adding the real parentheses of the <hl>say/print</hl> functions, or
by adding a <hl>+</hl> sign in-front of the parentheses:

<code lang="perl">
use strict;
use warnings;
use 5.010;

my $filename = "/etc/passwd";
say ((stat $filename)[7]);
say +(stat $filename)[7];
</code>


<h2>Object Oriented</h2>

Probably the most readable of all the solutions is the one using the <a href="https://metacpan.org/pod/File::stat">File::stat</a> module.
It provides a replacement for the <hl>stat</hl> function of perl that will return an object which has, among several others, a method
called <hl>size</hl> that will return the size of the file.

Here too, the first version assigns the object to a variable called <hl>$stat</hl>, and the second method calls the <hl>size</hl> method
on-the-fly, without the need of the extra variable.

<code lang="perl">
use strict;
use warnings;
use 5.010;

my $filename = "/etc/passwd";

use File::stat;
my $stat = stat($filename);
say $stat->size;

say stat($filename)->size;
</code>

