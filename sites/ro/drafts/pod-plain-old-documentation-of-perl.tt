=title POD - Plain Old Documentation
=timestamp 2013-03-02T18:40:59
=indexes POD, perldoc, =head1, =cut, =pod, =head2, documentation, pod2html, pod2pdf
=status show
=books beginner_book
=author szabgab
=translator stefansbv
=index 1
=archive 1
=feed 1
=comments 1
=social 1

=abstract start

Programatorilor, îndeobște, nu le place să scrie documentație. Unul
dintre motive este acela că deși programele sunt fișiere text, în
multe cazuri dezvoltatorii sunt nevoiți să scrie documentația într-un
procesor de texte.

Aceasta presupune învățarea modului de lucru cu procesorul de texte și
investirea de multă energie pentru a încerca să faci documentul să "arate bine"
în loc de a "avea conținut bun".

Nu este cazul cu Perl.  Uzual vei scrie documentația modulelor chiar
în codul sursă şi te vei baza pe unelte externe pentru formatare, ca
să arate bine.

=abstract end

În acest episod al <a href="/perl-tutorial">Tutorialelor Perl</a> vom
vedea la lucru <b>POD - Plain Old Documentation</b> un limbaj de
marcare folosit de developerii Perl.

O bucățică de cod simplu cu POD arată așa:

<code lang="perl">
#!/usr/bin/perl
use strict;
use warnings;

=pod

=head1 DESCRIPTION

This script can have 2 parameters. The name or address of a machine
and a command. It will execute the command on the given machine and
print the output to the screen.

=cut

print "Here comes the code ... \n";
</code>

Dacă vei salva codul acesta ca <hl>script.pl</hl> și-l vei executa
folosind <hl>perl script.pl</hl>, Perl va ignora tot ce este
între <hl>=pod</hl> şi <hl>=cut</hl>. Va executa numai codul efectiv.

Pe de altă parte, dacă vei tasta <hl>perldoc script.pl</hl>, adică
comanda <b>perldoc</b>, va ignora tot codul. Va formata și va afișa
liniile cuprinse între <hl>=pod</hl> și <hl>=cut</hl>.

Aceste reguli depind de sistemul de operare, dar sunt exact la fel ca
cele despre care am învățat despre
<li><a href="/documentatia-perl-si-documentatia-modulelor-cpan">documentația
Perl și documentația modulelor CPAN</a></li>.

Valoarea adăugată a utilizării de documentație încorporată în format
POD este următoarea: codul nu va fi niciodată distribuit fără
documentație, nici măcar accidental.

De asemenea poți refolosii uneltele și infrastructura pe care
Comunitatea Open Source Perl le-a construit pentru sine. Chiar și
pentru utilizare privată în cadrul firmei.

<h2>Prea simplu?</h2>

Ipoteza este aceea că dacă îndepărtezi cele mai multe dintre
obstacolele scrierii de documentație atunci din ce în ce mai mulți vor
scrie documentație.  În loc să înveți cum să folosești procesorul de
texte ca să creezi documente care să arate bine, introduci textul
folosind câteva simboluri suplimentare și poți obține un document care
arată rezonabil. (Vezi și documentația de pe <a href="http://metacpan.org/">Meta CPAN</a> o versiune frumos formatată a POD-urilor).

<h2>Limbajul de marcare</h2>

O descriere detaliată
a <a href="http://perldoc.perl.org/perlpod.html">limbajului de marcare
POD</a> poate fi găsită la
adresa <a href="http://perldoc.perl.org/perlpod.html">perldoc
perlpod</a>, dar este foarte simplu.

Sunt câteva etichete ca <hl>=head1</hl> și <hl>=head2</hl>
care marchează antele "foarte importante" și "mai puțin importante".
Este și <hl>=over</hl> pentru indentare și <hl>=item</hl>
pentru a crea liste și de asemenea câteva altele.

Mai este și <hl>=cut</hl> care marchează sfârșitul secțiunii POD și
<hl>=pod</hl> penmtru a începe o secțiunie. Aceasta din urmă nu este
strict necesar să fie folosită.

Any string that starts with an equal sign <hl>=</hl> as the first character in a row will
be interpreted as a POD markup, and will start a POD section closed by <hl>=cut</hl>

POD even allows the embedding of hyper-links using the L&lt;some-link> notation.

Text between the markup parts will be shown as paragraphs of plain text.

If the text does not start on the first character of the row, it will be taken verbatim,
meaning they will look exactly as you typed them: long lines will stay
long lines and short lines will remain short. This is used for code examples.

An important thing to remember is that POD requires empty rows around the tags.
So

<code lang="perl">
=head1 Title
=head2 Subtitle
Some Text
=cut
</code>

won't do what you are expecting.

<h2>The look</h2>

As POD is a mark-up language it does not by itself define how things will be displayed.
Using an <hl>=head1</hl> indicates something important, <hl>=head2</hl> means something less important.

The tool that is used to display the POD will usually use bigger characters to display the
text of a head1 than that of a head2 which in turn will be displayed using bigger fonts than the regular
text. The control is in the hands of the display tool.

The <hl>perldoc</hl> command that comes with perl displays the POD as a man-page. It is quite useful on Linux.
Not so good on Windows.

The <a href="https://metacpan.org/module/Pod::Html">Pod::Html</a> module provides another command line tool called
<hl>pod2html</hl>. This can convert a POD to an HTML document you can view in a browser.

There are additional tools to generate pdf or mobi files from POD.

<h2>Who is the audience?</h2>

After seeing the technique, let's see who is the audience?

Comments (the thing that start with a # ) are explanations for
the maintenance programmer. The person who needs to add features
or fix bugs.

Documentation written in POD is for the users. People who should not
look at the source code. In case of an application those will be
so called "end users". That's anyone.

In case of Perl modules, the users are other Perl programmers who need
to build applications or other modules. They still should not
need to look at your source code. They should be able to use
your module just by reading the documentation via the
<hl>perldoc</hl> command.


<h2>Conclusion</h2>

Writing documentation and making it look nice is not that hard in Perl.
