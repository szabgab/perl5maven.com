=title Trasformare un array Perl con map
=timestamp 2013-04-25T10:45:56
=indexes map, transform, list, array
=status show
=books advanced_book
=author szabgab
=index 1
=archive 1
=feed 1
=comments 1
=social 1

=abstract start

La funzione <hl>map</hl> di Perl fornisce un modo semplice per trasformare una
lista di valori in un'altra lista di valori. Di solito questa trasformazione ritorna lo stesso 
numero di valori, anche se è sempre possibile generare una lista con un numero di valodi diverso.

=abstract end

Abbiamo visto che <a href="/filtering-values-with-perl-grep">la funzione grep di Perl</a> è una generalizzazione del
medesimo comando UNIX. La funzione seleziona alcuni o tutti (o nessuno!) degli elementi dalla 
lista originale, e li ritorna intatti.

La funzione <hl>map</hl>, invece, è utile quando si vogliono cambiare 
i valori della lista originale.

La sintassi è simile. Basta passare alla funzione un blocco di codice ed una lista di valori: un array
o qualche altra espressione che ritorni una lista di valori.
Per ogni elemento della lista originale, il valore è copiato nella variabile <hl>$_</hl>,
<a href="/the-default-variable-of-perl">la variabile predefinita di Perl</a>, ed il blocco
è eseguito. I valori risultanti sono passati alla lista risultante.

<h2>Uso di map per trasformazioni semplici</h2>

<code lang="perl">
my @numbers = (1..5);
print "@numbers\n";       # 1 2 3 4 5
my @doubles = map {$_ * 2} @numbers;
print "@doubles\n";       # 2 4 6 8 10
</code>

<h2>Costruire tabelle di look-up veloci</h2>

Se abbiamo una lista di valori può capitare, durante l'esecuzione del codice, 
di voler controllare se un valore è compreso nella lista. Possiamo usare
<a href="/filtering-values-with-perl-grep.html">grep</a> ogni volta, per cercare se il 
valore è nella lista. Possiamo anche usare la funzione <a href="/filtering-values-with-perl-grep.html">any</a>
del package <a href="http://metacpan.org/modules/List::MoreUtils">List::MoreUtils</a>,
ma può essere più leggibile e veloce usare una variabile hash per costruire una veloce tabella di look-up.

Possiamo creare una variabile hash una volta sola, dove per chiavi usiamo i valori della lista,
ed i corrispondenti valori sono qualunque cosa che valorizzi a true (quindi 1, "1", ma anche "52" o "Perl rocks!").
Possiamo usare questa variabile hash al posto della funzione <hl>grep</hl>.

<code lang="perl">
use Data::Dumper qw(Dumper);

my @names = qw(Foo Bar Baz);
my %is_invited = map {$_ => 1} @names;

my $visitor = <STDIN>;
chomp $visitor;

if ($is_invited{$visitor}) {
   print "The visitor $visitor was invited\n";
}

print Dumper \%is_invited;
</code>

Questo è l'output della chiamata <hl>Dumper</hl> :

<code lang="perl">
$VAR1 = {
          'Bar' => 1,
          'Baz' => 1,
          'Foo' => 1
        };
</code>

Come anticipato, il valore che assegnamo agli elementi dell'hash non è importante,
deve semplicemente essere valutato a true in una espressione.

Questa soluzione è interessante solo si accede spesso alla tabella di look-up e per 
un grande set di valori (l'esatto significato di "grande" potrebbe dipendere dal vostro
sistema).
Altrimenti <hl>any</hl> o anche <hl>grep</hl> andranno bene lo stesso.

Come potete vedere in questo esempio, per ogni elemento nell'array originale,
<hl>map</hl> ritorna 2 valori. Il valore originale e 1.

Il codice seguente:

<code lang="perl">
my @names = qw(Foo Bar Baz);
my @invited = map {$_ => 1} @names;
print "@invited\n"
</code>

stamperà:

<code>
Foo 1 Bar 1 Baz 1
</code>

<h2>La freccia "grassa"</h2>

Nel caso ve lo state chiedendo il simbolo <hl>=></hl> è chiamato la <b>fat arrow</b> or <b>fat comma</b>. Praticamente 
si comporta come una virgola regolare <hl>,</hl> con una eccezione che non è rilevante nel nostro caso. (Per ogni dettaglio
sul suo uso leggetevi l'articolo <a href="/perl-hashes">Perl hashes</a>.)


<h2>Espressioni complesse in map</h2>

Potete dare in pasto a map istruzioni più complesse:

<code lang="perl">
my @names = qw(Foo Bar Baz);
my @invited = map { $_ =~ /^F/ ? ($_ => 1) : () } @names;
print "@invited\n"
</code>

stamperà:

<code>
Foo 1
</code>

Nel blocco abbiamo un operatore ternario che ritorna o una coppia
di valori come prima o una lista vuota. A quanto pare ammettiamo solo
le persone il cui nome inizia con "F".

<code lang="perl">
$_ =~ /^F/ ? ($_ => 1) : ()
</code>

<h2>perldoc</h2>

Per informazioni ulteriori ed un paio di casi strani,
date una occhiata a <a href="http://perldoc.perl.org/functions/map.html">perldoc -f map</a>.

