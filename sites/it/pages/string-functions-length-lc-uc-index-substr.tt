=Title Funzioni su stringhe: length, lc, uc, index, substr
=timestamp 2013-09-10T21:00:00
=indexes length, lc, uc, index, substr, scalar
=status show
=original string-functions-length-lc-uc-index-substr
=books beginner_book
=author szabgab
=translator giatorta
=archive 1
=comments 1
=social 1

=abstract start

In questa parte del <a href="/perl-tutorial">Tutorial Perl</a> impareremo
alcune delle funzioni fornite da Perl per la manipolazione di stringhe.

=abstract end

<h2>lc, uc, length</h2>

Ci sono molte funzioni semplici come <b>lc</b> e <b>uc</b>
che restituiscono, rispettivamente, le versioni minuscola e maiuscola della stringa originale.
Esiste poi una funzione <b>length</b> che restituisce il numero di caratteri della stringa data.

Guardate il seguente esempio:

<code lang="perl">
use strict;
use warnings;
use 5.010;

my $str = 'CiAo';

say lc $str;      # ciao
say uc $str;      # CIAO
say length $str;  # 4
</code>


<h2>index</h2>

Un'altra funzione è <b>index</b>. Questa funzione riceve due stringhe e restituisce
la posizione della seconda stringa nella prima.

<code lang="perl">
use strict;
use warnings;
use 5.010;

my $str = "Un gatto nero salto' giu' da un albero verde";

say index $str, 'gatto';           # 3
say index $str, 'cane';            # -1
say index $str, "Un";              # 0
say index $str, "un";              # 29
</code>

La prima chiamata a <hl>index</hl> restituisce 3 perché la stringa "gatto" inizia al carattere in posizione 3.
La seconda chiamata a <hl>index</hl> restituisce -1 per indicare che la stringa "cane" non c'è.

La terza chiamata mostra che <hl>index</hl> restituisce 0
quando la seconda stringa è un prefisso della prima.

Il quarto esempio mostra che <hl>index</hl> cerca delle corrispondenze esatte e distingue tra maiuscole e minuscole.
Quindi "un" e "Un" sono diverse.

<hl>index()</hl> ricerca stringhe che non devono necessariamente essere parole, quindi anche la stringa "n " può essere cercata:

<code lang="perl">
say index $str, "n ";              # 1
</code>

<hl>index()</hl> può anche ricevere un terzo parametro che indica la posizione da cui
iniziare la ricerca. Quindi, dato che abbiamo trovato l'inizio di "n " al secondo carattere della prima stringa,
possiamo provare una ricerca iniziando dalla terza posizione per vedere se c'è un'altra occorrenza di "n ":

<code lang="perl">
say index $str, "n ";              # 1
say index $str, "n ", 2;           # 30
say index $str, "n", 2;            # 9
</code>

Cercare "n" senza lo spazio da un risultato diverso.

Infine, c'è un'altra funzione <b>rindex</b>
che inizia la ricerca nella stringa da destra:

<code lang="perl">
say rindex $str, "n";             # 30
say rindex $str, "n", 29;         # 9
say rindex $str, "n", 8;          # 1
</code>

<h2>substr</h2>

Penso che la funzione più interessante trattata in questo articolo sia <hl>substr</hl>.
Essenzialmente è l'opposto di index(). Mentre index() vi dice
<b>dove si trova una data stringa</b>, substr vi da una <b>sottostringa che si trova a una data posizione</b>.
Di solito <hl>substr</hl> riceve 3 parametri. Il primo è la stringa. Il secondo è una posizione
a partire da 0, anche detta <b>offset</b> e il terzo è la <b>lunghezza</b> della
sottostringa che vogliamo ottenere.

<code lang="perl">
use strict;
use warnings;
use 5.010;

my $str = "Il gatto nero si arrampica sull'albero verde"

say substr $str, 3, 5;                      # gatto
</code>

substr conta a partire da 0 quindi il carattere in posizione 3 è la lettera g.

<code lang="perl">
say substr $str, 3, -18;                    # gatto nero si arrampica
</code>

Il terzo parametro (la lunghezza) può anche essere un numero negativo. In quel caso va interpretato
come il numero di caratteri da destra nella stringa originale che
NON devono essere inclusi. Quindi l'istruzione sopra significa: conta 3 da sinistra, 18 da destra
e restituisci quello che sta in mezzo.

<code lang="perl">
say substr $str, 14;                        # si arrampica sull'albero verde
</code>

Potete anche omettere il terzo parametro (lunghezza), e ciò verrà interpretato come:
restituisci tutti i caratteri dalla posizione 14 alla fine della stringa.

<code lang="perl">
say substr $str, -5;                        # verde
say substr $str, -5, 2;                     # ve
</code>

Possiamo anche usare un numero negativo come offset, che viene interpretato come:
conta 5 da destra e inizia da lì. È come specificare l'offset
<hl>length($str)-5</hl>.

<h2>Rimpiazzare parti di una stringa</h2>

L'ultimo esempio è un po' funky.
In tutti i casi esaminati fino ad ora <hl>substr</hl> ha restituito la sottostringa
e lasciato intatta la stringa originale. In questo esempio, il valore restituito da
substr si comporterà come sempre, ma substr cambierà anche
il contenuto della stringa originale!

Il valore restituito da <hl>substr()</hl> è sempre determinato dai primi 3 parametri,
ma in questo caso substr ha un quarto parametro. Si tratta di una stringa che deve
sostituire la sottostringa selezionata nella stringa originale.

<code lang="perl">
my $z = substr $str, 14, 12, "salta";
say $z;                                                # si arrampica
say $str;                     # Il gatto nero salta sull'albero verde
</code>

Quindi <hl>substr $str, 14, 12, "salta"</hl> restituisce le parole <b>si arrampica</b>,
ma a causa del quarto parametro, la stringa originale è stata modificata.

