=title "my" variable masks earlier declaration in same scope
=timestamp 2013-06-23T18:00:00
=indexes my, scope
=status show
=original my-variable-masks-earlier-declaration-in-same-scope
=books beginner_book
=author szabgab
=translator giatorta
=archive 1
=comments 1
=social 1

=abstract start

Questo warning viene generato durante la compilazione se, per errore, tentate di dichiarare
due volte la stessa variabile nello stesso scope.

<code>
"my" variable ... masks earlier declaration in same scope at ... line ...
</code>

Che senso ha e perché invece ri-dichiarare delle variabili in ogni iterazione di un ciclo funziona?

Se non posso scrivere <hl>my $x</hl> due volte nello stesso scope, come faccio a resettare la variabile?

=abstract end

Vediamo la differenza tra i seguenti casi:

<h2>Semplice script</h2>

<code lang="perl">
use strict;
use warnings;

my $x = 'this';
my $z = rand();
my $x = 'that';
print "OK\n";
</code>

In questo caso ricevo il seguente warning durante la compilazione:

<code>
"my" variable $x masks earlier declaration in same scope at ... line 7. )
</code>

Trattandosi di un warning, l'esecuzione dello script stampa comunque anche "OK".


<h2>Blocco in un'istruzione condizionale</h2>

<code lang="perl">
use strict;
use warnings;

my $z = 1;
if (1) {
    my $x = 'this';
    my $z = rand();
    my $x = 'that';
}
</code>

Questo genera il seguente warning:

<code>
"my" variable $x masks earlier declaration in same scope at ... line 7.
</code>

In entrambi i casi abbiamo dichiarato <hl>$x</hl> due volte nello stesso scope,
per cui è stato generato un warning durante la compilazione.

Nel secondo esempio dichiariamo anche <hl>$z</hl> due volte, ma non viene
generato alcun warning. Ciò è dovuto al fatto che la <hl>$z</hl> nel blocco
è in uno <a href="http://perlmaven.com/scope-of-variables-in-perl">scope</a> diverso.

<h2>Scope di una funzione</h2>

Un po' di codice dentro una funzione:

<code lang="perl">
use strict;
use warnings;

sub f {
    my $x = 'this';
    my $z = rand();
    my $x = 'that';
}
f(1);
f(2);
</code>

Anche in questo caso durante la compilazione ricevete una sola volta il warning per la variabile <hl>$x</hl>.
Anche se la variabile <hl>$z</hl> viene creata ripetutamente,
una volta per ogni chiamata alla funzione,
questo non crea problemi. La variabile <hl>$z</hl> non genera warning:
Perl può creare due volte la stessa variabile, siete voi che non potete farlo.
Almeno non nello stesso scope.

<h2>Scope di un ciclo for</h2>

Stesso codice, ma in un ciclo:

<code lang="perl">
use strict;
use warnings;

for (1 .. 10) {
    my $x = 'this';
    my $z = rand();
    my $x = 'that';
}
</code>

Anche questo genera un warning per <hl>$x</hl> una sola volta(!) e non genera
alcun warning per <hl>$z</hl>.

In questo codice la stessa cosa viene ripetuta ad <b>ogni</b> iterazione:
Perl alloca la memoria per la variabile <hl>$z</hl> ad ogni iterazione.

<h2>Che cosa significa "my"?</h2>

Il significato di <hl>my $x</hl> è quello di dire a perl, e in particolare a <hl>strict</hl>,
che volete usare una variabile privata <b>$x</b> nello <a href="http://perlmaven.com/scope-of-variables-in-perl">scope corrente</a>.
In mancanza di ciò, perl cerca una dichiarazione negli scope superiori e se
non riesce a trovarla genera un errore di compilazione
<a href="/global-symbol-requires-explicit-package-name">Global symbol requires explicit package name</a>
Ogni ingresso in un blocco, ogni chiamata a una funzione, ogni iterazione in un loop è un nuovo mondo.

D'altra parte, se scrivete <hl>my $x</hl> due volte nello stesso scope significa che state cercando di dire a Perl
la stessa cosa due volte. Non è necessario e in genere indica che c'è un errore da qualche parte.

In altre parole, il warning che riceviamo è dovuto alla <b>compilazione</b> del codice e non alla sua esecuzione.
È legato alla dichiarazione della variabile da parte dello sviluppatore e non alle allocazioni di memoria
fatte da perl durante l'esecuzione.

<h2>Come si resetta una variable?</h2>

Se non possiamo scrivere <hl>my $x;</hl> due volte nello stesso scope, come facciamo a resettarne il valore?

Anzitutto, se una variabile è dichiarata in uno scope, ovvero tra parentesi graffe, verrà automaticamente distrutta
non appena l'esecuzione esce dallo <a href="http://perlmaven.com/scope-of-variables-in-perl">scope</a>.

Se volete resettare una variabile scalare nello scope corrente, assegnatele il valore <hl>undef</hl>
mentre se è un <a href="http://perlmaven.com/undef-on-perl-arrays-and-hashes">array o un hash</a>, assegnatele una lista vuota:

<code lang="perl">
$x = undef;
@a = ();
%h = ();
</code>

Per riassumere: "my" dice a perl che volete usare una variabile.
Quando Perl esegue il codice dove c'è la variabile "my" alloca la memoria per la variabile e il suo contenuto.
Quando Perl esegue <hl>$x = undef;</hl>  oppure  <hl>@x = ();</hl>  oppure  <hl>undef @x;</hl> rimuove
il contenuto della variabile.


