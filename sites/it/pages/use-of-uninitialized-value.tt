=title Use of uninitialized value
=timestamp 2012-09-05T21:45:56
=indexes undef, uninitialized value, $|, warning, buffering
=status show
=original use-of-uninitialized-value
=books beginner_book
=author szabgab
=translator giatorta
=index 1
=archive 1
=feed 1
=comments 1
=social 1

=abstract start

Questo warning è uno dei più comuni tra quelli che incontrerete eseguendo del codice Perl.

Essendo un warning, non impedisce l'esecuzione del vostro script e viene generato solo se
i warning sono stati attivati, cosa che vi raccomando di fare.

Il modo più comune di attivare i warning è quello di includiere un'istruzione <hl>use warnings;</hl>
all'inizio del vostro script o modulo.

=abstract end

Il vecchio modo era invece quello di aggiungere un'opzione <hl>-w</hl> sulla cosiddetta linea sh-bang, ovvero la prima
linea del vostro script contenente l'invocazione di perl:

<hl>#!/usr/bin/perl -w</hl>

Ci sono alcune differenze, ma siccome <hl>use warnings</hl> è ormai disponibile da 12 anni,
non c'è alcuna ragione per non usarlo. In altre parole:

Usate sempre <hl>use warnings;</hl>!


Torniamo al warning che volevo spiegare.

<h2>Una spiegazione veloce</h2>

<code>
Use of uninitialized value $x in say at perl_warning_1.pl line 6.
</code>

Il senso del messaggio è che la variabile <hl>$x</hl> non ha un valore (o meglio, ha il valore speciale <hl>undef</hl>).
Potrebbe non avere mai avuto un valore o averlo avuto prima che, ad un certo punto, le sia stato assegnato <hl>undef</hl>.

Dovreste cercare il punto dove è stato fatto l'ultimo assegnamento alla variabile
oppure cercare di capire perché un certo pezzo di codice non è stato eseguito.

<h2>Un semplice esempio</h2>

L'esempio seguente genera quel tipo di warning.

<code lang="perl">
use warnings;
use strict;
use 5.010;

my $x;
say $x;
</code>

Perl è così gentile da dirci quale file ha generato il warning e a quale linea.

<h2>È solo un warning</h2>

Come ho già detto, questo è solo un warning. Se lo script ha altre istruzioni dopo l'istruzione
<hl>say</hl>, tali istruzioni verranno eseguite:

<code lang="perl">
use warnings;
use strict;
use 5.010;

my $x;
say $x;
$x = 42;
say $x;
</code>

Questo codice stampa

<code>
Use of uninitialized value $x in say at perl_warning_1.pl line 6.

42
</code>

<h2>Output in ordine sparso</h2>

Attenzione però che, se il vostro codice ha stampato qualcosa prima della linea
dove viene generato il warning, come in questo esempio:

<code lang="perl">
use warnings;
use strict;
use 5.010;

print 'OK';
my $x;
say $x;
$x = 42;
say $x;
</code>

il risultato potrebbe essere un po' strano.

<code>
Use of uninitialized value $x in say at perl_warning_1.pl line 7.
OK
42
</code>

Come vedete, il risultato della <hl>print</hl> appare <b>dopo</b>
il warning, anche se essa è stata eseguita <b>prima</b> del
codice che ha generato il warning.

Questa anomalia è causata dal <hl>buffering dell'IO</hl>.
DI default Perl applica il buffering a STDOUT, il canale standard di output,
mentre non lo applica a STDERR, il canale standard per i messaggi di errore.

Quindi, mentre la parola 'OK' è in attesa che il buffer venga svuotato,
il messaggio di warning viene emesso sullo schermo.

<h2>Disattivare il buffering</h2>

Se volete evitare questo comportamento potete disattivare il buffering su STDOUT.

A questo scopo dovete aggiungere il seguente codice: <hl>$| = 1;</hl>
all'inizio dello script.


<code lang="perl">
use warnings;
use strict;
use 5.010;

$| = 1;

print 'OK';
my $x;
say $x;
$x = 42;
say $x;
</code>

<code>
OKUse of uninitialized value $x in say at perl_warning_1.pl line 7.
42
</code>

(Il warning è sulla stessa linea di <b>OK</b> perché non abbiamo emesso un carattere di a capo
<hl>\n</hl> dopo OK.)

<h2>Lo scope indesiderato</h2>

<code lang="perl">
use warnings;
use strict;
use 5.010;

my $x;
my $y = 1;

if ($y) {
  my $x = 42;
}
say $x;
</code>

Anche questo codice genera <hl>Use of uninitialized value $x in say at perl_warning_1.pl line 11.</hl>

Mi è successo molte volte di commettere questo errore. Ho inserito distrattamente <hl>my $x</hl>
dentro al blocco <hl>if</hl>, creando un'altra variabile $x e
assegnandole il valore 42 senza accorgermi che sarebbe uscita dal proprio scope alla fine del blocco.
(L'assegnamento $y = 1 sta al posto di un vero pezzo di codice e di una vera condizione.
Serve solo a rendere questo esempio un po' più realistico.)

Ovviamente in alcuni casi dichiaro la variabile nel blocco if perché è necessario, ma in altri casi no.
E nei casi in cui la dichiaro per errore è difficile trovare il bug.




