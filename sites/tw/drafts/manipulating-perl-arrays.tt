=title Manipulating Perl arrays: shift, unshift, push, pop
=timestamp 2013-02-06T14:45:56
=indexes array, shift, unshift, push, pop
=status show
=books beginner_book
=author szabgab
=index 1
=archive 1
=feed 1
=comments 1
=social 1

=abstract start

As well as allowing direct access to individual array elements,
Perl also provides various other interesting ways to deal with arrays.
In particular, there are functions that make it very easy and efficient
to use a Perl array as a stack or as a queue.

=abstract end

<h2>pop</h2>

The <hl>pop</hl> function will remove and return the last element of an array.

In this first example you can see how, given an array of 3 elements, the <hl>pop</hl> function
removes the last element (the one with the highest index) and returns it.

<code lang="perl">
my @names = ('Foo', 'Bar', 'Baz');
my $last_one = pop @names;

print "$last_one\n";  # Baz
print "@names\n";     # Foo Bar
</code>

In the special case of the original array being empty, the <hl>pop</hl> function
will return <a href="/undef-and-defined-in-perl">undef</a>.

<h2>push</h2>

The <hl>push</hl> function can add one or more values to the end of an array.
(Well, it can also add 0 values, but that's not very useful, is it?)

<code lang="perl">
my @names = ('Foo', 'Bar');
push @names, 'Moo';
print "@names\n";     # Foo Bar Moo

my @others = ('Darth', 'Vader');
push @names, @others;
print "@names\n";     # Foo Bar Moo Darth Vader
</code>

In this example we originally had an array with two elements.
Then we pushed a single scalar value to the end and our array
got extended to a 3-element array.

In the second call to <hl>push</hl>, we pushed the content of the <hl>@others</hl>
array to the end of the <hl>@names</hl> array, extending it to a 5-element array.

<h2>shift</h2>

The <hl>shift</hl> function will move the whole array to the left.
Assuming you imagine the arrray to start on the left hand side.
The element that was the first element of the array will "fall off"
the array and become the return value of the function.
(If the array was empty, <b>shift</b> will return <a href="/undef-and-defined-in-perl">undef</a>.) 

After the operaton, the array will be one element shorter.

<code lang="perl">
my @names = ('Foo', 'Bar', 'Moo');
my $first = shift @names;
print "$first\n";     # Foo
print "@names\n";     # Bar Moo
</code>

This is quite similar to <hl>pop</hl>, but it works on the lower end of the array.

<h2>unshift</h2>

This is the opposite operation of <hl>shift</hl>. <hl>unshift</hl> will
take one or values (or 0 if that's what you like) and place it at the
beginning of the array moving all the other elements to the right.

You can pass to it a single scalar value, and then that value will become the
first element of the array. Or, as in the second example, you can pass a second
array and then the elements of this second array (<hl>@others</hl> in our case)
will be copied to the beginning of the main array (<hl>@names</hl> in our case)
moving the other elements to higher indexes.

<code lang="perl">
my @names = ('Foo', 'Bar');
unshift @names, 'Moo';
print "@names\n";     # Moo Foo Bar 

my @others = ('Darth', 'Vader');
unshift @names, @others;
print "@names\n";     # Darth Vader Moo Foo Bar
</code>

