=title Как выйти из скрипта Perl?
=timestamp 2013-10-22T12:00:01
=indexes exit, $?, >>
=status show
=original how-to-exit-from-perl-script
=books beginner_book
=author szabgab
=translator spidamoo
=archive 1
=comments 1
=social 1

=abstract start
Пока что все скрипты, приводимые в нашем <a href="/perl-tutorial">Учебнике Perl</a> заканчивались,
когда по ходу выполнения программа достигала последней строчки в файле.

Однако в некоторых случаях может понадобиться остановить выполнение раньше.

Например, вы спрашиваете пользователя о его возрасте, и если он младше 13, останавливаете скрипт.

=abstract end

<code lang="perl">
use strict;
use warnings;
use 5.010;

print "Каков ваш возраст? ";
my $age = <STDIN>;
if ($age < 13) {
    print "Вы слишком молоды\n";
    exit;
}

print "Сделаем что-то...\n";
</code>

Обычный вызов <hl>exit</hl>.

<h2>Код выхода</h2>

Если вы пользуетесь командной оболочкой Unix/Linux, то вы, должно быть, знаете, что каждая программа
при выходе передает код выхода, который можно узнать из переменной <hl>$?</hl>. Вы тоже можете 
передать такой код выхода из perl-скрипта, указав параметр при вызове <hl>exit()</hl>.


<code lang="perl">
use strict;
use warnings;
use 5.010;

exit 42;
</code>

В этом примере мы установили код выхода 42. (По умолчанию устанавливается 0)

<h2>Успех или отказ?</h2>

В Perl обычно 0 или <a href="/undef-i-defined-v-perl">undef</a> означает отказ, а какое-нибудь
<a href="/bulevy-znacheniya-v-perl">истинное значение</a> означает успех.

В мире командной оболочки Unix/Linux, 0 означает успех, а другие числа означают отказ. Как правило,
для каждого приложения существует свой набор значений, каждое из которых означает какую-то ошибку.


<h2>Проверка кода выхода в Linux</h2>

На Unix/Linux обычно запускают скрипт через <hl>perl script.pl</hl>, и потом можно проверить код
выхода через <hl>echo $?</hl>.

<h2>Проверка кода выхода в Perl</h2>

Если вам приходится запускать один скрипт perl из другого, например через вызов функции
<a href="/zapusk-vneshnih-programm-iz-perl">system</a>, код выхода этой &laquo;другой 
программы&raquo; попадет в переменную Perl'а <hl>$?</hl>.

Если вы сохраните код из примера выше в файл script.pl, и создадите другой файл 
&laquo;executor.pl&raquo; с таким кодом:


<code lang="perl">
use strict;
use warnings;
use 5.010;

say system "perl script.pl";
say $?;
say $? >> 8;
</code>

То вывод будет таким:

<code>
10752
10752
42
</code>

Вызов <hl>system</hl> вернет код выхода, и он же будет записан в переменную Perl'а <hl>$?</hl>. 
Здесь важно упомянуть, что это значение состоит из двух байт, и собственно код выхода записан в
верхнем байте. Так что, чтобы получить наше 42, нужно сдвинуть биты полученной переменной вправо на 
8, использовав побитовый оператор <hl>&gt;&gt;</hl>. Это мы и видим в последней строке примера.

