=title Область видимости переменных в Perl
=timestamp 2013-07-10T12:00:00
=indexes my, scope
=status show
=original scope-of-variables-in-perl
=books beginner_book
=author szabgab
=translator spidamoo
=archive 1
=comments 1
=social 1

=abstract start

В Perl существует два основных типа переменных. Один из них - это глобальные переменные модуля, 
объявленные либо с помощью ныне устаревшей конструкции <hl>use vars</hl>, либо с помощью <hl>our</hl>.

Другой тип - это лексические переменные, объявленные с помощью <hl>my</hl>.

Давайте посмотрим, что происходит, когда мы объявляем переменную с помощью <hl>my</hl>. В каких
местах кода переменная будет доступна? Другими словами, где будет <b>область видимости</b> 
переменной?

=abstract end

<h2>Область видимости: содержащий блок</h2>

<code lang="perl">
#!/usr/bin/perl
use strict;
use warnings;

{
    my $email = 'foo@bar.com';
    print "$email\n";     # foo@bar.com
}
# print $email;
# $email не существует
# Global symbol "$email" requires explicit package name at ...
</code>

Внутри безымянного блока (пара фигурных скобок <hl>{}</hl>) мы видим объявление новой переменной
"<hl>$email</hl>". Эта переменная существует на участке между ее объявлением и концом блока. Вот
почему строка после закрывающей скобки <hl>}</hl> закомментирована. Если убрать <hl>#</hl> из строки
<hl># print $email;</hl> и попробовать запустить скрипт, мы получим ошибку компиляции: 
<a href="/global-symbol-requires-explicit-package-name">Global symbol "$email" requires explicit 
package name at ...</a>.

Другими словами, <b>область видимости переменной, объявленной с помощью my ограничивается содержащим
ее блоком</b>.

<h2>Область видимости: видимый везде</h2>

Переменная <hl>$lname</hl> объявлена в начале кода. Она будет видима везде до конца файла. Даже 
внутри блоков. Даже если эти блоки являются объвлениями функций. Если мы изменим переменную внутри
блока, ее значение изменится и в остальном коде. Даже если вы выйдете из блока:

<code lang="perl">
#!/usr/bin/perl
use strict;
use warnings;

my $lname = "Bar";
print "$lname\n";        # Bar

{
    print "$lname\n";    # Bar
    $lname = "Other";
    print "$lname\n";    # Other
}
print "$lname\n";        # Other
</code>


<h2>Переменная, скрытая другим объявлением</h2>

<code lang="perl">
#!/usr/bin/perl
use strict;
use warnings;

my $fname = "Foo";
print "$fname\n";        # Foo

{
    print "$fname\n";    # Foo

    my $fname  = "Other";
    print "$fname\n";    # Other
}
print "$fname\n";        # Foo
</code>

В этом случае переменная <hl>$fname</hl> объвлена в начале кода. Как сказано выше, она будет видима
везде до конца файла, <b>за исключением мест, где она будет "скрыта" локально объявленной переменной
с таким же именем</b>.

Внутри блока мы объявли с помощью <hl>my</hl> другую переменную с таким же именем. По сути, это 
скроет переменную <hl>$fname</hl>, объявленную снаружи блока, пока мы не покинем блок. В конце блока
(<hl>}</hl>) переменная <hl>$fname</hl>, объявленная внутри него, будет уничтожена, а первоначальная
<hl>$fname</hl> снова станет доступна. Эта особенность особенно важна, так как она дает возможность
создавать переменные внутри небольших блоков, не задумываясь о возможном использовании такого же 
имени снаружи блока.

<h2>Одинаковые имена в разных блоках</h2>

Вы можете спокойно использовать одинаковые имена переменных в разных блоках. Эти переменные не будут
никак связаны друг с другом.

<code lang="perl">
#!/usr/bin/perl
use strict;
use warnings;

{
    my $name  = "Foo";
    print "$name\n";    # Foo
}
{
    my $name  = "Other";
    print "$name\n";    # Other
}
</code>

<h2>объявление в модуле внутри файла</h2>

Это немного более продвинутый пример, и, возможно, здесь стоит обратить внимание:

Perl позволяет переключаться между <b>пространствами имен</b> внутри одного файла с помощью 
ключевого слова <hl>package</hl>. Объявление модуля с помощью <hl>package</hl> <b>НЕ</b> создает
область видимости. Если вы объявите переменную, явно указав пространство имен с помощью <b>package 
main</b>, которое и по умолчанию является телом вашего скрипта, то ваша переменная <hl>$fname</hl>
все равно будет видима в этом файле, даже в других пространствах имен.

Если вы объявите переменную "<hl>$lname</hl>" в пространстве имен "Other", она будет видима, если
потом вы переключитесь обратно на пространство имен <hl>main</hl>. Если же объявление <hl>package 
Other</hl> было в другом файле, то переменные, объявленные там, будут находиться в другой области
видимости, созданной файлом.

<code lang="perl">
#!/usr/bin/perl
use strict;
use warnings;

my $fname  = "Foo";
print "$fname\n";    # Foo

package Other;
use strict;
use warnings;

print "$fname\n";    # Foo
my $lname = 'Bar';
print "$lname\n";    # Bar


package main;

print "$fname\n";    # Foo
print "$lname\n";    # Bar
</code>


