=title Global symbol requires explicit package name
=timestamp 2013-07-10T12:00:00
=indexes strict, my, package, global symbol
=status show
=original global-symbol-requires-explicit-package-name
=books beginner_book
=author szabgab
=translator spidamoo
=archive 1
=comments 1
=social 1

=abstract start

<b>Global symbol requires explicit package name</b> это типичная,
и, на мой взгляд, весьма вводящее в заблуждение сообщение об ошибке в Perl. Во всяком случае, 
для новичков.

Простой перевод - "Надо объявить переменную с помощью <b>my</b>."

=abstract end

<h2>Простейший пример</h2>

<code lang="perl">
use strict;
use warnings;

$x = 42;
</code>

И ошибка

<code>
Global symbol "$x" requires explicit package name at ...
(Глобальный символ "$x" требует явного имени модуля на строке...)
</code>

Хотя само по себе сообщение об ошибке корректно, от этого мало толку для новичка в 
Perl-программировании. Он, возможно, даже не знает, что такое модули. И также ему непонятно,
что может быть более явно, чем $x.

Это ошибка генерируется из-за <b>use strict</b>.

Вот объяснение из документации:

<i>
Это выражение генерирует ошибку компиляции, если вы обращаетесь к переменной, которая не была
объявлена с помощью "our" или "use vars", локально объвлена с помощью "my()", или не была полностью
определена.
</i>

Стоит надеяться, что новичок будет начинает каждый свой скрипт с <b>use strict</b>, и наверняка
узнает о <b>my</b> гораздо раньше, чем о других вариантах.

Я не знаю, возможно и следует ли изменить этот текст в perl'е. Цель этой статьи не в этом. Цель в
том, чтобы помочь новичкам понять для себя, что значит это сообщение об ошибке.

Чтобы избавиться от этого сообщение об ошибке, нужно написать:

<code lang="perl">
use strict;
use warnings;

my $x = 42;
</code>

То есть, нужно <b>объявить переменную с помощью my, прежде чем использовать ее в первый раз</b>.
That is, one needs to <b>declare the variable using my before its first use.</b>.

<h2>Плохое решение</h2>

Другое "решение" - убрать <b>strict</b>:

<code lang="perl">
#use strict;
use warnings;

$x = 23;
</code>

это сработает, но выдаст предупреждение
<a href="/name-used-only-once-possible-typo">Name "main::x" used only once: possible typo at ...</a>.

Так или иначе, в нормальной ситуации вы не станете вести машину, не пристегнувшись, не так ли?

<h2>Пример 2: область видимости</h2>

Другой случай, часто наблюдаемый у новичков:

<code lang="perl">
use strict;
use warnings;

my $x = 1;

if ($x) {
my $y = 2;
}

print $y;
</code>

Здесь мы получим ту же ошибку, что и в предыдущем примере:

<code>
Global symbol "$y" requires explicit package name at ...
</code>

что для многих удивительно. Особенно, когда они начинают программировать. В конце концов, они же
объявили <hl>$y</hl> с помощью <hl>my</hl>.

Для начала, здесь есть небольшая визуальная проблема. Нет отступа перед <hl>my $y = 2;</hl>.
Если бы мы сделали отступ в пару пробелов или табуляцию, как в следующем примере, источник проблемы
мог бы стать более очевидным:

<code lang="perl">
use strict;
use warnings;

my $x = 1;

if ($x) {
    my $y = 2;
}

print $y;
</code>

Проблема в том, что переменная <hl>$y</hl> объявлена внутри блока(между фигурными скобками),
а это значит, что вне пределов блока она не существует. Это называется
<a href="/oblast-vidimosti-v-perl"><b>областью видимости</b> переменной</a>.

Сама идея <b>областей видимости</b> отличается в разных языках программирования. В Perl блок,
ограниченный фигурными скобками, создает область видимости. То, что объявлено внутри нее с 
помощью <hl>my</hl>, не будет доступно за границами блока.

(К слову, выражение <hl>$x = 1</hl> здесь добавлено только чтобы создать правдоподобное условие
для создания блока. Другими словами, условие <hl>if ($x) {</hl> нужно здесь, чтобы сделать пример
более реальным.)

Решение здесь - либо вызвать <hl>print</hl> внутри блока:

<code lang="perl">
use strict;
use warnings;

my $x = 1;

if ($x) {
    my $y = 2;
    print $y;
}
</code>

либо объявить переменную за границами блока (а не внутри!):

<code lang="perl">
use strict;
use warnings;

my $x = 1;
my $y;

if ($x) {
    $y = 2;
}

print $y;
</code>

Какой способ выбрать, зависит уже от конкретной задачи. Это лишь синтаксически допустимые решения.

Конечно, если мы забудем убрать <hl>my</hl> из блока, или если <hl>$x</hl> будет FALSE, то мы 
получим предупреждение <a href="/use-of-uninitialized-value">Use of uninitialized value</a>.

<h2>Другие способы</h2>

Объяснение того, что делают выражения <hl>our</hl> и <hl>use vars</hl>, или как можно полностью 
определить имя переменной, мы оставим для другой статьи.

