=title POD, или Простая cтарая документация
=timestamp 2013-04-20T13:13:17
=indexes POD, perldoc, =head1, =cut, =pod, =head2, documentation, pod2html, pod2pdf
=status show
=original pod-plain-old-documentation-of-perl
=books beginner_book
=author szabgab
=translator shatlovsky
=index 1
=archive 1
=feed 1
=comments 1
=social 1

=abstract start

Программисты обычно не очень любят писать документацию. Одной из причин
является то, что программы это простые текстовые файлы, а
для составления документации разработчикам приходится использовать какой-то текстовый процессор.

В итоге приходится изучать сам текстовый процессор, а также тратить уйму сил в
попытках сделать документ "хорошо оформленным", а не "содержательным".

С Perl все иначе. Обычно вы пишете
документацию к вашим модулям прямо в исходном коде, а
оформлением занимаются внешние инструменты.

=abstract end

В этой главе ​​<a href="/perl-tutorial">Учебника Perl</a>
мы рассмотрим <b>POD - Простую старую документацию (Plain Old Documentation)</b>,
язык разметки, который используют Perl-разработчики.

Кусок perl-кода с POD выглядит примерно так:

<code lang="perl">
#!/usr/bin/perl
use strict;
use warnings;

=pod

=head1 DESCRIPTION

Этот скрипт может принимать 2 параметра. Имя или адрес машины
и команда. Он исполнит команду на данной машине и
выведет результат на экран.

=cut

print "Здесь наш код ... \n";
</code>

Если вы сохраните это как <hl>script.pl</hl> и запустите командой <hl>perl script.pl</hl>,
Perl проигнорирует все между строками <hl>=pod</hl> и <hl>=cut</hl>.
Он исполнит только реальный код.

Напротив, если вы запустите <hl>perldoc script.pl</hl>, команда <b>perldoc</b>
проигнорирует программный код. Она возьмет все строки между <hl>=pod</hl> и <hl>=cut</hl>,
отформатирует их в соответствии с определенными правилами, и отобразит на экране.

Правила эти зависят от вашей операционной системы, но они точно такие же, как и те,
что мы изучали в главе про
<a href="/documentacia-na-perl-i-cpan-moduli">стандартную документацию Perl</a>.

Дополнительная ценность встроенного POD в том, что ваш код всегда будет поставляться
с документацией, так как она неразрывно связана с самими модулями и сценариями.
Вы также всегда можете пользоваться готовыми инструментами и инфраструктурой, построенными для себя сообществом Perl.
Даже для своих собственных целей.

<h2>Слишком просто?</h2>

Идея в том, что если писать документацию будет несложно,
то все больше людей будут ее писать. Вместо изучения
текстовых процессоров для создания красивых документов, вы просто
вводите текст с несколькими дополнительными тегами, и в итоге получаете хорошо
оформленную документацию. (Для примера красивого форматирования документации в POD посмотрите документы <a href="http://metacpan.org/">Meta CPAN</a>)


<h2>Язык разметки</h2>

Подробное описание <a href="http://perldoc.perl.org/perlpod.html">языка разметки POD</a>
можно получить, введя команду <a href="http://perldoc.perl.org/perlpod.html">perldoc perlpod</a>, но
язык этот очень прост.

Есть несколько тегов, таких как <hl>=head1</hl> и <hl>=head2</hl>,
обозначающих "очень важный" и "несколько менее важный" заголовки.
Имеется <hl>=over</hl> для создания отступов и <hl>=item</hl>
для элементов ненумерованного списка, и еще несколько других.

<hl>=cut</hl> означает конец раздела POD, а
<hl>=pod</hl> обозначает его начало. Однако начальный тег строго обязательным не является.

Любая строка, первым символом которой является знак равенства <hl>=</hl>, будет
воспринята как начало POD раздела, который должен быть закрыт тегом <hl>=cut</hl>

POD позволяет использовать гиперссылки с помощью тега L&lt;some-link&gt;.

Текст между разметкой будет показан как абзац простого текста.

Если текст начинается не с первого символа строки, то он будет использован как есть,
то есть он будет выглядеть именно так, как вы его ввели: длинные строки останутся
длинными, а короткие так и будут короткими. Обычно это используется для примеров кода.

Важно помнить, что POD требует пустых строк вокруг тегов.
То есть

<code lang="perl">
=head1 Заголовок
=head2 Подзаголовок
Какой-то текст
=cut
</code>

будет работать не совсем так, как вы могли бы ожидать.

<h2>Внешний вид</h2>

Поскольку POD это язык разметки, сам по себе он не определяет как что будет отображено.
Мы просто используем <hl>=head1</hl>, чтобы отметить нечто важное, или <hl>=head2</hl> для менее значимого.

Инструмент, который используется для отображения POD, скорее всего использует символы большего кегля для отображения
текста в head1, чем в head2, который в свою очередь будет отображен с использованием большего кегля, чем обычный
текст. Выбор за инструментом отображения POD.

Команда <hl>perldoc</hl>, которая поставляется с Perl, отображает POD как man-страницы. Это очень удобно на Linux.
Но не так хорошо на Windows.

Модуль <a href="https://metacpan.org/module/Pod::Html">Pod::Html</a> предоставляет другой инструмент командной строки: 
<hl>pod2html</hl>. Он умеет конвертировать POD в HTML, который можно просматривать прямо в браузере.

Существуют также и другие инструменты, например для преобразования POD в форматы PDF или mobi.

<h2>Для кого мы пишем документацию?</h2>

После того, как мы научились писать документацию в POD, давайте подумаем, кто будет её читать.

Комментарии (то, что начинается с #) это пояснения для
программиста, поддерживающего код. Для человека, которому нужно добавить фичу
или пофиксить баг.

Документация в POD пишется для пользователей. Для тех, кому не нужно
смотреть в исходники. Для приложения это будут
так называемые «конечные пользователи». То есть кто угодно.

В случае Perl модулей, это будут пользователи и другие программисты, которым нужно
создать своё приложение или другой модуль используя ваш. Им также незачем
смотреть в ваши исходники. Им должно быть достаточно
просто прочитать документацию при помощи <hl>perldoc</hl>, чтобы использовать ваш модуль.



<h2>Заключение</h2>

В Perl совсем не сложно написать и красивое оформить документацию.