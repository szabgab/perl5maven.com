=title Цикл while
=timestamp 2013-10-19T12:00:02
=indexes while, while (1), loop, infinite loop, last
=status show
=original while-loop
=books beginner_book
=author szabgab
=translator spidamoo
=archive 1
=comments 1
=social 1

=abstract start

В этой части <a href="/perl-tutorial">Учебника Perl</a> мы узнаем, <b>как работает цикл while в Perl</b>.

=abstract end

<code lang="perl">
use strict;
use warnings;
use 5.010;

my $counter = 10;

while ($counter > 0) {
  say $counter;
  $counter -= 2;
}
say 'done';
</code>

Цикл <hl>while</hl> имеет условие (в нашем случае оно проверяет, положительна ли переменная 
$counter) и блок кода в фигурных скобках.

Когда по ходу выполнения программа впервые встречает начало цикла while, она проверяет, 
<a href="/bulevy-znacheniya-v-perl">истинно ли</a> условие. Если оно возвращает <hl>FALSE</hl>, блок
пропускается и программа переходит к следующему выражению, в нашем случае к выводу 'done'.

Если условие цикла <hl>while</hl> возвращает <hl>TRUE</hl>, блок выполняется, и затем программа 
возвращается к проверке условия. Условие снова проверяется. Если результат проверки - ложь, блок
пропускается и выводится 'done'. Если результат - истина, то блок выполняется и программа 
возвращается к условию...

Это продолжается, пока условие выполняется, говоря по-русски:

<hl>while (условие-истинно) { сделать-что-то }</hl>

<h2>Бесконечный цикл</h2>

В предыдущем коде переменная всегда уменьшалась, так что мы были уверены, что условие рано или 
поздно перестанет выполняться. Если по какой-то причине условие никогда не станет ложным, мы попадем
в <b>бесконечный цикл</b>. Программа застрянет в маленьком блоке, из которого не сможет выбраться.

Например, если мы забыли уменьшить <hl>$counter</hl> или мы вообще увеличиваем его и ждем, пока он
окажется меньше какой-то величины.

Если это случается по ошибке, это баг.

С другой стороны, в некоторых случаях <b>намеренное</b> использование бесконечного цикла поможет нам
проще и написать программу, и читать ее впоследствии. Мы любим читаемый код! Если нам нужен 
бесконечный цикл, стоит использовать условие, которое всегда истинно.

Например:

<code lang="perl">
while (42) {
  # делать что-то
}
</code>

Конечно, люди без <a href="http://ru.wikipedia.org/wiki/%D0%9E%D1%82%D0%B2%D0%B5%D1%82_%D0%BD%D0%B0_%D0%B3%D0%BB%D0%B0%D0%B2%D0%BD%D1%8B%D0%B9_%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81_%D0%B6%D0%B8%D0%B7%D0%BD%D0%B8,_%D0%B2%D1%81%D0%B5%D0%BB%D0%B5%D0%BD%D0%BD%D0%BE%D0%B9_%D0%B8_%D0%B2%D1%81%D0%B5%D0%B3%D0%BE_%D1%82%D0%B0%D0%BA%D0%BE%D0%B3%D0%BE">
должной эрудиции</a> удивятся, почему 42, так что более общепринятое, хотя и немного скучное, 
решение - всегда использовать в бесконечных циклах число 1.

<code lang="perl">
while (1) {
  # делать что-то
}
</code>

Естественно, увидев, что в коде нет выхода из цикла, кто-то может удивиться, как вообще эта 
программа может закрыться без насильного прекращения извне?

Для этого существует несколько способов.

Один из них - это выражение <hl>last</hl> внутри цикла while. Оно пропускает остаток блока и не 
проверяет условие по новой, по сути, заканчивая цикл. Обычно его помещают в какое-нибудь условие.

<code lang="perl">
use strict;
use warnings;
use 5.010;

while (1) {
  print "Какой язык программирования вы сейчас изучаете? ";
  my $name = <STDIN>;
  chomp $name;
  if ($name eq 'Perl') {
    last;
  }
  say 'Неверно! Попробуйте еще раз!';
}
say 'готово';
</code>

В этом примере мы спрашиваем пользователя и надеемся, что он сможет ответить на вопрос и 
использовать правильный регистр. Он застрянет на этом вопросе навечно, если не сможет набрать 
'Perl'.

Так что общение может происходить примерно так:

<code>
Какой язык программирования вы сейчас изучаете?
>  Java
Неверно! Попробуйте еще раз!
Какой язык программирования вы сейчас изучаете?
>  PHP
Неверно! Попробуйте еще раз!
Какой язык программирования вы сейчас изучаете?
>  Perl
готово
</code>

Как вы видите, когда пользователь ввел правильный ответ, вызвалось выражение <hl>last</hl>, остаток
блока, включая <hl>say 'Неверно! Попробуйте еще раз!';</hl>, был пропущен, и выполнение продолжилось
с конца <hl>цикла while</hl>.
As you can see once the user typed the correct answer, <hl>last</hl> was called, the rest of the block
including <hl>say 'Wrong! Try again!';</hl> was skipped and the execution continued after the
<hl>while loop</hl>.


