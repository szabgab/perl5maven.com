=title Игра в &laquo;Угадай число&raquo;
=timestamp 2013-10-19T12:00:01
=indexes rand, random, int, integer
=status show
=original number-guessing-game
=books beginner_book
=author szabgab
=translator spidamoo
=archive 1
=comments 1
=social 1

=abstract start

В этой части <a href="/perl-tutorial">Учебника Perl</a> мы начнем создавать маленькую, но веселую
игру. Это была моя первая игра, которую я написал в средней школе, еще до того как вышел Perl 1.0.

=abstract end

Чтобы написать эту игру, необходимо изучить две простых не связанных друг с другом темы: <b>Как 
генерировать случайные числа в Perl</b> и <b>Как получить целую часть числа</b>.

<h2>Целая часть дробного числа</h2>

Функция <hl>int()</hl> возвращает целую часть переданного ей параметра:

<code lang="perl">
use strict;
use warnings;
use 5.010;

my $x = int 3.14;
say $x;          # выведет 3

my $z = int 3;
say $z;          # тоже выведет 3.

                 # Даже это выведет 3.
my $w = int 3.99999;
say $w;

say int -3.14;   # выведет -3
</code>

<h2>Случайные числа</h2>

Вызов функции Perl'а <hl>rand($n)</hl> вернет случайное дробное число от 0 до $n. Причем это может 
быть 0, но не $n.

Если <hl>$n = 42</hl>, то вызов <hl>rand($n)</hl> вернет случайное число от 0 до 42. Это может быть
0, но не 42. Например, 11.26462482109582.

Если мы не зададим значения, то <hl>rand()</hl> по умолчанию даст число от 0 до 1, включая 0 и 
исключая 1.

Объединив <hl>rand</hl> и <hl>int</hl>, мы сможем генерировать случайные целые числа.

<code lang="perl">
use strict;
use warnings;
use 5.010;

my $z = int rand 6;
say $z;
</code>

Это вернет число от 0 до 6. Оно может быть 0, но не 6. Так что это будет одно из чисел: 0,1,2,3,4,5.

Если же мы добавим к результату 1, то получим какое-то из чисел 1,2,3,4,5,6, как если бы бросили 
кубик.

<h2>Упражнение: игра &laquo;Угадай число&raquo;</h2>

Это начало игры, которую мы собираемся написать. Маленькой, но веселой игры.

Напишите скрипт, в которой, используя функцию <hl>rand()</hl>, компьютер &laquo;загадывает&raquo;
целое число от 1 до 200. Пользователь должен угадать число.

Когда пользователь вводит свою догадку, компьютер отвечает, было ли это число больше или меньше
загаданного.

Пока что <b>не надо</b> давать пользователю возможность угадывать несколько раз. Этим мы займемся в
будущих главах. Конечно, я не могу запретить вам читать статью о 
<a href="/tsikl-while">цикле while</a> в Perl, так что вы можете прочесть ее и с помощью этой 
конструкции дать пользователю возможность угадывать число несколько раз.





