=title undef, начальное значение и функция "defined" в Perl
=timestamp 2013-09-05T12:00:01
=indexes undef, defined
=status show
=original undef-and-defined-in-perl
=books beginner_book
=author szabgab
=translator spidamoo
=archive 1
=comments 1
=social 1

=abstract start

В некоторых языках программирования существует специальный способ указать, что "в данном поле не 
содержится никакого значения". В  <b>SQL</b>, <b>PHP</b> и <b>Java</b> это <hl>NULL</hl>. В 
<b>Python</b> это <hl>None</hl>. В <b>Ruby</b> это называется <hl>Nil</hl>.

В Perl такое значение называется <hl>undef</hl>.

Рассмотрим это в подробностях.

=abstract end

<h2>Откуда берется undef?</h2>

Когда вы объявляете скалярную переменную, не присвоив ей значение, ее содержимое получает значение
<hl>undef</hl>.

<code lang="perl">
my $x;
</code>

Некоторые функции возвращают <hl>undef</hl> при отказе. Другие могут вернуть undef, если вернуть 
больше нечего.

<code lang="perl">
my $x = do_something();
</code>

Функцию <hl>undef()</hl> можно использовать, чтобы сбросить значение переменной на <hl>undef</hl>:

<code lang="perl">
# какой-то код
undef $x;
</code>

Также можно использовать значение, возвращаемое функцией <hl>undef()</hl>, чтобы присвоить 
переменной <hl>undef</hl>:

<code lang="perl">
$x = undef;
</code>

Скобки после названия функции необязательны, так что в этом примере мы их опустили.

Можно видеть, что существует несколько способов присвоить переменной значение <b>undef</b>. Вопрос в
том, что будет, если мы станем использовать такую переменную?

Однако прежде чем мы разберемся с этим, давайте узнаем кое-что еще:

<h2>Как узнать, что переменная - undef?</h2>

Функция <hl>defined()</hl> возвращает <a href="/bulevy-znacheniya-v-perl">true</a>, если данная 
переменная <b>не undef</b>. Если переменная является <b>undef</b>, функция вернет 
<a href="/bulevy-znacheniya-v-perl">false</a>.

Ее используют так:

<code lang="perl">
use strict;
use warnings;
use 5.010;

my $x;

# какой-то код, который мог определить $x

if (defined $x) {
    say '$x is defined';
} else {
    say '$x is undef';
}
</code>


<h2>Какое значение на самом деле имеет undef?</h2>

Хотя <b>undef</b> обозначает отсутствие значения, им все равно можно пользоваться. В Perl есть два
значения-по-умолчанию, используемых вместо undef.

Если использовать undef-переменную в числовой операции, она ведет себя как 0.

Если использовать ее в строковой операции, она ведет себя как пустая строка.

Например:

<code lang="perl">
use strict;
use warnings;
use 5.010;

my $x;
say $x + 4, ;  # 4
say 'Foo' . $x . 'Bar' ;  # FooBar

$x++;
say $x; # 1
</code>

В этом примере переменная $x - являющаяся по умолчанию undef - ведет себя как 0 в сложении (+). В
конкатенации (.) она работает как пустая строка, и снова как 0 в авто-инкременте (++).

Тем не менее, такое ее использование имеет свои недостатки. Если вы включите предупреждения, 
использовав выражение <hl>use warnings</hl> (<a href="/ustanovka-i-nachalo-raboty-s-perl">что 
рекомендуется делать всегда</a>), то получите два предупреждения 
<a href="/use-of-uninitialized-value">use of uninitialized value</a> для первых двух операций, но не
для авто-инкремента:

<code>
Use of uninitialized value $x in addition (+) at ... line 6.
Use of uninitialized value $x in concatenation (.) or string at ... line 7.
</code>

Я думаю, что Perl не выдает предупреждения для авто-инкремента из-за своего великодушия. Позже мы
увидим, что это частая практика в случаях, когда нужно что-то сосчитать.

Конечно, вы можете избежать предупреждений, присвоив переменной подходящее начальное значение (0 или
пустую строку, в зависимости от ее предназначения), либо выборочно выключив предупреждения. Мы 
обсудим это в отдельной статье.
