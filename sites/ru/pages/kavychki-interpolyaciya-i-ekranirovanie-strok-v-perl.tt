=title Строки в Perl: кавычки, интерполяция и экранирование
=timestamp 2013-09-06T16:00:01
=indexes strings, ', ", \, escape character, interpolation, quote, embedded characters, q, qq
=status show
=original quoted-interpolated-and-escaped-strings-in-perl
=books beginner_book
=author szabgab
=translator spidamoo
=archive 1
=comments 1
=social 1

=abstract start

Понимание того, как работают строки, важно при изучении любого языка программирования, но в Perl они
часть самой сути языка. Особенно если вспомнить, что одна из расшифровок названия языка звучит как
<b>Practical Extraction and Reporting Language (Практический язык извлечения данных и составления 
отчетов)</b>, а для этого нужно много работать со строками.

=abstract end

Строки могут быть заключены в одинарные <hl>'</hl> или двойные <hl>"</hl> кавычки, поведение которых
слегка отличается.

<h2>Строки в одинарных кавычках</h2>

Если заключить строку в одинарные кавычки <hl>'</hl>, то почти все символы, кроме самой кавычки 
<hl>'</hl>, будут представлены так, как они написаны в коде.

<code lang="perl">
my $name = 'Foo';
print 'Привет $name, как дела?\n';
</code>

Этот код выведет:

<code>
Привет $name, как дела?\n
</code>

<h2>Строки в двойных кавычках</h2>

Строки, заключенные в двойные кавычки <hl>"</hl> обеспечивают интерполяцию (переменные, включенные в
строку заменяются на их содержимое), а также в них заменяются специальные escape-последовательности,
например <hl>\n</hl> заменяется на перевод строки, а <hl>\t</hl> - на табуляцию.

<code lang="perl">
my $name = 'Foo';
my $time  = "сегодня";
print "Привет $name,\nкак у тебя дела $time?\n";
</code>

Вывод:

<code>
Привет Foo,
как у тебя дела сегодня?

</code>

Обратите внимание на <hl>\n</hl> после запятой в строке и еще один в конце строки.

Для простых строк, таких как 'Foo' и "сегодня", в которых не встречаются символы <hl>$</hl>, 
<hl>@</hl>, и <hl>\</hl>, неважно, в какие кавычки они заключены.

Следующие две строки работают одинаково:

<code lang="perl">
$name = 'Foo';
$name = "Foo";
</code>


<h2>Адреса E-mail</h2>

Поскольку <hl>@</hl> тоже интерполируется в строках с двойными кавычками, стоит обратить внимание на
написание адресов e-mail.

В строках с одинарными кавычками <hl>@</hl> не интерполируется.

В случае с двойными кавычками такой код
<code lang="perl">
use strict;
use warnings;
my $broken_email  = "foo@bar.com";
</code>
выдаст ошибку:
<a href="/global-symbol-requires-explicit-package-name">Global symbol "@bar" requires explicit 
package name at ... line ...</a> и предупреждение: <b>Possible unintended interpolation of @bar in 
string at ... line ...</b>

Второе как раз и может подсказать нам, где искать проблему.

С другой стороны, этот код с адресом e-mail в одиночных кавычках, будет работать.

<code lang="perl">
use strict;
use warnings;
my $good_email  = 'foo@bar.com';
</code>

Но что если вам и нужна интерполяция скалярных переменных, и в строке должен быть знак <hl>@</hl>?

<code lang="perl">
use strict;
use warnings;
my $name = 'foo';
my $good_email  = "$name\@bar.com";

print $good_email; # foo@bar.com
</code>

Вы всегда можете <b>экранировать</b> специальные символы, в этом слуяае знак at <hl>@</hl> с помощью
так называемого <b>экранирующего символа</b>, которым является обратный слеш <hl>\</hl>.

<h2>Использование знака доллара $ в строках с двойными кавычками</h2>

Похожим образом, если вы хотите включить в строку с двойными кавычками знак <hl>$</hl>, вы можете 
его тоже экранировать:

<code lang="perl">
use strict;
use warnings;
my $name = 'foo';
print "\$name = $name\n";
</code>

Вывод:

<code>
$name = foo
</code>

<h2>Экранирование экранирующего символа</h2>

В редких случаях вам может понадобиться включить в строку обратный слеш. Если написать <hl>\</hl> в
строке с двойными кавычками, Perl решит, что вы хотите экранировать следующий символ и проделает 
свою магию.

Впрочем, не беспокойтесь. Можно указать Perl'у, что нам это не надо, экранировав экранирующий 
символ:

Просто нужно добавить еще один обратный слеш:

<code lang="perl">
use strict;
use warnings;
my $name = 'foo';
print "\\$name\n";
</code>

<code>
\foo
</code>

Я знаю, что экранирование экранирующего символа это немного странно, но, в общем-то, так это 
работает в любом языке программирования.

Если вы хотите досконально разобраться в экранировании, попробуйте что-нибудь такое:

<code lang="perl">
print "\\\\n\n\\n\n";
</code>

посмотрите, на вывод:

<code>
\\n
\n
</code>

и попробуйте разобраться с этим самостоятельно.

<h2>Экранирование двойных кавычек</h2>

Мы узнали, что можно помещать скалярные переменные в строки с двойными кавычками, а можно 
экранировать знак <hl>$</hl>.

Мы узнали, как использовать экранирующий символ <hl>\</hl> и как экранировать его самое.

А что, если нам нужно вывести двойную кавычку в строке с двойными кавычками?

В этом коде содержится синтаксическая ошибка:

<code lang="perl">
use strict;
use warnings;
my $name = 'foo';
print "The "name" is "$name"\n";
</code>

когда Perl видит двойную кавычку перед словом "name", он думает, что строка закончилась, и жалуется
на то, что слово <b>name</b> - <a href="/bareword-v-perl">bareword</a>.

Как вы могли догадаться, нужно экранировать символ <hl>"</hl> в строке:

<code lang="perl">
use strict;
use warnings;
my $name = 'foo';
print "The \"name\" is \"$name\"\n";
</code>

Вывод:

<code>
The "name" is "foo"
</code>

Это работает, хотя немного сложно читаемо.


<h2>qq, оператор double-q</h2>

Здесь уместно использовать <hl>qq</hl>, или оператор double-q:

<code lang="perl">
use strict;
use warnings;
my $name = 'foo';
print qq(The "name" is "$name"\n);
</code>

Для непривычного глаза qq() может выглядеть как вызов функции, но это не так. <hl>qq</hl> это
оператор, и скоро вы узнаете, что еще он может делать, но сперва позвольте мне объяснить это.

Мы заменили двойные кавычки <hl>"</hl> вокруг строки на скобки оператора <hl>qq</hl>. Это значит,
что двойные кавычки больше не имеют специального значения в этой строке, так что нам больше не нужно
экранировать их. Таким образом, код становится куда читаемее. Я бы сказал, что это прекрасно, если 
бы не боялся гнева Python-программистов.

Но что если вы хотите включить в строку скобки?

<code lang="perl">
use strict;
use warnings;
my $name = 'foo';
print qq(The (name) is "$name"\n);
</code>

Нет проблем. Если они сбалансированы (то есть количество открывающих <hl>(</hl> и закрывающих 
<hl>)</hl> скобок совпадает, и перед закрывающей скобкой всегда есть открывающая), Perl сможет 
понять это.

Я знаю. Теперь вы хотите все сломать, поставив закрывающую скобку перед открывающей:

<code lang="perl">
use strict;
use warnings;
my $name = 'foo';
print qq(The )name( is "$name"\n);
</code>

Действительно, perl выдаст вас синтаксическую ошибку, указывающую на "name" как на 
<a href="/bareword-v-perl">bareword</a>. Ведь он не может понять все, верно?

Конечно, вы можете экранировать скобки в строке с помощью <hl>\)</hl> и <hl>\(</hl>, но в эту 
ловушку мы уже попадали. Нет, спасибо!

Должен быть способ получше!

Помните, выше я говорил, что <hl>qq</hl> - это оператор, а не функция. Так что в нем есть свои
хитрости, верно?

Что если заменить круглые скобки фигурными? <hl>{}</hl>:

<code lang="perl">
use strict;
use warnings;
my $name = 'foo';
print qq{The )name( is "$name"\n};
</code>

Это сработает и выведет строку так, как мы и хотели:

<code>
The )name( is "foo"
</code>

(хотя я не могу представить, зачем бы мне понадобилось выводить что-нибудь вроде этого...)

А теперь <a href="http://perl.plover.com/yak/presentation/samples/slide027.html">парень во втором
ряду</a> поднимает руку и спрашивает, что если нам нужны и круглые, и квадратные скобки в строке
<b>и<b/> они должны быть несбалансированы?

Что-то вроде этого, верно?

<code lang="perl">
use strict;
use warnings;
my $name = 'foo';
print qq[The )name} is "$name"\n];
</code>

вывод:

<code>
The )name} is "foo"
</code>

... но ведь можно использовать и квадратные скобки, так?


<h2>q, оператор single-q</h2>

Существует еще оператор <hl>q</hl>, сходный с <hl>qq</hl>. Он тоже позволяет выбирать разделители
для строки, но работает как одиночные кавычки <hl>'</hl>: он <b>НЕ</b> интерполирует переменные.

<code lang="perl">
use strict;
use warnings;
print q[The )name} is "$name"\n];
</code>

вывод:

<code>
The )name} is "$name"\n
</code>


