=title Многомерные хеши в Perl
=timestamp 2014-03-24T10:25:01
=indexes hash, Data::Dumper
=status show
=books beginner_book
=author szabgab
=translator name2rnd
=archive 1
=comments 1
=social 1

=abstract start

Каждое значение в хеше в Perl может быть ссылкой на другой хеш.
Если делать все правильно, то можно сделать двумерные или многомерные хеши.

=abstract end

Посмотрим несколько примеров:

<code lang="perl">
#!/usr/bin/perl
use strict;
use warnings;

use Data::Dumper qw(Dumper);

my %grades;
$grades{"Foo Bar"}{Mathematics}   = 97;
$grades{"Foo Bar"}{Literature}    = 67;
$grades{"Peti Bar"}{Literature}   = 88;
$grades{"Peti Bar"}{Mathematics}  = 82;
$grades{"Peti Bar"}{Art}          = 99;

print Dumper \%grades;
print "----------------\n";

foreach my $name (sort keys %grades) {
    foreach my $subject (keys %{ $grades{$name} }) {
        print "$name, $subject: $grades{$name}{$subject}\n";
    }
}
</code>

Запустив скрипт, получим следующее:

<code>
$VAR1 = {
          'Peti Bar' => {
                          'Mathematics' => 82,
                          'Art' => 99,
                          'Literature' => 88
                        },
          'Foo Bar' => {
                         'Mathematics' => 97,
                         'Literature' => 67
                       }
        };
----------------
Foo Bar, Mathematics: 97
Foo Bar, Literature: 67
Peti Bar, Mathematics: 82
Peti Bar, Art: 99
Peti Bar, Literature: 88
</code>

Сначала мы напечатали весь хеш, а потом через разделительную линию прошлись
по структуре вручную, чтобы посмотреть, как осуществляется доступ к элементам.
Если вы не очень хорошо знакомы с функцией Dumper из Data::Dumper, то <hl>$VAR1</hl>
обозначает начало вывода. Не волнуйтесь об этом.

Важно то, что входной параметр функции <hl>Dumper</hl> это ссылка на структуру данных, и поэтому мы поставили 
обратный слеш <hl>\</hl> перед <hl>%grades</hl> (сделали ссылку).

Порядок ключей в хеше произвольный.

<h2>Объяснение</h2>

Посмотрим на детали.

Мы создали хеш с названием <hl>%grades</hl>. Это простой одномерный хеш, который содержит
пары ключ-значение. Ничего особенного.

Следующая строка: <hl>$grades{"Foo Bar"}{Mathematics}   = 97;</hl>

Здесь создается пара ключ-значение в хеше <hl>%grades</hl>, где ключом является
<hl>Foo Bar</hl>, а значением ссылка на другой, вложенный хеш.
И этот вложенный хеш не имеет имени. Единственный способ получить к нему доступ - через ссылку в хеше <hl>%grades</hl>.
Здесь создается одна пара ключ-значение, где ключ <hl>Mathematics</hl> и значение <hl>97</hl>.

В отличие от Python в Perl создание внутреннего хеша автоматическое и это поведение называют обычно 
<a href="http://perlmaven.com/pro/autovivification">autovivification</a>.

Если вы используете Data::Dumper для вывода содержимого <hl>%grades</hl> сразу 
после первого присвоения значения, то получите такой результат:

<code>
$VAR1 = {
          'Foo Bar' => {
                         'Mathematics' => 97
                       }
        };
</code>

Здесь внешняя пара фигурных скобок описывает <hl>%grades</hl>, в то время как 
внутренняя пара скобок другой хеш - вложенный.

<h2>Создаем третий хеш</h2>

Код ниже содержит три присваивания, запустите его:

<code lang="perl">
#!/usr/bin/perl
use strict;
use warnings;

use Data::Dumper qw(Dumper);

my %grades;
$grades{"Foo Bar"}{Mathematics}   = 97;
$grades{"Foo Bar"}{Literature}    = 67;
$grades{"Peti Bar"}{Literature}   = 88;

print Dumper \%grades;
</code>

и получите это:

<code>
$VAR1 = {
          'Peti Bar' => {
                          'Literature' => 88
                        },
          'Foo Bar' => {
                         'Literature' => 67,
                         'Mathematics' => 97
                       }
        };
</code>

Здесь вы увидите одну внешнуюю пару фигурных скобок и две внутренних пары. Таким образом, 
у нас получилось три разных хеша.

Полученных хеши не "сбалансированные" и не "симметричные". Каждый хеш содержит свои 
собственные ключи и значения. В хешах могут быть и одинаковые ключи.

<h2>Обход хеша вручную</h2>

Data::Dumper очень удобный способ отладки, но для вывода значений пользователю он не подходит.
Посмотрим, как мы можем пройти по всем значениям двумерного хеша.

Команда <hl>keys %grades</hl> вернет все ключи <hl>%grades</hl>, то есть: "Peti Bar" и
"Foo Bar" в произвольном порядке. Команда <hl>sort keys %grades</hl> вернет ключи отсортированными.

Таким образом, если использовать цикл <hl>foreach</hl>, то <hl>$name</hl> будет содержать
"Peti Bar" или "Foo Bar".

Если выведем соответствующие ключам значения из <hl>%grades</hl> вот таким образом:

<code lang="perl">
foreach my $name (sort keys %grades) {
    print "$grades{$name}\n";
}
</code>

то получим вот это:

<code>
HASH(0x7f8e42003468)
HASH(0x7f8e42802c20)
</code>

Это "дружественное" представление ссылок на "внутренние" хеши.

Разыменуем их с помощью <hl>%{ }</hl> вот так:

<hl>%{ $grades{$name} }</hl>

Если вызвать функцию <hl>keys</hl>, передав ей в качестве аргумента это выражение,
то получим список ключей внутреннего хеша.
Для <hl>$name</hl> "Peti Bar" мы получим 'Mathematics', 'Art', and 'Literature'.
Для "Foo Bar" получим только 'Mathematics' и 'Literature'.

С помощью переменной <hl>$subject</hl> и вложенного цикла <hl>foreach</hl> мы 
получим доступ к вложенным хешам, используя такую конструкцию <hl>$grades{$name}{$subject}</hl> 
для получения оценок всех студентов.

<h2>Меньше, чем два измерения</h2>

В этом примере мы рассмотрели двумерный хеш, но Perl не имеет особых требований и ограничений на этот счет,
поэтому мы можем добавить еще значение в наш <hl>%grades</hl>, которое не будет вложенным хешем, например:

<hl>$grades{Joe} = 'absent';</hl>

Здесь ключ Joe не имеет второго уровня. И это прекрасно будет работать.

Результат будет таким:

<code>
$VAR1 = {
          'Peti Bar' => {
                          'Literature' => 88,
                          'Mathematics' => 82,
                          'Art' => 99
                        },
          'Foo Bar' => {
                         'Mathematics' => 97,
                         'Literature' => 67
                       },
          'Joe' => 'absent'
        };
----------------
HASH(0x7fabf8803468)
Foo Bar, Mathematics: 97
Foo Bar, Literature: 67
absent
Can't use string ("absent") as a HASH ref while "strict refs" in use at files/hash.pl line 20.
</code>

Data::Dumper работает отлично и показывает структуру верно (Joe не имеет фигурных скобок, 
так как не содержит вложенный хеш), но часть кода, где мы вручную проходим наш хеш, 
содержит ошибку. <a href="/strict">use strict</a> остановил программу, потому что мы 
пытались использовать строку 'absent' как <a href="http://perlmaven.com/symbolic-reference-in-perl">символьную ссылку</a>.
Отличная штука.

<h2>Больше двух измерений</h2>

Мы также можем сделать больше двух измерений. Например, 'Foo Bar' может иметь 'Art', а тот в свою очередь содержать 
оценки по нескольким разным подгруппам:

<code lang="perl">
$grades{"Foo Bar"}{Art}{drawing}   = 34;
$grades{"Foo Bar"}{Art}{theory}    = 47;
$grades{"Foo Bar"}{Art}{sculpture}  = 68;
</code>

Удалим наконец нашего Joe, чтобы он перестал нас беспокоить.
Получим вот это:

<code>
VAR1 = {
          'Peti Bar' => {
                          'Mathematics' => 82,
                          'Art' => 99,
                          'Literature' => 88
                        },
          'Foo Bar' => {
                         'Art' => {
                                    'sculpture' => 68,
                                    'theory' => 47,
                                    'drawing' => 34
                                  },
                         'Mathematics' => 97,
                         'Literature' => 67
                       }
        };
----------------
Foo Bar, Art: HASH(0x7fbe9a027d40)
Foo Bar, Mathematics: 97
Foo Bar, Literature: 67
Peti Bar, Mathematics: 82
Peti Bar, Art: 99
Peti Bar, Literature: 88
</code>

Data::Dumper все еще отлично работает и показывает все наши вложенные хеши.

К сожаление, ручной проход по хешу опять не работает как надо, хотя в этот раз у нас нет ошибки.
Мы просто получили ссылку на внутреннюю структуру Art из "Foo Bar".

Мы можем сделать хеш с еще более смешанной вложенностью.

<h2>Смешанная вложенность</h2>

Допустим 'Foo Bar' может иметь другой предмет, называемый 'Programming', который оценивается
по каждому отдельному заданию. Задания не имеют названий, просто пронумерованы: 0, 1, 2, 3 и тд.
Мы можем конечно сделать хеш, где 0, 1, 2, 3 и тд будут ключами, но лучше
хранить их в массиве:

<code lang="perl">
$grades{"Foo Bar"}{Programming}[0]  = 90;
$grades{"Foo Bar"}{Programming}[1]  = 91;
$grades{"Foo Bar"}{Programming}[2]  = 92;
</code>

Data::Dumper покажет их нам в квадратных скобках::

<code>
$VAR1 = {
          'Foo Bar' => {
                         'Literature' => 67,
                         'Programming' => [
                                            90,
                                            91,
                                            92
                                          ],
                         'Mathematics' => 97,
                         'Art' => {
                                    'sculpture' => 68,
                                    'theory' => 47,
                                    'drawing' => 34
                                  }
                       },
          'Peti Bar' => {
                          'Mathematics' => 82,
                          'Art' => 99,
                          'Literature' => 88
                        }
        };
----------------
Foo Bar, Literature: 67
Foo Bar, Programming: ARRAY(0x7fc409028508)
Foo Bar, Mathematics: 97
Foo Bar, Art: HASH(0x7fc409027d40)
Peti Bar, Mathematics: 82
Peti Bar, Art: 99
Peti Bar, Literature: 88
</code>

Наш проход по хешу вручную не может вывести эти элементы, и выводит не <hl>HASH(0x7fc409027d40)</hl>, а 
<hl>ARRAY(0x7fc409028508)</hl>, указывая, что это ссылка на массив, а не на хеш.
