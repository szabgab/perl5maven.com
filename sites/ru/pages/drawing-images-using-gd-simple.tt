=title Рисуем изображения в Perl, используя GD::Simple
=timestamp 2014-04-21T22:30:01
=indexes GD, GD::Simple
=status show
=author szabgab
=archive 1
=comments 1
=social 1
=original drawing-images-using-gd-simple
=translator name2rnd

=abstract start

Модуль <a href="https://metacpan.org/pod/GD::Simple">GD</a> на CPAN это интерфейс к графической библиотеке GD.
Lincoln D. Stein создал и до сих пор поддерживает этот модуль.

<a href="https://metacpan.org/pod/GD::Simple">GD::Simple</a> это обертка к GD модулю, которая предоставляет 
более простой интерфейс для создания изображений.
Следующий пример основан на примере из модуля.

=abstract end

<style>
img.bordered {
  border:solid 1px;
}
</style>

<h2>Красный квадрат (new, bgcolor, fgcolor, rectangle, png)</h2>

<code lang="perl">
use strict;
use warnings;
use GD::Simple;
 
# create a new image (width, height)
my $img = GD::Simple->new(200, 100);

# draw a red rectangle with blue borders
$img->bgcolor('red');
$img->fgcolor('blue');
$img->rectangle(10, 10, 50, 50); # (top_left_x, top_left_y, bottom_right_x, bottom_right_y)
                                 # ($x1, $y1, $x2, $y2)

# convert into png data
open my $out, '>', 'img.png' or die;
binmode $out;
print $out $img->png;
</code>

<img src="http://perlmaven.com/img/gd_simple/red_square.png" alt="Red square" class="bordered" />

(В этом примере рамка была добавлена вокруг изображения средствами CSS, чтобы показать реальный размер изображения.)
<hl>my $img = GD::Simple->new(200, 100);</hl> создает изображение. Принимает два параметра: <hl>(ширина, высота)</hl>.

Можно сказать, что $img это "перо", и методы объекта $img - это команды "перу".
В примере выше мы устанавливаем цвет заливки, используя <hl>bgcolor</hl>, 
и цвет рамки с помощью <hl>fgcolor</hl>, чтобы она была синей.

Метод <hl>rectangle</hl> нарисует прямоугольник, используя цвет рамки и заливки, он принимает 4 параметра (для двух вершин прямоугольника):
<hl>(верхняя левая x, верхняя левая y, нижняя правая x, нижняя правая y)</hl>, 
где координаты <hl>(0,0)</hl> соответствуют верхнему левому углу нашего изображения. 
Следующий пример будет более понятен.

Последние три строки примера выше конвертируют внутреннее представление изображения в формат PNG и сохраняют его в файл img.png.

<h2>Пустой зеленый прямоугольник</h2>

Добавим в наш пример выше следующий код (перед тем, как сохранить изображение):

<code lang="perl">
# рисует пустой прямоугольник с зеленой рамкой
$img->bgcolor(undef);
$img->fgcolor('green');
$img->rectangle(20, 40, 100, 60);
</code>

<img src="http://perlmaven.com/img/gd_simple/green_rectangular.png" alt="green rectangular" class="bordered" />

В этом примере заливка прозрачная, таким образом, часть прямоугольника, которая перекрывает красный квадрат, остается красной, а оставшаяся часть - белой.
Координаты, переданные в метод <hl>rectangle</hl>, теперь более понятно показывают, что от чего зависит.

<h2>Рисуем прямую зеленую линию (moveTo, lineTo)</h2>

В следующей части нашего примера мы нарисуем прямую линию. Для этого мы используем метод 
<hl>lineTo</hl>, который рисует линию от текущей позиции "пера", до 
переданных ему координат <hl>(x, y)</hl>, отсчитанных от левого верхнего угла изображения.

Для перемещения нашего "пера"" в конкретное место, используем метод <hl>moveTo</hl>,
принимающий две координаты <hl>(x, y)</hl>.

<code lang="perl">
# move to (30, 0) and draw a green line to (100, 40)
$img->moveTo(30, 0);   # (x, y)
$img->lineTo(100, 40); # (x, y)
</code>

<img src="http://perlmaven.com/img/gd_simple/green_line.png" alt="green line" class="bordered" />

<h2>Рисует сплошной оранжевый эллипс</h2>

Дальше мы нарисуем эллипс, вписанный в прямоугольник, нарисованный ранее.
Для начала нам нужно переместить наше "перо" в центр прямоугольника, который также будет центром эллипса.
Прямоугольник выше имеет следующие координаты: (20, 40, 100, 60).

Центр по горизонтали будет <hl>(left_x + right_x)/2  = (20+100)/2 = 60</hl>.

Центр по вертикали будет <hl>(top_y + bottom_y)/2  = (40+60)/2 = 50</hl>.

Сначала нам нужно вызвать метод <hl>moveTo(60, 50)</hl> для перемещения "пера" в наш центр.

Общая ширина эллипса будет <hl>(right_x - left_x) = 100-20 = 80</hl>.

Общая высота эллипса будет <hl>(bottom_y - top_y) = 60 - 40 = 20</hl>.

После установки цвета заливки и рамки нарисуем эллипс с помощью <hl>ellipse(80, 20)</hl>.

<code lang="perl">
# draw a solid orange ellipse
$img->moveTo(60, 50);    # (x, y)
$img->bgcolor('orange');
$img->fgcolor('orange');
$img->ellipse(80, 20);   # (width height)
</code>

<img src="http://perlmaven.com/img/gd_simple/orange_ellipse.png" alt="orange ellipse" class="bordered" />

<h2>Рисуем дугу</h2>

Википедия определяет <a href="http://en.wikipedia.org/wiki/Arc_(geometry)">дугу</a> 
как часть круга, или в более общем случае, как часть эллипса.

Чтобы нарисовать дугу, нам сначала нужно установить "перо" в начальную точку дуги, которая будет центром дуги,
и передать параметры: <hl>($width, $height, $start, $end, $style)</hl> (width - ширина, height - высота).

Если ширина и высота одинаковые, тогда мы получим часть окружности.
<hl>$start</hl> и <hl>$end</hl> это градусы от 0 до 360. Ноль - это крайняя правая точка эллипса, градусы увеличиваются по часовой стрелке.
Следовательно 0, 90 будет описывать нижнюю правую четверть.

<code lang="perl">
# draw an arc filled with dark violet
$img->moveTo(100, 50);
$img->bgcolor('darkviolet');
$img->fgcolor('darkviolet');
$img->arc(60, 60, 0, 90, gdEdged);
</code>

<img src="http://perlmaven.com/img/gd_simple/dark_violet_arc.png" alt="dark violet arc" class="bordered" />

<h2>Рисуем теекст</h2>

Метод <hl>string</hl> может добавить текст к изображению.

<code lang="perl">
# draw a string at (10,30) using the default built-in font
$img->bgcolor('black');
$img->fgcolor('black');
$img->moveTo(10, 30);
$img->string('Perl Maven');
</code>

<img src="http://perlmaven.com/img/gd_simple/text.png" alt="" class="bordered" />

Конечно, GD и GD::Simple умеют гораздо больше всего, но вы уже знаете кое-что, чтобы начать их использовать.
