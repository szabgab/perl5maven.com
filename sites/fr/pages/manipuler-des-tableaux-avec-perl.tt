=title Manipuler des tableaux avec Perl : shift, unshift, push, pop
=timestamp 2013-06-08T14:45:56
=indexes tableau, shift, unshift, push, pop, fonction prédéfinie
=status show
=original manipulating-perl-arrays
=books beginner_book
=author szabgab
=translator oval
=index 1
=archive 1
=feed 1
=comments 1
=social 1

=abstract start

En plus de permettre un accès direct à chaque élément d'un tableau,
Perl fournit également diverses autres façons intéressantes afin de manipuler des tableaux.
En particulier, il y a des fonctions qui permettent d'utiliser très facilement et efficacement un tableau Perl comme une pile ou une file d'attente.

=abstract end

<h2>La fonction prédéfinie pop</h2>

La fonction <hl>pop</hl> enlève et retourne le dernier élément d'un tableau.

<code lang="perl">
my @noms = ('Foo', 'Bar', 'Baz');
my $dernier = pop @noms;

print "$dernier\n";  # Baz
print "@noms\n";     # Foo Bar
</code>

Dans ce premier exemple, vous allez voir comment, étant donné un tableau de trois éléments,
la fonction <hl>pop</hl> enlève le dernier élément (celui avec l'indice le plus élevé) de ce tableau et le renvoie.

Dans le cas particulier d'un tableau donné vide, la fonction <hl>pop</hl>
retourne <a href="http://perlmaven.com/undef-and-defined-in-perl">undef (EN)</a>.

<h2>La fonction prédéfinie push</h2>

La fonction <hl>push</hl> peut ajouter une ou plusieurs valeurs à la fin d'un tableau
(En fait, il peut également ajouter zéro valeur, mais ce n'est pas très utile, n'est-ce pas?).

<code lang="perl">
my @noms = ('Foo', 'Bar');
push @noms, 'Moo';
print "@noms\n";     # Foo Bar Moo

my @autres = ('Darth', 'Vader');
push @noms, @autres;
print "@noms\n";     # Foo Bar Moo Darth Vader
</code>

Dans cet exemple, au départ, le tableau a deux éléments.

Lors du premier appel à <hl>push</hl>, nous avons ajouté une valeur scalaire unique à la fin du tableau <hl>@noms</hl>.
Ainsi, ce tableau a gagné un élément, ayant donc trois éléments au total.

Lors du deuxième appel à <hl>push</hl>, nous avons ajouté les valeurs contenues dans le tableau <hl>@autres</hl> à la fin du tableau <hl>@noms</hl>.
Ainsi, ce tableau a gagné deux éléments, ayant donc cinq éléments au total.

<h2>La fonction prédéfinie shift</h2>

La fonction <hl>shift</hl> déplace l'ensemble des éléments d'un tableau vers la gauche,
en supposant que vous imaginez le tableau commencer par la gauche.
Le premier élément du tableau est enlevé et devient la valeur de retour de la fonction.

Après l'opération, le tableau a un élément de moins.
Elle est assez similaire à <hl>pop</hl>, mais elle fonctionne au début du tableau.

<code lang="perl">
my @noms = ('Foo', 'Bar', 'Moo');
my $premier = shift @noms;
print "$premier\n";  # Foo
print "@noms\n";     # Bar Moo
</code>

Dans le cas particulier d'un tableau donné vide, la fonction <b>shift</b>
retourne <a href="http://perlmaven.com/undef-and-defined-in-perl">undef (EN)</a>.

<h2>La fonction prédéfinie unshift</h2>

La fonction <hl>unshift</hl> est la fonction inverse de la fonction <hl>shift</hl>.
<hl>unshift</hl> aura une ou plusieurs valeurs (ou zéro si c'est ce que vous voulez) qui sera (seront)
placée(s) au début du tableau en déplaçant tous les autres éléments vers la droite.

<code lang="perl">
my @noms = ('Foo', 'Bar');
unshift @noms, 'Moo';
print "@noms\n"; # Moo Foo Bar 

my @autres = ('Darth', 'Vader');
unshift @noms, @autres;
print "@noms\n"; # Darth Vader Moo Foo Bar
</code>

Suivant l'exemple ci-dessus, vous pouvez appeler cette fonction avec en premier argument un tableau (<hl>@noms</hl> ) suivi par :
<ul>
<li>une seule valeur scalaire ('Moo') qui devient alors le premier élément du tableau</li>
<li>un deuxième tableau (<hl>@autres</hl>) dont les éléments seront copiés au début du premier tableau dont les autres éléments seront déplacés vers des indices plus élevés</li>
</ul>
