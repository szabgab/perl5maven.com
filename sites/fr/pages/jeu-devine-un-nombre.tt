=title Jeu "Devine un nombre"
=timestamp 2013-05-26:45:17
=indexes rand, hasard, int, entier
=status show
=original number-guessing-game
=books beginner_book
=author szabgab
=translator oval
=index 1
=archive 1
=feed 1
=comments 1
=social 1

=abstract start

Dans cet article du <a href="/perl-tutorial>"tutoriel Perl</a>, nous allons commencer à construire un jeu tout petit, masis ô combien amusant.
Ce fut le premier jeu que j'ai écrit quand j'étais au lycée, avant même que Perl 1.0 soit sorti.

=abstract end

Pour écrire ce jeu, nous devons apprendre deux sujets simples et sans rapport entre eux :
<b>Comment générer des nombres aléatoires en Perl</b> et
<b>Comment obtenir la partie entière d'un nombre</b>.

<h2>Partie entière d'un nombre rationnel</h2>

La fonction prédéfinie <hl>int()</hl> renvoie la partie entière de son paramètre :

<code lang="perl">
use strict;
use warnings;
use 5.010;
 
my $x = int 3,14;
say $x; # va afficher 3
 
my $z = int 3;
say $z; # va aussi a1fficher 3
 
my $w = int 3,99999;
say $w; # même ceci affichera 3
 
say int -3,14; # va afficher -3
</code>

<h2>Nombres aléatoires</h2>

Un appel à ila fonction prédéfinie <hl>rand($n)</hl> de Perl retourne un nombre aléatoire rationnel compris entre 0 et $n, 0 inclus mais $n exclus.

Si <hl>$n = 42</hl>, alors un appel à <hl>rand($n)</hl> retourne un nombre aléatoire compris entre 0 inclus mais 42 exclus. Par exemple : 11,264624821095826.

Si nous ne donnons aucune valeur, alors <hl>rand()</hl> par défaut retourne des valeurs comprises entre 0 et 1, 0 inclus mais 1 exclus.

Combiner <hl>rand</hl> et <hl>int</hl> permet de générer des nombres aléatoires entiers.

Le code suivant :

<code lang="perl">
use strict;
use warnings;
use 5.010;
 
my $z = int rand 6;
say $z;
</code>

retourne un des nombres entiers compris entre 0 et 6, 0 inclus mais 6 exclus. La valeur de retour peut donc être l'un des nombres suivants : 0,1,2,3,4,5.

Si nous ajoutons maintenant 1 au résultat, alors nous obtenons l'un des nombres 1,2,3,4,5,6, ce qui est équivalent à jeter un dé à six faces.

<h2>Exercice : jeu devine un nombre</h2>

C'est le début d'un jeu que nous allons écrire. Un jeu petit, mais amusant.

Écrire un script dans lequel la fonction prédéfinie <hl>rand()</hl> permet à l'ordinateur de "penser" à un nombre entier compris entre 1 et 200. L'utilisateur doit deviner ce nombre.

Après que l'utilisateur a écrit au clavier le nombre auquel il pensait, l'ordinateur indique si ce nombre donné était plus grand ou plus petit que le nombre "pensé".

A ce stade, <b>il n'est pas nécessaire</b> de permettre à l'utilisateur de deviner à plusieurs reprises.
Nous y travaillerons dans un autre article. Bien sûr, je ne vais pas vous empêcher de lire la <a href="http://www.perlmaven.com/while-loop">boucle while en Perl (EN)</a>.
Vous pouvez lire cet article et laisser l'utilisateur deviner à plusieurs reprises.
