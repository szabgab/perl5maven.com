=title How to convince Meta CPAN to show a link to the version control system of a distribution?
=timestamp 2013-01-03T10:45:56
=indexes Perl, Perl 5, CPAN, Git, Github, SVN, Subversion, VCS, META, ExtUtils::MakeMaker, Module::Build, Module::Install, Dist::Zilla, CPAN::Meta::Spec
=status show
=author szabgab
=index 1
=archive 1
=feed 1
=comments 1
=social 1

=abstract start

When you look at either <a href="https://www.metacpan.org/">META CPAN</a>, o at
<a href="http://search.cpan.org/">search.cpan.org</a>, you will see that some modules
have a link to Github or some other place where they host their project.

On search.cpan.org it is a plain link next to the title <b>Repository</b>, on Meta CPAN
it is a link, or a pop-up under the title <b>Clone repository</b> depending on the type of
repository. (Github gets nice pop-ups, private repositories tend to get simple links.)

=abstract end

Both sites take the link to the Version Contol system from the META files included in the CPAN distributons.
Either META.yml, or the newer META.json. (They should only differ in their format.)

As the META files are usually generated automatically when the distribution is released
by the author, I am going to show you how you can tell the 4 main packaging systems
to include the repository link.

In the examples I'll use the link to the repository of <a href="https://metacpan.org/module/Task::DWIM">Task::DWIM</a>,
which is an experimental distribution listing all the modules included in a <a href="http://dwimperl.com/">DWIM Perl</a>
distribution.

<h2>ExtUtils::MakeMaker</h2>

If you use <a href="https://metacpan.org/module/ExtUtils::MakeMaker">ExtUtils::MakeMaker</a> add the following to your Makefile.PL
as parameter in the <b>WriteMakefile</b> function:

<code lang="perl">
META_MERGE        => {
     resources => {
         repository  =>  'https://github.com/dwimperl/Task-DWIM',
     },
},
</code>

If your version of ExtUtils::MakeMaker does not yet support this, just upgrade ExtUtils::MakeMaker.

<h2>Module::Build</h2>

If you use <a href="https://metacpan.org/module/Module::Build">Module::Build</a>, add the following to Build.PL,
in the <b>Module::Build->new</b> call:

<code lang="perl">
meta_merge => {
    resources => {
            repository => 'https://github.com/dwimperl/Task-DWIM'
    }
},
</code>

<h2>Module::Install</h2>

If you use <a href="https://metacpan.org/module/Module::Install">Module::Install</a> add the following to Makefile.PL:

<code lang="perl">
repository 'https://github.com/dwimperl/Task-DWIM';
</code>

<h2>Dist::Zilla</h2>

If you use <a href="http://dzil.org/">Dist::Zilla</a>, the
<a href="https://metacpan.org/module/Dist::Zilla::Plugin::Repository">Dist::Zilla::Plugin::Repository</a>
will automatcally add the link to your repository, though you can also specify it manually.

<code lang="perl">
[MetaResources]
repository.url = https://github.com/dwimperl/Task-DWIM.git
</code>

A detailed version would include more details as in the following example. As I can see these parts are only
included in the META.json file and not in the META.yml file. In order to generate that file, you'll also need
to inlcude the <a href="https://metacpan.org/module/Dist::Zilla::Plugin::MetaJSON">MetaJSON plugin</a> of Dist::Zilla.

<code lang="perl">
[MetaResources]
repository.web = https://github.com/dwimperl/Task-DWIM
repository.url = https://github.com/dwimperl/Task-DWIM.git
repository.type = git

[MetaJSON]
</code>

There are other ways to <a href="http://www.lowlevelmanager.com/2012/05/dzil-plugins-github-vs-githubmeta.html">add
the repository links</a> to the META files when using Dist::Zilla.

<h2>Why shall I add this link?</h2>

It's simple. The easier it is to send patches to the most recent version of your module,
the more likely you'll get them.

Also you might have already made some changes to your module since the latest release.
You might have already fixed the bug I'd like to fix. If can see your repository we can avoid duplicate work.

<h2>Other resources</h2>

If you are already dealing with this, you could add some other resources as well.
The <a href="https://metacpan.org/module/CPAN::Meta::Spec#resources">CPAN META Specification</a> have all that listed.
If something is unclear there, just ask.

<h2>Licenses</h2>

In an other article I showed <a href="/how-to-add-the-license-field-to-meta-files-on-cpan">how to add the license information to the META files of CPAN distributions</a>.
If you had a public repository, it would be easier for others to send that patch too.

