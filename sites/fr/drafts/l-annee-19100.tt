=title The year of 19100
=timestamp 2013-04-04T12:45:17
=indexes time, localtime, gmtime, Time::HiRes, DateTime
=status show
=books beginner_book
=author szabgab
=index 1
=archive 1
=feed 1
=comments 1
=social 1

=abstract start

This part of the <a href="/perl-tutorial">Perl Tutorial</a> series is explaining <b>time in perl</b>.

Perl has a built in function called <hl>time()</hl> that will return a nice, 10 digit
long number representing the seconds elapsed since the "epoch" which is
1 January 1970 on most operating systems.

=abstract end

<code lang="perl">
$t = time();         # returns a number like this: 1021924103
</code>

You can use this as a timestamp, for example to check elapsed time.
You can save the seconds at one point in your code by calling <hl>time()</hl>
and then calling <hl>time()</hl> again.
Finally comparing the result of the two calls:

<code lang="perl">
my $t = time();
# lots of code
say 'Elapsed time: ', (time() - $t);
</code>

<h2>localtime</h2>

There is another function called <hl>localtime()</hl> that can take
the above, 10 digit representation of time, and turn it into some human readable format:

<code lang="perl">
my $then = localtime($t);  # returns a string such as       Thu Feb 30 14:15:53 1998
</code>

It actually does not even need an argument. If called without any argument it will
call <hl>time()</hl> by itself and

<code lang="perl">
my $now = localtime();    # returns the string for the current time
</code>

You can save several timestamps in a program generated by <hl>time()</hl>, and later you
can use them to compute elapsed times, or to turn them into such user friendly form as
we saw above.

<h2>The other localtime</h2>

What happens if we call the same <hl>localtime($t)</hl> as above but this time we
assign it to an array? Would you expect to get the same string as above in the first
element of the array?

<code lang="perl">
my @then = localtime($t);
</code>

The array will be filled with the following values:

<code>
53 15 14 30 1 98 4 61 0
</code>

What are these strange numbers? You might ask. If you look more closely, you'll notice that
the first value holds the seconds, followed by the minutes, then hours and a few other numbers
representing the same point in time. The full list is here:

<code lang="perl">
my ($sec ,$min, $hour, $mday, $mon, $year, $wday, $yday, $isdst) = localtime(time);
</code>
<code>
$sec   - seconds (0-59)
$min   - minutes (0-59)
$hour  - hours  (0-23)
$mday  - 'month day' or day of the month (1-31)
$mon   - month (0-11) - 0 is January, 11 is December.
$year  - YEAR-1900
$wday  - 'weak day' or day of the week (0-6), 0 is Sunday, 1 is Monday
$yday  - 'year day' or day of the year (0-364 or 0-365 in leap years)
$isdst - 'is Daylight saving time' true if Daylight Saving Time is on in your computer. Otherwise false.
</code>

Note, that in the field representing the <b>month</b> 0 means January, and 11 means December.
In the filed representing the <b>week day</b> 0 means Sunday and 6 means Saturday.

On the other hand the field representing the <b>day of the month</b> ranges from 1-28,30 or 31 depending on the month.

The most problematic of all might be the field representing the <b>year</b>. It can easily lead to a <b>Y2K</b> bug:

<h2>Year 2000 bug</h2>

When in 1998 people saw the <hl>$year</hl> being 98 and wanted to print 1998 they wrote
<hl>"19$year"</hl>. That worked for them. It even worked in 1999, but then the year 2000 came,
and <hl>$year</hl> became 2000-1900 = 100. Their nicely formatted string became <b>19100</b>.

That's where the year 19100 came from. That's exactly how people created code with the infamous
<b>Year 2000 bug</b>.

If they had read the documentation, they would have written:

<code>
1900 + $year
</code>

which is the correct way to get back the real number of our date used in the
<a href="http://en.wikipedia.org/wiki/Gregorian_calendar">Gregorian calendar</a>.
The most commonly used calendar around the world.

<h2>gmtime</h2>

Perl also has function called <hl>gmtime()</hl> that does the same as <hl>localtime()</hl>,
but it provides the time in <a href="http://en.wikipedia.org/wiki/Greenwich">Greenwich</a>,
a neighborhood in London.  (The $isdst is alway 0 in this case.)

<h2>How does time really work?</h2>

Normally your computers hardware clock should be set to GMT
(<a href="http://en.wikipedia.org/wiki/GMT">Greenwich Mean Time</a>)
(or rather <a href="http://en.wikipedia.org/wiki/Coordinated_Universal_Time">UTC</a> which is more or less the same).

Your operating system (Windows, Linux, Mac OSX, Unix etc.) should know about the time zone
you configured, and whether Daylight Saving Time is in effect. <hl>localtime()</hl> takes into account
these values while <hl>gmtime()</hl> just uses the raw value from the hardware clock.

<h2>High precision time</h2>

The built in <hl>time()</hl> function returns the current time in seconds. That means it cannot
measure shorter time periods than a second. If you need higher precision in time measuring there
is a module called <a href="https://metacpan.org/module/Time::HiRes">Time::HiRes</a> that can provide
a replacement for the <hl>time()</hl> function.

<code lang="perl">
use strict;
use warnings;
use 5.010;

use Time::HiRes qw(time);

say time;
</code>

And the output is:

<code>
1021924103.58673
</code>

<h2>DateTime</h2>

While the above functions can provide you with basic time and date manipulations, probably
anything beyond the most simple need is better served by the <a href="https://metacpan.org/module/DateTime">DateTime</a> module from CPAN.

We will learn about it later.

<h2>Context awareness</h2>

All the above is important, but there is one very important aspect of all this talk.
We slightly skipped over this major issue of Perl for which the <hl>localtime()</hl> function
is just one example.

If you look back in the example, you might notice that the <hl>localtime()</hl> function somehow knows if it return value
is going to be assigned to a scalar variable, or an array,
and returns either a human readable representation of time, or this other, 9-number representation of the same time.

This is a general feature of Perl 5. A very important feature, and we are going to learn about it a lot
more. The important thing here is to understand that in many situations Perl is <b>context sensitive</b>.

