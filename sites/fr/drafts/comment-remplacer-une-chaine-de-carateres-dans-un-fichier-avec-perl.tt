=title How to replace a string in a file with Perl
=timestamp 2013-04-05T13:10:10
=indexes open, close, replace, File::Slurp, read_file, write_file, slurp, $/, $INPUT_RECORD_SEPARATOR
=status show
=books beginner_book
=author szabgab
=index 1
=archive 1
=feed 1
=comments 1
=social 1

=abstract start

Congratulations! Your start-up company was just bought by super large corporation.
You now need to replace <b>Copyright Start-Up</b> by <b>Copyright Large Corporation</b>
in the README.txt file

=abstract end

<h2>File::Slurp</h2>

If you can install <a href="https://metacpan.org/module/File::Slurp">File::Slurp</a> and
if the file is not too large to fit in the memory of your computer,
then this can be the solution:

<code lang="perl">
use strict;
use warnings;

use File::Slurp qw(read_file write_file);

my $filename = 'README.txt';

my $data = read_file $filename, {binmode => ':utf8'};
$data =~ s/Copyright Start-Up/Copyright Large Corporation/g;
write_file $filename, {binmode => ':utf8'}, $data;
</code>

The <hl>read_file</hl> function of File::Slurp will read the whole file into a
single scalar variable. This assumes the file is not too big.

We set <hl>binmode => ':utf8'</hl> to correctly handle Unicode characters.
Then a regex substitution is used with the <hl>/g</hl> modifier to <b>globally</b>
replace all the occurrences of the old text by the new text.

Then we save the content in the same file, again using <hl>binmode => ':utf8'</hl>
to handle Unicode characters correctly.


<h2>Replace content with pure perl</h2>

If you cannot install File::Slurp you can implement a limited
version of its function. In this case, the main body of the code is almost
the same, except that we don't pass the parameters to open the file in Unicode
mode. We have that coded in the functions themselves. You can see how it is done
in the calls to <hl>open</hl>.

<code lang="perl">
use strict;
use warnings;

my $filename = 'README.txt';

my $data = read_file($filename);
$data =~ s/Copyright Start-Up/Copyright Large Corporation/g;
write_file($filename, $data);
exit;

sub read_file {
    my ($filename) = @_;

    open my $in, '<:encoding(UTF-8)', $filename or die "Could not open '$filename' for reading $!";
    local $/ = undef;
    my $all = <$in>;
    close $in;

    return $all;
}

sub write_file {
    my ($filename, $content) = @_;

    open my $out, '>:encoding(UTF-8)', $filename or die "Could not open '$filename' for writing $!";;
    print $out $content;
    close $out;

    return;
}
</code>

The <hl>read_file</hl> function we set the <hl>$/</hl> variable (which is also called $INPUT_RECORD_SEPARATOR)
to <hl>undef</hl>. This is what is usually referred to as <b>slurp mode</b>. It tells the "read-line" operator
of perl to read in the content of all the file into the scalar variable on the left-hand-side of the
assignment: <hl>my $all = &lt;$in>;</hl>. We even used the <hl>local</hl> keyword when we set <hl>$/</hl> so
this change will be reverted once we exit the enclosing block - in this case, once we leave the <hl>read_file</hl>
function.

The <hl>write_file</hl> function is much more straight forward and we put it in a function only to make the
main body of the code similar to the previous solution.

